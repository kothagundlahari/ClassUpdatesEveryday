{"version":3,"sources":["../../../../../../qreact-app/node_modules/websocket-extensions/lib/pipeline/functor.js"],"names":["RingBuffer","require","Functor","session","method","_session","_method","_queue","QUEUE_SIZE","_stopped","pending","prototype","call","error","message","callback","context","record","done","called","self","push","_stop","_flushQueue","err","msg","length","queue","peek","shift","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,aAAaC,QAAQ,eAAR,CAAjB;;AAEA,IAAIC,UAAU,SAAVA,OAAU,CAASC,OAAT,EAAkBC,MAAlB,EAA0B;AACtC,OAAKC,QAAL,GAAgBF,OAAhB;AACA,OAAKG,OAAL,GAAgBF,MAAhB;AACA,OAAKG,MAAL,GAAgB,IAAIP,UAAJ,CAAeE,QAAQM,UAAvB,CAAhB;AACA,OAAKC,QAAL,GAAgB,KAAhB;AACA,OAAKC,OAAL,GAAgB,CAAhB;AACD,CAND;;AAQAR,QAAQM,UAAR,GAAqB,CAArB;;AAEAN,QAAQS,SAAR,CAAkBC,IAAlB,GAAyB,UAASC,KAAT,EAAgBC,OAAhB,EAAyBC,QAAzB,EAAmCC,OAAnC,EAA4C;AACnE,MAAI,KAAKP,QAAT,EAAmB;;AAEnB,MAAIQ,SAAS,EAACJ,OAAOA,KAAR,EAAeC,SAASA,OAAxB,EAAiCC,UAAUA,QAA3C,EAAqDC,SAASA,OAA9D,EAAuEE,MAAM,KAA7E,EAAb;AAAA,MACIC,SAAS,KADb;AAAA,MAEIC,OAAS,IAFb;;AAIA,OAAKb,MAAL,CAAYc,IAAZ,CAAiBJ,MAAjB;;AAEA,MAAIA,OAAOJ,KAAX,EAAkB;AAChBI,WAAOC,IAAP,GAAc,IAAd;AACA,SAAKI,KAAL;AACA,WAAO,KAAKC,WAAL,EAAP;AACD;;AAED,OAAKlB,QAAL,CAAc,KAAKC,OAAnB,EAA4BQ,OAA5B,EAAqC,UAASU,GAAT,EAAcC,GAAd,EAAmB;AACtD,QAAI,EAAEN,UAAUA,SAAS,IAAnB,CAAF,CAAJ,EAAiC;;AAEjC,QAAIK,GAAJ,EAAS;AACPJ,WAAKE,KAAL;AACAL,aAAOJ,KAAP,GAAiBW,GAAjB;AACAP,aAAOH,OAAP,GAAiB,IAAjB;AACD,KAJD,MAIO;AACLG,aAAOH,OAAP,GAAiBW,GAAjB;AACD;;AAEDR,WAAOC,IAAP,GAAc,IAAd;AACAE,SAAKG,WAAL;AACD,GAbD;AAcD,CA7BD;;AA+BArB,QAAQS,SAAR,CAAkBW,KAAlB,GAA0B,YAAW;AACnC,OAAKZ,OAAL,GAAgB,KAAKH,MAAL,CAAYmB,MAA5B;AACA,OAAKjB,QAAL,GAAgB,IAAhB;AACD,CAHD;;AAKAP,QAAQS,SAAR,CAAkBY,WAAlB,GAAgC,YAAW;AACzC,MAAII,QAAQ,KAAKpB,MAAjB;AAAA,MAAyBU,MAAzB;;AAEA,SAAOU,MAAMD,MAAN,GAAe,CAAf,IAAoBC,MAAMC,IAAN,GAAaV,IAAxC,EAA8C;AAC5C,SAAKR,OAAL,IAAgB,CAAhB;AACAO,aAASU,MAAME,KAAN,EAAT;AACAZ,WAAOF,QAAP,CAAgBH,IAAhB,CAAqBK,OAAOD,OAA5B,EAAqCC,OAAOJ,KAA5C,EAAmDI,OAAOH,OAA1D;AACD;AACF,CARD;;AAUAgB,OAAOC,OAAP,GAAiB7B,OAAjB","file":"functor.js","sourcesContent":["'use strict';\n\nvar RingBuffer = require('./ring_buffer');\n\nvar Functor = function(session, method) {\n  this._session = session;\n  this._method  = method;\n  this._queue   = new RingBuffer(Functor.QUEUE_SIZE);\n  this._stopped = false;\n  this.pending  = 0;\n};\n\nFunctor.QUEUE_SIZE = 8;\n\nFunctor.prototype.call = function(error, message, callback, context) {\n  if (this._stopped) return;\n\n  var record = {error: error, message: message, callback: callback, context: context, done: false},\n      called = false,\n      self   = this;\n\n  this._queue.push(record);\n\n  if (record.error) {\n    record.done = true;\n    this._stop();\n    return this._flushQueue();\n  }\n\n  this._session[this._method](message, function(err, msg) {\n    if (!(called ^ (called = true))) return;\n\n    if (err) {\n      self._stop();\n      record.error   = err;\n      record.message = null;\n    } else {\n      record.message = msg;\n    }\n\n    record.done = true;\n    self._flushQueue();\n  });\n};\n\nFunctor.prototype._stop = function() {\n  this.pending  = this._queue.length;\n  this._stopped = true;\n};\n\nFunctor.prototype._flushQueue = function() {\n  var queue = this._queue, record;\n\n  while (queue.length > 0 && queue.peek().done) {\n    this.pending -= 1;\n    record = queue.shift();\n    record.callback.call(record.context, record.error, record.message);\n  }\n};\n\nmodule.exports = Functor;\n"]}