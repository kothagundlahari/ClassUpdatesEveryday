{"version":3,"sources":["../../../../../qreact-app/node_modules/uglify-js/lib/parse.js"],"names":["KEYWORDS","KEYWORDS_ATOM","RESERVED_WORDS","KEYWORDS_BEFORE_EXPRESSION","makePredicate","OPERATOR_CHARS","characters","RE_HEX_NUMBER","RE_OCT_NUMBER","OPERATORS","WHITESPACE_CHARS","NEWLINE_CHARS","PUNC_BEFORE_EXPRESSION","PUNC_CHARS","REGEXP_MODIFIERS","UNICODE","letter","RegExp","digit","non_spacing_mark","space_combining_mark","connector_punctuation","is_letter","code","test","String","fromCharCode","is_digit","is_alphanumeric_char","is_unicode_digit","is_unicode_combining_mark","ch","is_unicode_connector_punctuation","is_identifier","name","is_identifier_start","is_identifier_char","charCodeAt","is_identifier_string","str","parse_js_number","num","parseInt","substr","val","parseFloat","JS_Parse_Error","message","filename","line","col","pos","prototype","Object","create","Error","constructor","configure_error_stack","js_error","is_token","token","type","value","EX_EOF","tokenizer","$TEXT","html5_comments","shebang","S","text","tokpos","tokline","tokcol","newline_before","regex_allowed","comments_before","directives","directive_stack","peek","charAt","next","signal_eof","in_string","forward","i","looking_at","length","find_eol","n","find","what","indexOf","start_token","prev_was_dot","is_comment","UNARY_POSTFIX","ret","endline","endcol","endpos","nlb","file","raw","substring","len","AST_Token","skip_whitespace","read_while","pred","parse_error","err","read_num","prefix","has_e","after_e","has_x","has_dot","next_token","has_directive","valid","isNaN","read_escaped_char","hex_bytes","read_octal_escape_sequence","p","read_string","with_eof_error","quote_char","quote","tok","skip_line_comment","push","skip_multiline_comment","replace","read_name","backslash","escaped","hex","toString","toUpperCase","slice","read_regexp","source","prev_backslash","in_class","mods","regexp","raw_source","e","read_operator","grow","op","bigger","handle_slash","handle_dot","read_word","word","eof_error","cont","x","ex","force_regexp","context","nc","add_directive","directive","undefined","push_directives_stack","pop_directives_stack","pop","UNARY_PREFIX","ASSIGNMENT","PRECEDENCE","a","b","j","STATEMENTS_WITH_LABELS","array_to_hash","ATOMIC_START_TOKEN","parse","options","defaults","bare_returns","expression","strict","toplevel","input","prev","peeked","in_function","in_directives","in_loop","labels","is","croak","msg","ctx","token_error","unexpected","expect_token","expect","punc","can_insert_semicolon","semicolon","optional","parenthesised","exp","embed_tokens","parser","start","expr","end","handle_regexp","statement","dir","stat","simple_statement","AST_Directive","body","labeled_statement","AST_BlockStatement","block_","AST_EmptyStatement","break_cont","AST_Break","AST_Continue","AST_Debugger","condition","AST_Do","AST_While","for_","function_","AST_Defun","if_","AST_Return","AST_Switch","switch_body_","AST_Throw","try_","node","var_","AST_With","label","as_symbol","AST_Label","find_if","l","AST_IterationStatement","references","forEach","ref","AST_LabeledStatement","tmp","AST_SimpleStatement","ldef","AST_LabelRef","thedef","TYPE","init","AST_Var","definitions","for_in","regular_for","step","AST_For","lhs","obj","AST_ForIn","object","ctor","in_statement","AST_SymbolDefun","AST_SymbolLambda","argnames","first","AST_SymbolFunarg","loop","strict_verify_symbol","cond","belse","AST_If","alternative","cur","branch","AST_Case","AST_Default","bcatch","bfinally","AST_SymbolCatch","AST_Catch","argname","AST_Finally","AST_Try","vardefs","no_in","AST_VarDef","AST_SymbolVar","new_","allow_calls","newexp","expr_atom","args","expr_list","subscripts","AST_New","as_atom_node","_make_symbol","AST_SymbolRef","AST_Number","AST_String","AST_RegExp","AST_False","AST_True","AST_Null","array_","object_","func","AST_Function","closing","allow_trailing_comma","allow_empty","AST_Hole","AST_Array","elements","create_accessor","AST_Accessor","as_property_name","key","AST_SymbolAccessor","AST_ObjectGetter","AST_ObjectSetter","AST_ObjectKeyVal","AST_Object","properties","as_name","AST_This","sym","noerror","AST_SymbolDeclaration","AST_Dot","property","prop","AST_Sub","AST_Call","maybe_unary","make_unary","AST_UnaryPrefix","AST_UnaryPostfix","is_assignable","operator","expr_op","left","min_prec","prec","right","AST_Binary","expr_ops","maybe_conditional","yes","AST_Conditional","consequent","AST_PropAccess","maybe_assign","AST_Assign","commas","exprs","AST_Sequence","expressions","concat","AST_Toplevel"],"mappings":"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","file":"parse.js","sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n    Parser based on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nvar KEYWORDS = 'break case catch const continue debugger default delete do else finally for function if in instanceof new return switch throw try typeof var void while with';\nvar KEYWORDS_ATOM = 'false null true';\nvar RESERVED_WORDS = 'abstract boolean byte char class double enum export extends final float goto implements import int interface let long native package private protected public short static super synchronized this throws transient volatile yield'\n    + \" \" + KEYWORDS_ATOM + \" \" + KEYWORDS;\nvar KEYWORDS_BEFORE_EXPRESSION = 'return new delete throw else case';\n\nKEYWORDS = makePredicate(KEYWORDS);\nRESERVED_WORDS = makePredicate(RESERVED_WORDS);\nKEYWORDS_BEFORE_EXPRESSION = makePredicate(KEYWORDS_BEFORE_EXPRESSION);\nKEYWORDS_ATOM = makePredicate(KEYWORDS_ATOM);\n\nvar OPERATOR_CHARS = makePredicate(characters(\"+-*&%=<>!?|~^\"));\n\nvar RE_HEX_NUMBER = /^0x[0-9a-f]+$/i;\nvar RE_OCT_NUMBER = /^0[0-7]+$/;\n\nvar OPERATORS = makePredicate([\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"new\",\n    \"void\",\n    \"delete\",\n    \"++\",\n    \"--\",\n    \"+\",\n    \"-\",\n    \"!\",\n    \"~\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \">>\",\n    \"<<\",\n    \">>>\",\n    \"<\",\n    \">\",\n    \"<=\",\n    \">=\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\",\n    \"?\",\n    \"=\",\n    \"+=\",\n    \"-=\",\n    \"/=\",\n    \"*=\",\n    \"%=\",\n    \">>=\",\n    \"<<=\",\n    \">>>=\",\n    \"|=\",\n    \"^=\",\n    \"&=\",\n    \"&&\",\n    \"||\"\n]);\n\nvar WHITESPACE_CHARS = makePredicate(characters(\" \\u00a0\\n\\r\\t\\f\\u000b\\u200b\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\uFEFF\"));\n\nvar NEWLINE_CHARS = makePredicate(characters(\"\\n\\r\\u2028\\u2029\"));\n\nvar PUNC_BEFORE_EXPRESSION = makePredicate(characters(\"[{(,;:\"));\n\nvar PUNC_CHARS = makePredicate(characters(\"[]{}(),;:\"));\n\nvar REGEXP_MODIFIERS = makePredicate(characters(\"gmsiy\"));\n\n/* -----[ Tokenizer ]----- */\n\n// regexps adapted from http://xregexp.com/plugins/#unicode\nvar UNICODE = {\n    letter: new RegExp(\"[\\\\u0041-\\\\u005A\\\\u0061-\\\\u007A\\\\u00AA\\\\u00B5\\\\u00BA\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02C1\\\\u02C6-\\\\u02D1\\\\u02E0-\\\\u02E4\\\\u02EC\\\\u02EE\\\\u0370-\\\\u0374\\\\u0376\\\\u0377\\\\u037A-\\\\u037D\\\\u037F\\\\u0386\\\\u0388-\\\\u038A\\\\u038C\\\\u038E-\\\\u03A1\\\\u03A3-\\\\u03F5\\\\u03F7-\\\\u0481\\\\u048A-\\\\u052F\\\\u0531-\\\\u0556\\\\u0559\\\\u0561-\\\\u0587\\\\u05D0-\\\\u05EA\\\\u05F0-\\\\u05F2\\\\u0620-\\\\u064A\\\\u066E\\\\u066F\\\\u0671-\\\\u06D3\\\\u06D5\\\\u06E5\\\\u06E6\\\\u06EE\\\\u06EF\\\\u06FA-\\\\u06FC\\\\u06FF\\\\u0710\\\\u0712-\\\\u072F\\\\u074D-\\\\u07A5\\\\u07B1\\\\u07CA-\\\\u07EA\\\\u07F4\\\\u07F5\\\\u07FA\\\\u0800-\\\\u0815\\\\u081A\\\\u0824\\\\u0828\\\\u0840-\\\\u0858\\\\u08A0-\\\\u08B2\\\\u0904-\\\\u0939\\\\u093D\\\\u0950\\\\u0958-\\\\u0961\\\\u0971-\\\\u0980\\\\u0985-\\\\u098C\\\\u098F\\\\u0990\\\\u0993-\\\\u09A8\\\\u09AA-\\\\u09B0\\\\u09B2\\\\u09B6-\\\\u09B9\\\\u09BD\\\\u09CE\\\\u09DC\\\\u09DD\\\\u09DF-\\\\u09E1\\\\u09F0\\\\u09F1\\\\u0A05-\\\\u0A0A\\\\u0A0F\\\\u0A10\\\\u0A13-\\\\u0A28\\\\u0A2A-\\\\u0A30\\\\u0A32\\\\u0A33\\\\u0A35\\\\u0A36\\\\u0A38\\\\u0A39\\\\u0A59-\\\\u0A5C\\\\u0A5E\\\\u0A72-\\\\u0A74\\\\u0A85-\\\\u0A8D\\\\u0A8F-\\\\u0A91\\\\u0A93-\\\\u0AA8\\\\u0AAA-\\\\u0AB0\\\\u0AB2\\\\u0AB3\\\\u0AB5-\\\\u0AB9\\\\u0ABD\\\\u0AD0\\\\u0AE0\\\\u0AE1\\\\u0B05-\\\\u0B0C\\\\u0B0F\\\\u0B10\\\\u0B13-\\\\u0B28\\\\u0B2A-\\\\u0B30\\\\u0B32\\\\u0B33\\\\u0B35-\\\\u0B39\\\\u0B3D\\\\u0B5C\\\\u0B5D\\\\u0B5F-\\\\u0B61\\\\u0B71\\\\u0B83\\\\u0B85-\\\\u0B8A\\\\u0B8E-\\\\u0B90\\\\u0B92-\\\\u0B95\\\\u0B99\\\\u0B9A\\\\u0B9C\\\\u0B9E\\\\u0B9F\\\\u0BA3\\\\u0BA4\\\\u0BA8-\\\\u0BAA\\\\u0BAE-\\\\u0BB9\\\\u0BD0\\\\u0C05-\\\\u0C0C\\\\u0C0E-\\\\u0C10\\\\u0C12-\\\\u0C28\\\\u0C2A-\\\\u0C39\\\\u0C3D\\\\u0C58\\\\u0C59\\\\u0C60\\\\u0C61\\\\u0C85-\\\\u0C8C\\\\u0C8E-\\\\u0C90\\\\u0C92-\\\\u0CA8\\\\u0CAA-\\\\u0CB3\\\\u0CB5-\\\\u0CB9\\\\u0CBD\\\\u0CDE\\\\u0CE0\\\\u0CE1\\\\u0CF1\\\\u0CF2\\\\u0D05-\\\\u0D0C\\\\u0D0E-\\\\u0D10\\\\u0D12-\\\\u0D3A\\\\u0D3D\\\\u0D4E\\\\u0D60\\\\u0D61\\\\u0D7A-\\\\u0D7F\\\\u0D85-\\\\u0D96\\\\u0D9A-\\\\u0DB1\\\\u0DB3-\\\\u0DBB\\\\u0DBD\\\\u0DC0-\\\\u0DC6\\\\u0E01-\\\\u0E30\\\\u0E32\\\\u0E33\\\\u0E40-\\\\u0E46\\\\u0E81\\\\u0E82\\\\u0E84\\\\u0E87\\\\u0E88\\\\u0E8A\\\\u0E8D\\\\u0E94-\\\\u0E97\\\\u0E99-\\\\u0E9F\\\\u0EA1-\\\\u0EA3\\\\u0EA5\\\\u0EA7\\\\u0EAA\\\\u0EAB\\\\u0EAD-\\\\u0EB0\\\\u0EB2\\\\u0EB3\\\\u0EBD\\\\u0EC0-\\\\u0EC4\\\\u0EC6\\\\u0EDC-\\\\u0EDF\\\\u0F00\\\\u0F40-\\\\u0F47\\\\u0F49-\\\\u0F6C\\\\u0F88-\\\\u0F8C\\\\u1000-\\\\u102A\\\\u103F\\\\u1050-\\\\u1055\\\\u105A-\\\\u105D\\\\u1061\\\\u1065\\\\u1066\\\\u106E-\\\\u1070\\\\u1075-\\\\u1081\\\\u108E\\\\u10A0-\\\\u10C5\\\\u10C7\\\\u10CD\\\\u10D0-\\\\u10FA\\\\u10FC-\\\\u1248\\\\u124A-\\\\u124D\\\\u1250-\\\\u1256\\\\u1258\\\\u125A-\\\\u125D\\\\u1260-\\\\u1288\\\\u128A-\\\\u128D\\\\u1290-\\\\u12B0\\\\u12B2-\\\\u12B5\\\\u12B8-\\\\u12BE\\\\u12C0\\\\u12C2-\\\\u12C5\\\\u12C8-\\\\u12D6\\\\u12D8-\\\\u1310\\\\u1312-\\\\u1315\\\\u1318-\\\\u135A\\\\u1380-\\\\u138F\\\\u13A0-\\\\u13F4\\\\u1401-\\\\u166C\\\\u166F-\\\\u167F\\\\u1681-\\\\u169A\\\\u16A0-\\\\u16EA\\\\u16EE-\\\\u16F8\\\\u1700-\\\\u170C\\\\u170E-\\\\u1711\\\\u1720-\\\\u1731\\\\u1740-\\\\u1751\\\\u1760-\\\\u176C\\\\u176E-\\\\u1770\\\\u1780-\\\\u17B3\\\\u17D7\\\\u17DC\\\\u1820-\\\\u1877\\\\u1880-\\\\u18A8\\\\u18AA\\\\u18B0-\\\\u18F5\\\\u1900-\\\\u191E\\\\u1950-\\\\u196D\\\\u1970-\\\\u1974\\\\u1980-\\\\u19AB\\\\u19C1-\\\\u19C7\\\\u1A00-\\\\u1A16\\\\u1A20-\\\\u1A54\\\\u1AA7\\\\u1B05-\\\\u1B33\\\\u1B45-\\\\u1B4B\\\\u1B83-\\\\u1BA0\\\\u1BAE\\\\u1BAF\\\\u1BBA-\\\\u1BE5\\\\u1C00-\\\\u1C23\\\\u1C4D-\\\\u1C4F\\\\u1C5A-\\\\u1C7D\\\\u1CE9-\\\\u1CEC\\\\u1CEE-\\\\u1CF1\\\\u1CF5\\\\u1CF6\\\\u1D00-\\\\u1DBF\\\\u1E00-\\\\u1F15\\\\u1F18-\\\\u1F1D\\\\u1F20-\\\\u1F45\\\\u1F48-\\\\u1F4D\\\\u1F50-\\\\u1F57\\\\u1F59\\\\u1F5B\\\\u1F5D\\\\u1F5F-\\\\u1F7D\\\\u1F80-\\\\u1FB4\\\\u1FB6-\\\\u1FBC\\\\u1FBE\\\\u1FC2-\\\\u1FC4\\\\u1FC6-\\\\u1FCC\\\\u1FD0-\\\\u1FD3\\\\u1FD6-\\\\u1FDB\\\\u1FE0-\\\\u1FEC\\\\u1FF2-\\\\u1FF4\\\\u1FF6-\\\\u1FFC\\\\u2071\\\\u207F\\\\u2090-\\\\u209C\\\\u2102\\\\u2107\\\\u210A-\\\\u2113\\\\u2115\\\\u2119-\\\\u211D\\\\u2124\\\\u2126\\\\u2128\\\\u212A-\\\\u212D\\\\u212F-\\\\u2139\\\\u213C-\\\\u213F\\\\u2145-\\\\u2149\\\\u214E\\\\u2160-\\\\u2188\\\\u2C00-\\\\u2C2E\\\\u2C30-\\\\u2C5E\\\\u2C60-\\\\u2CE4\\\\u2CEB-\\\\u2CEE\\\\u2CF2\\\\u2CF3\\\\u2D00-\\\\u2D25\\\\u2D27\\\\u2D2D\\\\u2D30-\\\\u2D67\\\\u2D6F\\\\u2D80-\\\\u2D96\\\\u2DA0-\\\\u2DA6\\\\u2DA8-\\\\u2DAE\\\\u2DB0-\\\\u2DB6\\\\u2DB8-\\\\u2DBE\\\\u2DC0-\\\\u2DC6\\\\u2DC8-\\\\u2DCE\\\\u2DD0-\\\\u2DD6\\\\u2DD8-\\\\u2DDE\\\\u2E2F\\\\u3005-\\\\u3007\\\\u3021-\\\\u3029\\\\u3031-\\\\u3035\\\\u3038-\\\\u303C\\\\u3041-\\\\u3096\\\\u309D-\\\\u309F\\\\u30A1-\\\\u30FA\\\\u30FC-\\\\u30FF\\\\u3105-\\\\u312D\\\\u3131-\\\\u318E\\\\u31A0-\\\\u31BA\\\\u31F0-\\\\u31FF\\\\u3400-\\\\u4DB5\\\\u4E00-\\\\u9FCC\\\\uA000-\\\\uA48C\\\\uA4D0-\\\\uA4FD\\\\uA500-\\\\uA60C\\\\uA610-\\\\uA61F\\\\uA62A\\\\uA62B\\\\uA640-\\\\uA66E\\\\uA67F-\\\\uA69D\\\\uA6A0-\\\\uA6EF\\\\uA717-\\\\uA71F\\\\uA722-\\\\uA788\\\\uA78B-\\\\uA78E\\\\uA790-\\\\uA7AD\\\\uA7B0\\\\uA7B1\\\\uA7F7-\\\\uA801\\\\uA803-\\\\uA805\\\\uA807-\\\\uA80A\\\\uA80C-\\\\uA822\\\\uA840-\\\\uA873\\\\uA882-\\\\uA8B3\\\\uA8F2-\\\\uA8F7\\\\uA8FB\\\\uA90A-\\\\uA925\\\\uA930-\\\\uA946\\\\uA960-\\\\uA97C\\\\uA984-\\\\uA9B2\\\\uA9CF\\\\uA9E0-\\\\uA9E4\\\\uA9E6-\\\\uA9EF\\\\uA9FA-\\\\uA9FE\\\\uAA00-\\\\uAA28\\\\uAA40-\\\\uAA42\\\\uAA44-\\\\uAA4B\\\\uAA60-\\\\uAA76\\\\uAA7A\\\\uAA7E-\\\\uAAAF\\\\uAAB1\\\\uAAB5\\\\uAAB6\\\\uAAB9-\\\\uAABD\\\\uAAC0\\\\uAAC2\\\\uAADB-\\\\uAADD\\\\uAAE0-\\\\uAAEA\\\\uAAF2-\\\\uAAF4\\\\uAB01-\\\\uAB06\\\\uAB09-\\\\uAB0E\\\\uAB11-\\\\uAB16\\\\uAB20-\\\\uAB26\\\\uAB28-\\\\uAB2E\\\\uAB30-\\\\uAB5A\\\\uAB5C-\\\\uAB5F\\\\uAB64\\\\uAB65\\\\uABC0-\\\\uABE2\\\\uAC00-\\\\uD7A3\\\\uD7B0-\\\\uD7C6\\\\uD7CB-\\\\uD7FB\\\\uF900-\\\\uFA6D\\\\uFA70-\\\\uFAD9\\\\uFB00-\\\\uFB06\\\\uFB13-\\\\uFB17\\\\uFB1D\\\\uFB1F-\\\\uFB28\\\\uFB2A-\\\\uFB36\\\\uFB38-\\\\uFB3C\\\\uFB3E\\\\uFB40\\\\uFB41\\\\uFB43\\\\uFB44\\\\uFB46-\\\\uFBB1\\\\uFBD3-\\\\uFD3D\\\\uFD50-\\\\uFD8F\\\\uFD92-\\\\uFDC7\\\\uFDF0-\\\\uFDFB\\\\uFE70-\\\\uFE74\\\\uFE76-\\\\uFEFC\\\\uFF21-\\\\uFF3A\\\\uFF41-\\\\uFF5A\\\\uFF66-\\\\uFFBE\\\\uFFC2-\\\\uFFC7\\\\uFFCA-\\\\uFFCF\\\\uFFD2-\\\\uFFD7\\\\uFFDA-\\\\uFFDC]\"),\n    digit: new RegExp(\"[\\\\u0030-\\\\u0039\\\\u0660-\\\\u0669\\\\u06F0-\\\\u06F9\\\\u07C0-\\\\u07C9\\\\u0966-\\\\u096F\\\\u09E6-\\\\u09EF\\\\u0A66-\\\\u0A6F\\\\u0AE6-\\\\u0AEF\\\\u0B66-\\\\u0B6F\\\\u0BE6-\\\\u0BEF\\\\u0C66-\\\\u0C6F\\\\u0CE6-\\\\u0CEF\\\\u0D66-\\\\u0D6F\\\\u0DE6-\\\\u0DEF\\\\u0E50-\\\\u0E59\\\\u0ED0-\\\\u0ED9\\\\u0F20-\\\\u0F29\\\\u1040-\\\\u1049\\\\u1090-\\\\u1099\\\\u17E0-\\\\u17E9\\\\u1810-\\\\u1819\\\\u1946-\\\\u194F\\\\u19D0-\\\\u19D9\\\\u1A80-\\\\u1A89\\\\u1A90-\\\\u1A99\\\\u1B50-\\\\u1B59\\\\u1BB0-\\\\u1BB9\\\\u1C40-\\\\u1C49\\\\u1C50-\\\\u1C59\\\\uA620-\\\\uA629\\\\uA8D0-\\\\uA8D9\\\\uA900-\\\\uA909\\\\uA9D0-\\\\uA9D9\\\\uA9F0-\\\\uA9F9\\\\uAA50-\\\\uAA59\\\\uABF0-\\\\uABF9\\\\uFF10-\\\\uFF19]\"),\n    non_spacing_mark: new RegExp(\"[\\\\u0300-\\\\u036F\\\\u0483-\\\\u0487\\\\u0591-\\\\u05BD\\\\u05BF\\\\u05C1\\\\u05C2\\\\u05C4\\\\u05C5\\\\u05C7\\\\u0610-\\\\u061A\\\\u064B-\\\\u065E\\\\u0670\\\\u06D6-\\\\u06DC\\\\u06DF-\\\\u06E4\\\\u06E7\\\\u06E8\\\\u06EA-\\\\u06ED\\\\u0711\\\\u0730-\\\\u074A\\\\u07A6-\\\\u07B0\\\\u07EB-\\\\u07F3\\\\u0816-\\\\u0819\\\\u081B-\\\\u0823\\\\u0825-\\\\u0827\\\\u0829-\\\\u082D\\\\u0900-\\\\u0902\\\\u093C\\\\u0941-\\\\u0948\\\\u094D\\\\u0951-\\\\u0955\\\\u0962\\\\u0963\\\\u0981\\\\u09BC\\\\u09C1-\\\\u09C4\\\\u09CD\\\\u09E2\\\\u09E3\\\\u0A01\\\\u0A02\\\\u0A3C\\\\u0A41\\\\u0A42\\\\u0A47\\\\u0A48\\\\u0A4B-\\\\u0A4D\\\\u0A51\\\\u0A70\\\\u0A71\\\\u0A75\\\\u0A81\\\\u0A82\\\\u0ABC\\\\u0AC1-\\\\u0AC5\\\\u0AC7\\\\u0AC8\\\\u0ACD\\\\u0AE2\\\\u0AE3\\\\u0B01\\\\u0B3C\\\\u0B3F\\\\u0B41-\\\\u0B44\\\\u0B4D\\\\u0B56\\\\u0B62\\\\u0B63\\\\u0B82\\\\u0BC0\\\\u0BCD\\\\u0C3E-\\\\u0C40\\\\u0C46-\\\\u0C48\\\\u0C4A-\\\\u0C4D\\\\u0C55\\\\u0C56\\\\u0C62\\\\u0C63\\\\u0CBC\\\\u0CBF\\\\u0CC6\\\\u0CCC\\\\u0CCD\\\\u0CE2\\\\u0CE3\\\\u0D41-\\\\u0D44\\\\u0D4D\\\\u0D62\\\\u0D63\\\\u0DCA\\\\u0DD2-\\\\u0DD4\\\\u0DD6\\\\u0E31\\\\u0E34-\\\\u0E3A\\\\u0E47-\\\\u0E4E\\\\u0EB1\\\\u0EB4-\\\\u0EB9\\\\u0EBB\\\\u0EBC\\\\u0EC8-\\\\u0ECD\\\\u0F18\\\\u0F19\\\\u0F35\\\\u0F37\\\\u0F39\\\\u0F71-\\\\u0F7E\\\\u0F80-\\\\u0F84\\\\u0F86\\\\u0F87\\\\u0F90-\\\\u0F97\\\\u0F99-\\\\u0FBC\\\\u0FC6\\\\u102D-\\\\u1030\\\\u1032-\\\\u1037\\\\u1039\\\\u103A\\\\u103D\\\\u103E\\\\u1058\\\\u1059\\\\u105E-\\\\u1060\\\\u1071-\\\\u1074\\\\u1082\\\\u1085\\\\u1086\\\\u108D\\\\u109D\\\\u135F\\\\u1712-\\\\u1714\\\\u1732-\\\\u1734\\\\u1752\\\\u1753\\\\u1772\\\\u1773\\\\u17B7-\\\\u17BD\\\\u17C6\\\\u17C9-\\\\u17D3\\\\u17DD\\\\u180B-\\\\u180D\\\\u18A9\\\\u1920-\\\\u1922\\\\u1927\\\\u1928\\\\u1932\\\\u1939-\\\\u193B\\\\u1A17\\\\u1A18\\\\u1A56\\\\u1A58-\\\\u1A5E\\\\u1A60\\\\u1A62\\\\u1A65-\\\\u1A6C\\\\u1A73-\\\\u1A7C\\\\u1A7F\\\\u1B00-\\\\u1B03\\\\u1B34\\\\u1B36-\\\\u1B3A\\\\u1B3C\\\\u1B42\\\\u1B6B-\\\\u1B73\\\\u1B80\\\\u1B81\\\\u1BA2-\\\\u1BA5\\\\u1BA8\\\\u1BA9\\\\u1C2C-\\\\u1C33\\\\u1C36\\\\u1C37\\\\u1CD0-\\\\u1CD2\\\\u1CD4-\\\\u1CE0\\\\u1CE2-\\\\u1CE8\\\\u1CED\\\\u1DC0-\\\\u1DE6\\\\u1DFD-\\\\u1DFF\\\\u20D0-\\\\u20DC\\\\u20E1\\\\u20E5-\\\\u20F0\\\\u2CEF-\\\\u2CF1\\\\u2DE0-\\\\u2DFF\\\\u302A-\\\\u302F\\\\u3099\\\\u309A\\\\uA66F\\\\uA67C\\\\uA67D\\\\uA6F0\\\\uA6F1\\\\uA802\\\\uA806\\\\uA80B\\\\uA825\\\\uA826\\\\uA8C4\\\\uA8E0-\\\\uA8F1\\\\uA926-\\\\uA92D\\\\uA947-\\\\uA951\\\\uA980-\\\\uA982\\\\uA9B3\\\\uA9B6-\\\\uA9B9\\\\uA9BC\\\\uAA29-\\\\uAA2E\\\\uAA31\\\\uAA32\\\\uAA35\\\\uAA36\\\\uAA43\\\\uAA4C\\\\uAAB0\\\\uAAB2-\\\\uAAB4\\\\uAAB7\\\\uAAB8\\\\uAABE\\\\uAABF\\\\uAAC1\\\\uABE5\\\\uABE8\\\\uABED\\\\uFB1E\\\\uFE00-\\\\uFE0F\\\\uFE20-\\\\uFE26]\"),\n    space_combining_mark: new RegExp(\"[\\\\u0903\\\\u093E-\\\\u0940\\\\u0949-\\\\u094C\\\\u094E\\\\u0982\\\\u0983\\\\u09BE-\\\\u09C0\\\\u09C7\\\\u09C8\\\\u09CB\\\\u09CC\\\\u09D7\\\\u0A03\\\\u0A3E-\\\\u0A40\\\\u0A83\\\\u0ABE-\\\\u0AC0\\\\u0AC9\\\\u0ACB\\\\u0ACC\\\\u0B02\\\\u0B03\\\\u0B3E\\\\u0B40\\\\u0B47\\\\u0B48\\\\u0B4B\\\\u0B4C\\\\u0B57\\\\u0BBE\\\\u0BBF\\\\u0BC1\\\\u0BC2\\\\u0BC6-\\\\u0BC8\\\\u0BCA-\\\\u0BCC\\\\u0BD7\\\\u0C01-\\\\u0C03\\\\u0C41-\\\\u0C44\\\\u0C82\\\\u0C83\\\\u0CBE\\\\u0CC0-\\\\u0CC4\\\\u0CC7\\\\u0CC8\\\\u0CCA\\\\u0CCB\\\\u0CD5\\\\u0CD6\\\\u0D02\\\\u0D03\\\\u0D3E-\\\\u0D40\\\\u0D46-\\\\u0D48\\\\u0D4A-\\\\u0D4C\\\\u0D57\\\\u0D82\\\\u0D83\\\\u0DCF-\\\\u0DD1\\\\u0DD8-\\\\u0DDF\\\\u0DF2\\\\u0DF3\\\\u0F3E\\\\u0F3F\\\\u0F7F\\\\u102B\\\\u102C\\\\u1031\\\\u1038\\\\u103B\\\\u103C\\\\u1056\\\\u1057\\\\u1062-\\\\u1064\\\\u1067-\\\\u106D\\\\u1083\\\\u1084\\\\u1087-\\\\u108C\\\\u108F\\\\u109A-\\\\u109C\\\\u17B6\\\\u17BE-\\\\u17C5\\\\u17C7\\\\u17C8\\\\u1923-\\\\u1926\\\\u1929-\\\\u192B\\\\u1930\\\\u1931\\\\u1933-\\\\u1938\\\\u19B0-\\\\u19C0\\\\u19C8\\\\u19C9\\\\u1A19-\\\\u1A1B\\\\u1A55\\\\u1A57\\\\u1A61\\\\u1A63\\\\u1A64\\\\u1A6D-\\\\u1A72\\\\u1B04\\\\u1B35\\\\u1B3B\\\\u1B3D-\\\\u1B41\\\\u1B43\\\\u1B44\\\\u1B82\\\\u1BA1\\\\u1BA6\\\\u1BA7\\\\u1BAA\\\\u1C24-\\\\u1C2B\\\\u1C34\\\\u1C35\\\\u1CE1\\\\u1CF2\\\\uA823\\\\uA824\\\\uA827\\\\uA880\\\\uA881\\\\uA8B4-\\\\uA8C3\\\\uA952\\\\uA953\\\\uA983\\\\uA9B4\\\\uA9B5\\\\uA9BA\\\\uA9BB\\\\uA9BD-\\\\uA9C0\\\\uAA2F\\\\uAA30\\\\uAA33\\\\uAA34\\\\uAA4D\\\\uAA7B\\\\uABE3\\\\uABE4\\\\uABE6\\\\uABE7\\\\uABE9\\\\uABEA\\\\uABEC]\"),\n    connector_punctuation: new RegExp(\"[\\\\u005F\\\\u203F\\\\u2040\\\\u2054\\\\uFE33\\\\uFE34\\\\uFE4D-\\\\uFE4F\\\\uFF3F]\")\n};\n\nfunction is_letter(code) {\n    return (code >= 97 && code <= 122)\n        || (code >= 65 && code <= 90)\n        || (code >= 0xaa && UNICODE.letter.test(String.fromCharCode(code)));\n};\n\nfunction is_digit(code) {\n    return code >= 48 && code <= 57;\n};\n\nfunction is_alphanumeric_char(code) {\n    return is_digit(code) || is_letter(code);\n};\n\nfunction is_unicode_digit(code) {\n    return UNICODE.digit.test(String.fromCharCode(code));\n}\n\nfunction is_unicode_combining_mark(ch) {\n    return UNICODE.non_spacing_mark.test(ch) || UNICODE.space_combining_mark.test(ch);\n};\n\nfunction is_unicode_connector_punctuation(ch) {\n    return UNICODE.connector_punctuation.test(ch);\n};\n\nfunction is_identifier(name) {\n    return !RESERVED_WORDS(name) && /^[a-z_$][a-z0-9_$]*$/i.test(name);\n};\n\nfunction is_identifier_start(code) {\n    return code == 36 || code == 95 || is_letter(code);\n};\n\nfunction is_identifier_char(ch) {\n    var code = ch.charCodeAt(0);\n    return is_identifier_start(code)\n        || is_digit(code)\n        || code == 8204 // \\u200c: zero-width non-joiner <ZWNJ>\n        || code == 8205 // \\u200d: zero-width joiner <ZWJ> (in my ECMA-262 PDF, this is also 200c)\n        || is_unicode_combining_mark(ch)\n        || is_unicode_connector_punctuation(ch)\n        || is_unicode_digit(code)\n    ;\n};\n\nfunction is_identifier_string(str){\n    return /^[a-z_$][a-z0-9_$]*$/i.test(str);\n};\n\nfunction parse_js_number(num) {\n    if (RE_HEX_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 16);\n    } else if (RE_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(1), 8);\n    } else {\n        var val = parseFloat(num);\n        if (val == num) return val;\n    }\n};\n\nfunction JS_Parse_Error(message, filename, line, col, pos) {\n    this.message = message;\n    this.filename = filename;\n    this.line = line;\n    this.col = col;\n    this.pos = pos;\n};\nJS_Parse_Error.prototype = Object.create(Error.prototype);\nJS_Parse_Error.prototype.constructor = JS_Parse_Error;\nJS_Parse_Error.prototype.name = \"SyntaxError\";\nconfigure_error_stack(JS_Parse_Error);\n\nfunction js_error(message, filename, line, col, pos) {\n    throw new JS_Parse_Error(message, filename, line, col, pos);\n};\n\nfunction is_token(token, type, val) {\n    return token.type == type && (val == null || token.value == val);\n};\n\nvar EX_EOF = {};\n\nfunction tokenizer($TEXT, filename, html5_comments, shebang) {\n\n    var S = {\n        text            : $TEXT,\n        filename        : filename,\n        pos             : 0,\n        tokpos          : 0,\n        line            : 1,\n        tokline         : 0,\n        col             : 0,\n        tokcol          : 0,\n        newline_before  : false,\n        regex_allowed   : false,\n        comments_before : [],\n        directives      : {},\n        directive_stack : []\n    };\n\n    function peek() { return S.text.charAt(S.pos); };\n\n    function next(signal_eof, in_string) {\n        var ch = S.text.charAt(S.pos++);\n        if (signal_eof && !ch)\n            throw EX_EOF;\n        if (NEWLINE_CHARS(ch)) {\n            S.newline_before = S.newline_before || !in_string;\n            ++S.line;\n            S.col = 0;\n            if (!in_string && ch == \"\\r\" && peek() == \"\\n\") {\n                // treat a \\r\\n sequence as a single \\n\n                ++S.pos;\n                ch = \"\\n\";\n            }\n        } else {\n            ++S.col;\n        }\n        return ch;\n    };\n\n    function forward(i) {\n        while (i-- > 0) next();\n    };\n\n    function looking_at(str) {\n        return S.text.substr(S.pos, str.length) == str;\n    };\n\n    function find_eol() {\n        var text = S.text;\n        for (var i = S.pos, n = S.text.length; i < n; ++i) {\n            var ch = text[i];\n            if (NEWLINE_CHARS(ch))\n                return i;\n        }\n        return -1;\n    };\n\n    function find(what, signal_eof) {\n        var pos = S.text.indexOf(what, S.pos);\n        if (signal_eof && pos == -1) throw EX_EOF;\n        return pos;\n    };\n\n    function start_token() {\n        S.tokline = S.line;\n        S.tokcol = S.col;\n        S.tokpos = S.pos;\n    };\n\n    var prev_was_dot = false;\n    function token(type, value, is_comment) {\n        S.regex_allowed = ((type == \"operator\" && !UNARY_POSTFIX(value)) ||\n                           (type == \"keyword\" && KEYWORDS_BEFORE_EXPRESSION(value)) ||\n                           (type == \"punc\" && PUNC_BEFORE_EXPRESSION(value)));\n        if (type == \"punc\" && value == \".\") {\n            prev_was_dot = true;\n        } else if (!is_comment) {\n            prev_was_dot = false;\n        }\n        var ret = {\n            type    : type,\n            value   : value,\n            line    : S.tokline,\n            col     : S.tokcol,\n            pos     : S.tokpos,\n            endline : S.line,\n            endcol  : S.col,\n            endpos  : S.pos,\n            nlb     : S.newline_before,\n            file    : filename\n        };\n        if (/^(?:num|string|regexp)$/i.test(type)) {\n            ret.raw = $TEXT.substring(ret.pos, ret.endpos);\n        }\n        if (!is_comment) {\n            ret.comments_before = S.comments_before;\n            S.comments_before = [];\n            // make note of any newlines in the comments that came before\n            for (var i = 0, len = ret.comments_before.length; i < len; i++) {\n                ret.nlb = ret.nlb || ret.comments_before[i].nlb;\n            }\n        }\n        S.newline_before = false;\n        return new AST_Token(ret);\n    };\n\n    function skip_whitespace() {\n        while (WHITESPACE_CHARS(peek()))\n            next();\n    };\n\n    function read_while(pred) {\n        var ret = \"\", ch, i = 0;\n        while ((ch = peek()) && pred(ch, i++))\n            ret += next();\n        return ret;\n    };\n\n    function parse_error(err) {\n        js_error(err, filename, S.tokline, S.tokcol, S.tokpos);\n    };\n\n    function read_num(prefix) {\n        var has_e = false, after_e = false, has_x = false, has_dot = prefix == \".\";\n        var num = read_while(function(ch, i){\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 120: case 88: // xX\n                return has_x ? false : (has_x = true);\n              case 101: case 69: // eE\n                return has_x ? true : has_e ? false : (has_e = after_e = true);\n              case 45: // -\n                return after_e || (i == 0 && !prefix);\n              case 43: // +\n                return after_e;\n              case (after_e = false, 46): // .\n                return (!has_dot && !has_x && !has_e) ? (has_dot = true) : false;\n            }\n            return is_alphanumeric_char(code);\n        });\n        if (prefix) num = prefix + num;\n        if (RE_OCT_NUMBER.test(num) && next_token.has_directive(\"use strict\")) {\n            parse_error(\"Legacy octal literals are not allowed in strict mode\");\n        }\n        var valid = parse_js_number(num);\n        if (!isNaN(valid)) {\n            return token(\"num\", valid);\n        } else {\n            parse_error(\"Invalid syntax: \" + num);\n        }\n    };\n\n    function read_escaped_char(in_string) {\n        var ch = next(true, in_string);\n        switch (ch.charCodeAt(0)) {\n          case 110 : return \"\\n\";\n          case 114 : return \"\\r\";\n          case 116 : return \"\\t\";\n          case 98  : return \"\\b\";\n          case 118 : return \"\\u000b\"; // \\v\n          case 102 : return \"\\f\";\n          case 120 : return String.fromCharCode(hex_bytes(2)); // \\x\n          case 117 : return String.fromCharCode(hex_bytes(4)); // \\u\n          case 10  : return \"\"; // newline\n          case 13  :            // \\r\n            if (peek() == \"\\n\") { // DOS newline\n                next(true, in_string);\n                return \"\";\n            }\n        }\n        if (ch >= \"0\" && ch <= \"7\")\n            return read_octal_escape_sequence(ch);\n        return ch;\n    };\n\n    function read_octal_escape_sequence(ch) {\n        // Read\n        var p = peek();\n        if (p >= \"0\" && p <= \"7\") {\n            ch += next(true);\n            if (ch[0] <= \"3\" && (p = peek()) >= \"0\" && p <= \"7\")\n                ch += next(true);\n        }\n\n        // Parse\n        if (ch === \"0\") return \"\\0\";\n        if (ch.length > 0 && next_token.has_directive(\"use strict\"))\n            parse_error(\"Legacy octal escape sequences are not allowed in strict mode\");\n        return String.fromCharCode(parseInt(ch, 8));\n    }\n\n    function hex_bytes(n) {\n        var num = 0;\n        for (; n > 0; --n) {\n            var digit = parseInt(next(true), 16);\n            if (isNaN(digit))\n                parse_error(\"Invalid hex-character pattern in string\");\n            num = (num << 4) | digit;\n        }\n        return num;\n    };\n\n    var read_string = with_eof_error(\"Unterminated string constant\", function(quote_char){\n        var quote = next(), ret = \"\";\n        for (;;) {\n            var ch = next(true, true);\n            if (ch == \"\\\\\") ch = read_escaped_char(true);\n            else if (NEWLINE_CHARS(ch)) parse_error(\"Unterminated string constant\");\n            else if (ch == quote) break;\n            ret += ch;\n        }\n        var tok = token(\"string\", ret);\n        tok.quote = quote_char;\n        return tok;\n    });\n\n    function skip_line_comment(type) {\n        var regex_allowed = S.regex_allowed;\n        var i = find_eol(), ret;\n        if (i == -1) {\n            ret = S.text.substr(S.pos);\n            S.pos = S.text.length;\n        } else {\n            ret = S.text.substring(S.pos, i);\n            S.pos = i;\n        }\n        S.col = S.tokcol + (S.pos - S.tokpos);\n        S.comments_before.push(token(type, ret, true));\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    };\n\n    var skip_multiline_comment = with_eof_error(\"Unterminated multiline comment\", function(){\n        var regex_allowed = S.regex_allowed;\n        var i = find(\"*/\", true);\n        var text = S.text.substring(S.pos, i).replace(/\\r\\n|\\r|\\u2028|\\u2029/g, '\\n');\n        // update stream position\n        forward(text.length /* doesn't count \\r\\n as 2 char while S.pos - i does */ + 2);\n        S.comments_before.push(token(\"comment2\", text, true));\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    });\n\n    function read_name() {\n        var backslash = false, name = \"\", ch, escaped = false, hex;\n        while ((ch = peek()) != null) {\n            if (!backslash) {\n                if (ch == \"\\\\\") escaped = backslash = true, next();\n                else if (is_identifier_char(ch)) name += next();\n                else break;\n            }\n            else {\n                if (ch != \"u\") parse_error(\"Expecting UnicodeEscapeSequence -- uXXXX\");\n                ch = read_escaped_char();\n                if (!is_identifier_char(ch)) parse_error(\"Unicode char: \" + ch.charCodeAt(0) + \" is not valid in identifier\");\n                name += ch;\n                backslash = false;\n            }\n        }\n        if (KEYWORDS(name) && escaped) {\n            hex = name.charCodeAt(0).toString(16).toUpperCase();\n            name = \"\\\\u\" + \"0000\".substr(hex.length) + hex + name.slice(1);\n        }\n        return name;\n    };\n\n    var read_regexp = with_eof_error(\"Unterminated regular expression\", function(source) {\n        var prev_backslash = false, ch, in_class = false;\n        while ((ch = next(true))) if (NEWLINE_CHARS(ch)) {\n            parse_error(\"Unexpected line terminator\");\n        } else if (prev_backslash) {\n            source += \"\\\\\" + ch;\n            prev_backslash = false;\n        } else if (ch == \"[\") {\n            in_class = true;\n            source += ch;\n        } else if (ch == \"]\" && in_class) {\n            in_class = false;\n            source += ch;\n        } else if (ch == \"/\" && !in_class) {\n            break;\n        } else if (ch == \"\\\\\") {\n            prev_backslash = true;\n        } else {\n            source += ch;\n        }\n        var mods = read_name();\n        try {\n            var regexp = new RegExp(source, mods);\n            regexp.raw_source = source;\n            return token(\"regexp\", regexp);\n        } catch(e) {\n            parse_error(e.message);\n        }\n    });\n\n    function read_operator(prefix) {\n        function grow(op) {\n            if (!peek()) return op;\n            var bigger = op + peek();\n            if (OPERATORS(bigger)) {\n                next();\n                return grow(bigger);\n            } else {\n                return op;\n            }\n        };\n        return token(\"operator\", grow(prefix || next()));\n    };\n\n    function handle_slash() {\n        next();\n        switch (peek()) {\n          case \"/\":\n            next();\n            return skip_line_comment(\"comment1\");\n          case \"*\":\n            next();\n            return skip_multiline_comment();\n        }\n        return S.regex_allowed ? read_regexp(\"\") : read_operator(\"/\");\n    };\n\n    function handle_dot() {\n        next();\n        return is_digit(peek().charCodeAt(0))\n            ? read_num(\".\")\n            : token(\"punc\", \".\");\n    };\n\n    function read_word() {\n        var word = read_name();\n        if (prev_was_dot) return token(\"name\", word);\n        return KEYWORDS_ATOM(word) ? token(\"atom\", word)\n            : !KEYWORDS(word) ? token(\"name\", word)\n            : OPERATORS(word) ? token(\"operator\", word)\n            : token(\"keyword\", word);\n    };\n\n    function with_eof_error(eof_error, cont) {\n        return function(x) {\n            try {\n                return cont(x);\n            } catch(ex) {\n                if (ex === EX_EOF) parse_error(eof_error);\n                else throw ex;\n            }\n        };\n    };\n\n    function next_token(force_regexp) {\n        if (force_regexp != null)\n            return read_regexp(force_regexp);\n        if (shebang && S.pos == 0 && looking_at(\"#!\")) {\n            start_token();\n            forward(2);\n            skip_line_comment(\"comment5\");\n        }\n        for (;;) {\n            skip_whitespace();\n            start_token();\n            if (html5_comments) {\n                if (looking_at(\"<!--\")) {\n                    forward(4);\n                    skip_line_comment(\"comment3\");\n                    continue;\n                }\n                if (looking_at(\"-->\") && S.newline_before) {\n                    forward(3);\n                    skip_line_comment(\"comment4\");\n                    continue;\n                }\n            }\n            var ch = peek();\n            if (!ch) return token(\"eof\");\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 34: case 39: return read_string(ch);\n              case 46: return handle_dot();\n              case 47: {\n                  var tok = handle_slash();\n                  if (tok === next_token) continue;\n                  return tok;\n              }\n            }\n            if (is_digit(code)) return read_num();\n            if (PUNC_CHARS(ch)) return token(\"punc\", next());\n            if (OPERATOR_CHARS(ch)) return read_operator();\n            if (code == 92 || is_identifier_start(code)) return read_word();\n            break;\n        }\n        parse_error(\"Unexpected character '\" + ch + \"'\");\n    };\n\n    next_token.context = function(nc) {\n        if (nc) S = nc;\n        return S;\n    };\n\n    next_token.add_directive = function(directive) {\n        S.directive_stack[S.directive_stack.length - 1].push(directive);\n\n        if (S.directives[directive] === undefined) {\n            S.directives[directive] = 1;\n        } else {\n            S.directives[directive]++;\n        }\n    }\n\n    next_token.push_directives_stack = function() {\n        S.directive_stack.push([]);\n    }\n\n    next_token.pop_directives_stack = function() {\n        var directives = S.directive_stack[S.directive_stack.length - 1];\n\n        for (var i = 0; i < directives.length; i++) {\n            S.directives[directives[i]]--;\n        }\n\n        S.directive_stack.pop();\n    }\n\n    next_token.has_directive = function(directive) {\n        return S.directives[directive] > 0;\n    }\n\n    return next_token;\n\n};\n\n/* -----[ Parser (constants) ]----- */\n\nvar UNARY_PREFIX = makePredicate([\n    \"typeof\",\n    \"void\",\n    \"delete\",\n    \"--\",\n    \"++\",\n    \"!\",\n    \"~\",\n    \"-\",\n    \"+\"\n]);\n\nvar UNARY_POSTFIX = makePredicate([ \"--\", \"++\" ]);\n\nvar ASSIGNMENT = makePredicate([ \"=\", \"+=\", \"-=\", \"/=\", \"*=\", \"%=\", \">>=\", \"<<=\", \">>>=\", \"|=\", \"^=\", \"&=\" ]);\n\nvar PRECEDENCE = (function(a, ret){\n    for (var i = 0; i < a.length; ++i) {\n        var b = a[i];\n        for (var j = 0; j < b.length; ++j) {\n            ret[b[j]] = i + 1;\n        }\n    }\n    return ret;\n})(\n    [\n        [\"||\"],\n        [\"&&\"],\n        [\"|\"],\n        [\"^\"],\n        [\"&\"],\n        [\"==\", \"===\", \"!=\", \"!==\"],\n        [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"],\n        [\">>\", \"<<\", \">>>\"],\n        [\"+\", \"-\"],\n        [\"*\", \"/\", \"%\"]\n    ],\n    {}\n);\n\nvar STATEMENTS_WITH_LABELS = array_to_hash([ \"for\", \"do\", \"while\", \"switch\" ]);\n\nvar ATOMIC_START_TOKEN = array_to_hash([ \"atom\", \"num\", \"string\", \"regexp\", \"name\" ]);\n\n/* -----[ Parser ]----- */\n\nfunction parse($TEXT, options) {\n\n    options = defaults(options, {\n        bare_returns   : false,\n        expression     : false,\n        filename       : null,\n        html5_comments : true,\n        shebang        : true,\n        strict         : false,\n        toplevel       : null,\n    }, true);\n\n    var S = {\n        input         : (typeof $TEXT == \"string\"\n                         ? tokenizer($TEXT, options.filename,\n                                     options.html5_comments, options.shebang)\n                         : $TEXT),\n        token         : null,\n        prev          : null,\n        peeked        : null,\n        in_function   : 0,\n        in_directives : true,\n        in_loop       : 0,\n        labels        : []\n    };\n\n    S.token = next();\n\n    function is(type, value) {\n        return is_token(S.token, type, value);\n    };\n\n    function peek() { return S.peeked || (S.peeked = S.input()); };\n\n    function next() {\n        S.prev = S.token;\n        if (S.peeked) {\n            S.token = S.peeked;\n            S.peeked = null;\n        } else {\n            S.token = S.input();\n        }\n        S.in_directives = S.in_directives && (\n            S.token.type == \"string\" || is(\"punc\", \";\")\n        );\n        return S.token;\n    };\n\n    function prev() {\n        return S.prev;\n    };\n\n    function croak(msg, line, col, pos) {\n        var ctx = S.input.context();\n        js_error(msg,\n                 ctx.filename,\n                 line != null ? line : ctx.tokline,\n                 col != null ? col : ctx.tokcol,\n                 pos != null ? pos : ctx.tokpos);\n    };\n\n    function token_error(token, msg) {\n        croak(msg, token.line, token.col);\n    };\n\n    function unexpected(token) {\n        if (token == null)\n            token = S.token;\n        token_error(token, \"Unexpected token: \" + token.type + \" (\" + token.value + \")\");\n    };\n\n    function expect_token(type, val) {\n        if (is(type, val)) {\n            return next();\n        }\n        token_error(S.token, \"Unexpected token \" + S.token.type + \" «\" + S.token.value + \"»\" + \", expected \" + type + \" «\" + val + \"»\");\n    };\n\n    function expect(punc) { return expect_token(\"punc\", punc); };\n\n    function can_insert_semicolon() {\n        return !options.strict && (\n            S.token.nlb || is(\"eof\") || is(\"punc\", \"}\")\n        );\n    };\n\n    function semicolon(optional) {\n        if (is(\"punc\", \";\")) next();\n        else if (!optional && !can_insert_semicolon()) unexpected();\n    };\n\n    function parenthesised() {\n        expect(\"(\");\n        var exp = expression(true);\n        expect(\")\");\n        return exp;\n    };\n\n    function embed_tokens(parser) {\n        return function() {\n            var start = S.token;\n            var expr = parser();\n            var end = prev();\n            expr.start = start;\n            expr.end = end;\n            return expr;\n        };\n    };\n\n    function handle_regexp() {\n        if (is(\"operator\", \"/\") || is(\"operator\", \"/=\")) {\n            S.peeked = null;\n            S.token = S.input(S.token.value.substr(1)); // force regexp\n        }\n    };\n\n    var statement = embed_tokens(function() {\n        handle_regexp();\n        switch (S.token.type) {\n          case \"string\":\n            if (S.in_directives) {\n                var token = peek();\n                if (S.token.raw.indexOf(\"\\\\\") == -1\n                    && (token.nlb\n                        || is_token(token, \"eof\")\n                        || is_token(token, \"punc\", \";\")\n                        || is_token(token, \"punc\", \"}\"))) {\n                    S.input.add_directive(S.token.value);\n                } else {\n                    S.in_directives = false;\n                }\n            }\n            var dir = S.in_directives, stat = simple_statement();\n            return dir ? new AST_Directive(stat.body) : stat;\n          case \"num\":\n          case \"regexp\":\n          case \"operator\":\n          case \"atom\":\n            return simple_statement();\n\n          case \"name\":\n            return is_token(peek(), \"punc\", \":\")\n                ? labeled_statement()\n                : simple_statement();\n\n          case \"punc\":\n            switch (S.token.value) {\n              case \"{\":\n                return new AST_BlockStatement({\n                    start : S.token,\n                    body  : block_(),\n                    end   : prev()\n                });\n              case \"[\":\n              case \"(\":\n                return simple_statement();\n              case \";\":\n                S.in_directives = false;\n                next();\n                return new AST_EmptyStatement();\n              default:\n                unexpected();\n            }\n\n          case \"keyword\":\n            switch (S.token.value) {\n              case \"break\":\n                next();\n                return break_cont(AST_Break);\n\n              case \"continue\":\n                next();\n                return break_cont(AST_Continue);\n\n              case \"debugger\":\n                next();\n                semicolon();\n                return new AST_Debugger();\n\n              case \"do\":\n                next();\n                var body = in_loop(statement);\n                expect_token(\"keyword\", \"while\");\n                var condition = parenthesised();\n                semicolon(true);\n                return new AST_Do({\n                    body      : body,\n                    condition : condition\n                });\n\n              case \"while\":\n                next();\n                return new AST_While({\n                    condition : parenthesised(),\n                    body      : in_loop(statement)\n                });\n\n              case \"for\":\n                next();\n                return for_();\n\n              case \"function\":\n                next();\n                return function_(AST_Defun);\n\n              case \"if\":\n                next();\n                return if_();\n\n              case \"return\":\n                if (S.in_function == 0 && !options.bare_returns)\n                    croak(\"'return' outside of function\");\n                next();\n                var value = null;\n                if (is(\"punc\", \";\")) {\n                    next();\n                } else if (!can_insert_semicolon()) {\n                    value = expression(true);\n                    semicolon();\n                }\n                return new AST_Return({\n                    value: value\n                });\n\n              case \"switch\":\n                next();\n                return new AST_Switch({\n                    expression : parenthesised(),\n                    body       : in_loop(switch_body_)\n                });\n\n              case \"throw\":\n                next();\n                if (S.token.nlb)\n                    croak(\"Illegal newline after 'throw'\");\n                var value = expression(true);\n                semicolon();\n                return new AST_Throw({\n                    value: value\n                });\n\n              case \"try\":\n                next();\n                return try_();\n\n              case \"var\":\n                next();\n                var node = var_();\n                semicolon();\n                return node;\n\n              case \"with\":\n                if (S.input.has_directive(\"use strict\")) {\n                    croak(\"Strict mode may not include a with statement\");\n                }\n                next();\n                return new AST_With({\n                    expression : parenthesised(),\n                    body       : statement()\n                });\n            }\n        }\n        unexpected();\n    });\n\n    function labeled_statement() {\n        var label = as_symbol(AST_Label);\n        if (find_if(function(l){ return l.name == label.name }, S.labels)) {\n            // ECMA-262, 12.12: An ECMAScript program is considered\n            // syntactically incorrect if it contains a\n            // LabelledStatement that is enclosed by a\n            // LabelledStatement with the same Identifier as label.\n            croak(\"Label \" + label.name + \" defined twice\");\n        }\n        expect(\":\");\n        S.labels.push(label);\n        var stat = statement();\n        S.labels.pop();\n        if (!(stat instanceof AST_IterationStatement)) {\n            // check for `continue` that refers to this label.\n            // those should be reported as syntax errors.\n            // https://github.com/mishoo/UglifyJS2/issues/287\n            label.references.forEach(function(ref){\n                if (ref instanceof AST_Continue) {\n                    ref = ref.label.start;\n                    croak(\"Continue label `\" + label.name + \"` refers to non-IterationStatement.\",\n                          ref.line, ref.col, ref.pos);\n                }\n            });\n        }\n        return new AST_LabeledStatement({ body: stat, label: label });\n    };\n\n    function simple_statement(tmp) {\n        return new AST_SimpleStatement({ body: (tmp = expression(true), semicolon(), tmp) });\n    };\n\n    function break_cont(type) {\n        var label = null, ldef;\n        if (!can_insert_semicolon()) {\n            label = as_symbol(AST_LabelRef, true);\n        }\n        if (label != null) {\n            ldef = find_if(function(l){ return l.name == label.name }, S.labels);\n            if (!ldef)\n                croak(\"Undefined label \" + label.name);\n            label.thedef = ldef;\n        }\n        else if (S.in_loop == 0)\n            croak(type.TYPE + \" not inside a loop or switch\");\n        semicolon();\n        var stat = new type({ label: label });\n        if (ldef) ldef.references.push(stat);\n        return stat;\n    };\n\n    function for_() {\n        expect(\"(\");\n        var init = null;\n        if (!is(\"punc\", \";\")) {\n            init = is(\"keyword\", \"var\")\n                ? (next(), var_(true))\n                : expression(true, true);\n            if (is(\"operator\", \"in\")) {\n                if (init instanceof AST_Var && init.definitions.length > 1)\n                    croak(\"Only one variable declaration allowed in for..in loop\");\n                next();\n                return for_in(init);\n            }\n        }\n        return regular_for(init);\n    };\n\n    function regular_for(init) {\n        expect(\";\");\n        var test = is(\"punc\", \";\") ? null : expression(true);\n        expect(\";\");\n        var step = is(\"punc\", \")\") ? null : expression(true);\n        expect(\")\");\n        return new AST_For({\n            init      : init,\n            condition : test,\n            step      : step,\n            body      : in_loop(statement)\n        });\n    };\n\n    function for_in(init) {\n        var lhs = init instanceof AST_Var ? init.definitions[0].name : null;\n        var obj = expression(true);\n        expect(\")\");\n        return new AST_ForIn({\n            init   : init,\n            name   : lhs,\n            object : obj,\n            body   : in_loop(statement)\n        });\n    };\n\n    var function_ = function(ctor) {\n        var in_statement = ctor === AST_Defun;\n        var name = is(\"name\") ? as_symbol(in_statement ? AST_SymbolDefun : AST_SymbolLambda) : null;\n        if (in_statement && !name)\n            unexpected();\n        expect(\"(\");\n        var argnames = [];\n        for (var first = true; !is(\"punc\", \")\");) {\n            if (first) first = false; else expect(\",\");\n            argnames.push(as_symbol(AST_SymbolFunarg));\n        }\n        next();\n        var loop = S.in_loop;\n        var labels = S.labels;\n        ++S.in_function;\n        S.in_directives = true;\n        S.input.push_directives_stack();\n        S.in_loop = 0;\n        S.labels = [];\n        var body = block_();\n        if (S.input.has_directive(\"use strict\")) {\n            if (name) strict_verify_symbol(name);\n            argnames.forEach(strict_verify_symbol);\n        }\n        S.input.pop_directives_stack();\n        --S.in_function;\n        S.in_loop = loop;\n        S.labels = labels;\n        return new ctor({\n            name: name,\n            argnames: argnames,\n            body: body\n        });\n    };\n\n    function if_() {\n        var cond = parenthesised(), body = statement(), belse = null;\n        if (is(\"keyword\", \"else\")) {\n            next();\n            belse = statement();\n        }\n        return new AST_If({\n            condition   : cond,\n            body        : body,\n            alternative : belse\n        });\n    };\n\n    function block_() {\n        expect(\"{\");\n        var a = [];\n        while (!is(\"punc\", \"}\")) {\n            if (is(\"eof\")) unexpected();\n            a.push(statement());\n        }\n        next();\n        return a;\n    };\n\n    function switch_body_() {\n        expect(\"{\");\n        var a = [], cur = null, branch = null, tmp;\n        while (!is(\"punc\", \"}\")) {\n            if (is(\"eof\")) unexpected();\n            if (is(\"keyword\", \"case\")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Case({\n                    start      : (tmp = S.token, next(), tmp),\n                    expression : expression(true),\n                    body       : cur\n                });\n                a.push(branch);\n                expect(\":\");\n            }\n            else if (is(\"keyword\", \"default\")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Default({\n                    start : (tmp = S.token, next(), expect(\":\"), tmp),\n                    body  : cur\n                });\n                a.push(branch);\n            }\n            else {\n                if (!cur) unexpected();\n                cur.push(statement());\n            }\n        }\n        if (branch) branch.end = prev();\n        next();\n        return a;\n    };\n\n    function try_() {\n        var body = block_(), bcatch = null, bfinally = null;\n        if (is(\"keyword\", \"catch\")) {\n            var start = S.token;\n            next();\n            expect(\"(\");\n            var name = as_symbol(AST_SymbolCatch);\n            expect(\")\");\n            bcatch = new AST_Catch({\n                start   : start,\n                argname : name,\n                body    : block_(),\n                end     : prev()\n            });\n        }\n        if (is(\"keyword\", \"finally\")) {\n            var start = S.token;\n            next();\n            bfinally = new AST_Finally({\n                start : start,\n                body  : block_(),\n                end   : prev()\n            });\n        }\n        if (!bcatch && !bfinally)\n            croak(\"Missing catch/finally blocks\");\n        return new AST_Try({\n            body     : body,\n            bcatch   : bcatch,\n            bfinally : bfinally\n        });\n    };\n\n    function vardefs(no_in) {\n        var a = [];\n        for (;;) {\n            a.push(new AST_VarDef({\n                start : S.token,\n                name  : as_symbol(AST_SymbolVar),\n                value : is(\"operator\", \"=\") ? (next(), expression(false, no_in)) : null,\n                end   : prev()\n            }));\n            if (!is(\"punc\", \",\"))\n                break;\n            next();\n        }\n        return a;\n    };\n\n    var var_ = function(no_in) {\n        return new AST_Var({\n            start       : prev(),\n            definitions : vardefs(no_in),\n            end         : prev()\n        });\n    };\n\n    var new_ = function(allow_calls) {\n        var start = S.token;\n        expect_token(\"operator\", \"new\");\n        var newexp = expr_atom(false), args;\n        if (is(\"punc\", \"(\")) {\n            next();\n            args = expr_list(\")\");\n        } else {\n            args = [];\n        }\n        return subscripts(new AST_New({\n            start      : start,\n            expression : newexp,\n            args       : args,\n            end        : prev()\n        }), allow_calls);\n    };\n\n    function as_atom_node() {\n        var tok = S.token, ret;\n        switch (tok.type) {\n          case \"name\":\n          case \"keyword\":\n            ret = _make_symbol(AST_SymbolRef);\n            break;\n          case \"num\":\n            ret = new AST_Number({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"string\":\n            ret = new AST_String({\n                start : tok,\n                end   : tok,\n                value : tok.value,\n                quote : tok.quote\n            });\n            break;\n          case \"regexp\":\n            ret = new AST_RegExp({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"atom\":\n            switch (tok.value) {\n              case \"false\":\n                ret = new AST_False({ start: tok, end: tok });\n                break;\n              case \"true\":\n                ret = new AST_True({ start: tok, end: tok });\n                break;\n              case \"null\":\n                ret = new AST_Null({ start: tok, end: tok });\n                break;\n            }\n            break;\n          case \"operator\":\n            if (!is_identifier_string(tok.value)) {\n                croak(\"Invalid getter/setter name: \" + tok.value,\n                    tok.line, tok.col, tok.pos);\n            }\n            ret = _make_symbol(AST_SymbolRef);\n            break;\n        }\n        next();\n        return ret;\n    };\n\n    var expr_atom = function(allow_calls) {\n        if (is(\"operator\", \"new\")) {\n            return new_(allow_calls);\n        }\n        var start = S.token;\n        if (is(\"punc\")) {\n            switch (start.value) {\n              case \"(\":\n                next();\n                var ex = expression(true);\n                ex.start = start;\n                ex.end = S.token;\n                expect(\")\");\n                return subscripts(ex, allow_calls);\n              case \"[\":\n                return subscripts(array_(), allow_calls);\n              case \"{\":\n                return subscripts(object_(), allow_calls);\n            }\n            unexpected();\n        }\n        if (is(\"keyword\", \"function\")) {\n            next();\n            var func = function_(AST_Function);\n            func.start = start;\n            func.end = prev();\n            return subscripts(func, allow_calls);\n        }\n        if (ATOMIC_START_TOKEN[S.token.type]) {\n            return subscripts(as_atom_node(), allow_calls);\n        }\n        unexpected();\n    };\n\n    function expr_list(closing, allow_trailing_comma, allow_empty) {\n        var first = true, a = [];\n        while (!is(\"punc\", closing)) {\n            if (first) first = false; else expect(\",\");\n            if (allow_trailing_comma && is(\"punc\", closing)) break;\n            if (is(\"punc\", \",\") && allow_empty) {\n                a.push(new AST_Hole({ start: S.token, end: S.token }));\n            } else {\n                a.push(expression(false));\n            }\n        }\n        next();\n        return a;\n    };\n\n    var array_ = embed_tokens(function() {\n        expect(\"[\");\n        return new AST_Array({\n            elements: expr_list(\"]\", !options.strict, true)\n        });\n    });\n\n    var create_accessor = embed_tokens(function() {\n        return function_(AST_Accessor);\n    });\n\n    var object_ = embed_tokens(function() {\n        expect(\"{\");\n        var first = true, a = [];\n        while (!is(\"punc\", \"}\")) {\n            if (first) first = false; else expect(\",\");\n            if (!options.strict && is(\"punc\", \"}\"))\n                // allow trailing comma\n                break;\n            var start = S.token;\n            var type = start.type;\n            var name = as_property_name();\n            if (type == \"name\" && !is(\"punc\", \":\")) {\n                var key = new AST_SymbolAccessor({\n                    start: S.token,\n                    name: as_property_name(),\n                    end: prev()\n                });\n                if (name == \"get\") {\n                    a.push(new AST_ObjectGetter({\n                        start : start,\n                        key   : key,\n                        value : create_accessor(),\n                        end   : prev()\n                    }));\n                    continue;\n                }\n                if (name == \"set\") {\n                    a.push(new AST_ObjectSetter({\n                        start : start,\n                        key   : key,\n                        value : create_accessor(),\n                        end   : prev()\n                    }));\n                    continue;\n                }\n            }\n            expect(\":\");\n            a.push(new AST_ObjectKeyVal({\n                start : start,\n                quote : start.quote,\n                key   : name,\n                value : expression(false),\n                end   : prev()\n            }));\n        }\n        next();\n        return new AST_Object({ properties: a });\n    });\n\n    function as_property_name() {\n        var tmp = S.token;\n        switch (tmp.type) {\n          case \"operator\":\n            if (!KEYWORDS(tmp.value)) unexpected();\n          case \"num\":\n          case \"string\":\n          case \"name\":\n          case \"keyword\":\n          case \"atom\":\n            next();\n            return tmp.value;\n          default:\n            unexpected();\n        }\n    };\n\n    function as_name() {\n        var tmp = S.token;\n        if (tmp.type != \"name\") unexpected();\n        next();\n        return tmp.value;\n    };\n\n    function _make_symbol(type) {\n        var name = S.token.value;\n        return new (name == \"this\" ? AST_This : type)({\n            name  : String(name),\n            start : S.token,\n            end   : S.token\n        });\n    };\n\n    function strict_verify_symbol(sym) {\n        if (sym.name == \"arguments\" || sym.name == \"eval\")\n            croak(\"Unexpected \" + sym.name + \" in strict mode\", sym.start.line, sym.start.col, sym.start.pos);\n    }\n\n    function as_symbol(type, noerror) {\n        if (!is(\"name\")) {\n            if (!noerror) croak(\"Name expected\");\n            return null;\n        }\n        var sym = _make_symbol(type);\n        if (S.input.has_directive(\"use strict\") && sym instanceof AST_SymbolDeclaration) {\n            strict_verify_symbol(sym);\n        }\n        next();\n        return sym;\n    };\n\n    var subscripts = function(expr, allow_calls) {\n        var start = expr.start;\n        if (is(\"punc\", \".\")) {\n            next();\n            return subscripts(new AST_Dot({\n                start      : start,\n                expression : expr,\n                property   : as_name(),\n                end        : prev()\n            }), allow_calls);\n        }\n        if (is(\"punc\", \"[\")) {\n            next();\n            var prop = expression(true);\n            expect(\"]\");\n            return subscripts(new AST_Sub({\n                start      : start,\n                expression : expr,\n                property   : prop,\n                end        : prev()\n            }), allow_calls);\n        }\n        if (allow_calls && is(\"punc\", \"(\")) {\n            next();\n            return subscripts(new AST_Call({\n                start      : start,\n                expression : expr,\n                args       : expr_list(\")\"),\n                end        : prev()\n            }), true);\n        }\n        return expr;\n    };\n\n    var maybe_unary = function(allow_calls) {\n        var start = S.token;\n        if (is(\"operator\") && UNARY_PREFIX(start.value)) {\n            next();\n            handle_regexp();\n            var ex = make_unary(AST_UnaryPrefix, start, maybe_unary(allow_calls));\n            ex.start = start;\n            ex.end = prev();\n            return ex;\n        }\n        var val = expr_atom(allow_calls);\n        while (is(\"operator\") && UNARY_POSTFIX(S.token.value) && !S.token.nlb) {\n            val = make_unary(AST_UnaryPostfix, S.token, val);\n            val.start = start;\n            val.end = S.token;\n            next();\n        }\n        return val;\n    };\n\n    function make_unary(ctor, token, expr) {\n        var op = token.value;\n        switch (op) {\n          case \"++\":\n          case \"--\":\n            if (!is_assignable(expr))\n                croak(\"Invalid use of \" + op + \" operator\", token.line, token.col, token.pos);\n            break;\n          case \"delete\":\n            if (expr instanceof AST_SymbolRef && S.input.has_directive(\"use strict\"))\n                croak(\"Calling delete on expression not allowed in strict mode\", expr.start.line, expr.start.col, expr.start.pos);\n            break;\n        }\n        return new ctor({ operator: op, expression: expr });\n    };\n\n    var expr_op = function(left, min_prec, no_in) {\n        var op = is(\"operator\") ? S.token.value : null;\n        if (op == \"in\" && no_in) op = null;\n        var prec = op != null ? PRECEDENCE[op] : null;\n        if (prec != null && prec > min_prec) {\n            next();\n            var right = expr_op(maybe_unary(true), prec, no_in);\n            return expr_op(new AST_Binary({\n                start    : left.start,\n                left     : left,\n                operator : op,\n                right    : right,\n                end      : right.end\n            }), min_prec, no_in);\n        }\n        return left;\n    };\n\n    function expr_ops(no_in) {\n        return expr_op(maybe_unary(true), 0, no_in);\n    };\n\n    var maybe_conditional = function(no_in) {\n        var start = S.token;\n        var expr = expr_ops(no_in);\n        if (is(\"operator\", \"?\")) {\n            next();\n            var yes = expression(false);\n            expect(\":\");\n            return new AST_Conditional({\n                start       : start,\n                condition   : expr,\n                consequent  : yes,\n                alternative : expression(false, no_in),\n                end         : prev()\n            });\n        }\n        return expr;\n    };\n\n    function is_assignable(expr) {\n        return expr instanceof AST_PropAccess || expr instanceof AST_SymbolRef;\n    };\n\n    var maybe_assign = function(no_in) {\n        var start = S.token;\n        var left = maybe_conditional(no_in), val = S.token.value;\n        if (is(\"operator\") && ASSIGNMENT(val)) {\n            if (is_assignable(left)) {\n                next();\n                return new AST_Assign({\n                    start    : start,\n                    left     : left,\n                    operator : val,\n                    right    : maybe_assign(no_in),\n                    end      : prev()\n                });\n            }\n            croak(\"Invalid assignment\");\n        }\n        return left;\n    };\n\n    var expression = function(commas, no_in) {\n        var start = S.token;\n        var exprs = [];\n        while (true) {\n            exprs.push(maybe_assign(no_in));\n            if (!commas || !is(\"punc\", \",\")) break;\n            next();\n            commas = true;\n        }\n        return exprs.length == 1 ? exprs[0] : new AST_Sequence({\n            start       : start,\n            expressions : exprs,\n            end         : peek()\n        });\n    };\n\n    function in_loop(cont) {\n        ++S.in_loop;\n        var ret = cont();\n        --S.in_loop;\n        return ret;\n    };\n\n    if (options.expression) {\n        return expression(true);\n    }\n\n    return (function(){\n        var start = S.token;\n        var body = [];\n        S.input.push_directives_stack();\n        while (!is(\"eof\"))\n            body.push(statement());\n        S.input.pop_directives_stack();\n        var end = prev();\n        var toplevel = options.toplevel;\n        if (toplevel) {\n            toplevel.body = toplevel.body.concat(body);\n            toplevel.end = end;\n        } else {\n            toplevel = new AST_Toplevel({ start: start, body: body, end: end });\n        }\n        return toplevel;\n    })();\n\n};\n"]}