{"version":3,"sources":["../../../../../qreact-app/node_modules/uglify-js/lib/compress.js"],"names":["Compressor","options","false_by_default","TreeTransformer","call","before","after","defaults","booleans","cascade","collapse_vars","comparisons","conditionals","dead_code","drop_console","drop_debugger","evaluate","expression","global_defs","hoist_funs","hoist_vars","ie8","if_return","join_vars","keep_fargs","keep_fnames","keep_infinity","loops","negate_iife","passes","properties","pure_getters","pure_funcs","reduce_vars","sequences","side_effects","switches","top_retain","toplevel","unsafe","unsafe_comps","unsafe_Func","unsafe_math","unsafe_proto","unsafe_regexp","unused","warnings","key","test","HOP","ast","parse","body","length","AST_SimpleStatement","slice","Error","string_template","value","node","indexOf","print_to_string","return_true","RegExp","def","name","split","funcs","vars","return_false","sequences_limit","warnings_produced","prototype","merge","option","i","len","orig","AST_SymbolDefun","compress","process_expression","pass","reset_opt_flags","transform","info","AST_Node","warn","apply","arguments","text","props","message","clear_warnings","descend","in_list","_squeezed","was_scope","AST_Scope","hoist_declarations","opt","optimize","drop_unused","OPT","optimizer","DEFMETHOD","compressor","self","_optimized","has_directive","TYPE","insert","tt","make_node","AST_Return","drop_side_effect_free","AST_EmptyStatement","AST_UnaryPrefix","operator","AST_Number","AST_Lambda","AST_Block","index","AST_If","alternative","AST_With","rescan","safe_ids","Object","create","suppressor","TreeWalker","AST_Symbol","d","definition","AST_SymbolRef","references","push","fixed","tw","AST_Toplevel","globals","each","reset_def","variables","undefined","safe_to_read","is_modified","is_immutable","fixed_value","parent","AST_Assign","right","AST_Call","scope","AST_VarDef","escaped","AST_SymbolCatch","safe_to_assign","mark","left","walk","AST_Defun","global","save_ids","AST_Function","iife","argnames","forEach","arg","uses_arguments","args","AST_Undefined","pop","AST_Accessor","AST_Binary","AST_Conditional","condition","consequent","AST_DWLoop","AST_LabeledStatement","AST_For","init","step","AST_ForIn","object","AST_Try","walk_body","bcatch","bfinally","AST_SwitchBranch","safe","id","AST_SymbolFunarg","some","sym","AST_SymbolLambda","getPrototypeOf","uses_eval","should_replace","is_constant","level","immutable","is_lhs","AST_PropAccess","is_lhs_read_only","lhs","find_variable","AST_Catch","argname","ctor","start","end","make_sequence","expressions","AST_Sequence","make_node_from_constant","val","AST_String","isNaN","AST_NaN","isFinite","AST_Infinity","AST_True","AST_False","AST_Null","AST_RegExp","type","maintain_this_binding","merge_sequence","array","as_statement_array","thing","AST_BlockStatement","AST_Statement","is_empty","loop_body","x","AST_Switch","is_iife_call","AST_New","tighten_body","statements","CHANGED","max_iter","eliminate_spurious_blocks","eliminate_dead_code","handle_if_return","sequencesize","join_consecutive_vars","collapse","find_parent","uses_with","candidates","stat_index","extract_candidates","candidate","get_lhs","lvalues","get_lvalues","value_has_side_effects","hit","abort","replaced","equivalent_to","AST_Debugger","AST_IterationStatement","undeclared","AST_SymbolDeclaration","file","line","col","AST_UnaryPostfix","AST_Exit","references_in_scope","lhs_or_def","get_symbol","AST_Case","AST_Default","remove_candidate","splice","expr","has_side_effects","AST_Unary","AST_Definitions","definitions","var_def","save_scope","found","remove","MAP","skip","every","ref","seen_dirs","reduce","a","stat","AST_Directive","multiple_if_returns","has_multiple_if_returns","in_lambda","ret","loop","ab","aborts","can_merge_flow","label","thedef","funs","extract_functions_from_statement_array","as_statement_array_with_return","clone","negate","concat","cond","unshift","n","is_return_void","lct","AST_LoopControl","loopcontrol_target","AST_Continue","AST_Break","has_quit","extract_declarations_from_unreachable_code","seq","push_seq","sequencesize_2","cons_seq","prev","ex","AST_Var","target","remove_initializers","is_undefined","_throw_on_access","is_strict","AST_Constant","AST_Array","AST_Object","func","unary_bool","binary_bool","member","is_boolean","unary","makePredicate","binary","is_number","is_string","unary_side_effects","_find_defs","to_node","CTOR","Array","isArray","elements","map","AST_ObjectKeyVal","noop","AST_Dot","suffix","property","defines","top","def_global","best_of_expression","ast1","ast2","best_of_statement","best_of","first_in_statement","_eval","unaryPrefix","result","ev","getValue","element","prop","e","c","_evaluating","object_fns","native_fns","Boolean","Number","String","exp","constructor","basic_negation","best","alt","negated","op","pure","comments","last_comment","comments_before","AST_This","has_pure_annotation","any","list","AST_ObjectProperty","may_throw_on_access","AST_Sub","all","is_constant_expression","return_null","AST_Jump","return_this","block_aborts","drop_funcs","drop_vars","assign_as_unused","in_use","in_use_ids","var_defs_by_id","Dictionary","initializations","node_def","add","AST_SymbolVar","decl","get","trim","__unused","unreferenced","template","head","tail","var_defs","block","dirs","hoisted","vars_found","var_decl","set","to_assignments","p","defs","find_if","del","assign","has","tmp","nodes","changed","replace","values","last","AST_While","AST_Do","has_loop_control","if_break_in_loop","drop_it","rest","first","self_condition_length","negated_length","negated_is_best","branch","default_branch","exact_match","eliminate_branch","default_index","has_break","assignments","pos","EXIT","separator","consts","el","join","shift","code","mangle","figure_out_scope","comp","mangle_names","fun","OutputStream","_codegen","toString","JS_Parse_Error","filter_for_side_effects","trim_right_for_undefined","trim_left_for_assignment","j","cdr","field","car","lift_sequences","in_boolean_context","commutativeOperators","reversible","reverse","PRECEDENCE","substr","ll","rr","associative","reversed","resolve_defines","value_length","fn","has_symbol_ref","Math","min","name_length","overhead","is_atomic","undef","ASSIGN_OPS","ASSIGN_OPS_COMMUTATIVE","is_true","is_false","booleanize","AST_Boolean","RESERVED_WORDS","is_identifier_string","v","parseFloat","literals_in_boolean_context"],"mappings":"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","file":"compress.js","sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nfunction Compressor(options, false_by_default) {\n    if (!(this instanceof Compressor))\n        return new Compressor(options, false_by_default);\n    TreeTransformer.call(this, this.before, this.after);\n    this.options = defaults(options, {\n        booleans      : !false_by_default,\n        cascade       : !false_by_default,\n        collapse_vars : !false_by_default,\n        comparisons   : !false_by_default,\n        conditionals  : !false_by_default,\n        dead_code     : !false_by_default,\n        drop_console  : false,\n        drop_debugger : !false_by_default,\n        evaluate      : !false_by_default,\n        expression    : false,\n        global_defs   : {},\n        hoist_funs    : !false_by_default,\n        hoist_vars    : false,\n        ie8           : false,\n        if_return     : !false_by_default,\n        join_vars     : !false_by_default,\n        keep_fargs    : true,\n        keep_fnames   : false,\n        keep_infinity : false,\n        loops         : !false_by_default,\n        negate_iife   : !false_by_default,\n        passes        : 1,\n        properties    : !false_by_default,\n        pure_getters  : !false_by_default && \"strict\",\n        pure_funcs    : null,\n        reduce_vars   : !false_by_default,\n        sequences     : !false_by_default,\n        side_effects  : !false_by_default,\n        switches      : !false_by_default,\n        top_retain    : null,\n        toplevel      : !!(options && options[\"top_retain\"]),\n        unsafe        : false,\n        unsafe_comps  : false,\n        unsafe_Func   : false,\n        unsafe_math   : false,\n        unsafe_proto  : false,\n        unsafe_regexp : false,\n        unused        : !false_by_default,\n        warnings      : false,\n    }, true);\n    var global_defs = this.options[\"global_defs\"];\n    if (typeof global_defs == \"object\") for (var key in global_defs) {\n        if (/^@/.test(key) && HOP(global_defs, key)) {\n            var ast = parse(global_defs[key]);\n            if (ast.body.length == 1 && ast.body[0] instanceof AST_SimpleStatement) {\n                global_defs[key.slice(1)] = ast.body[0].body;\n            } else throw new Error(string_template(\"Can't handle expression: {value}\", {\n                value: global_defs[key]\n            }));\n        }\n    }\n    var pure_funcs = this.options[\"pure_funcs\"];\n    if (typeof pure_funcs == \"function\") {\n        this.pure_funcs = pure_funcs;\n    } else {\n        this.pure_funcs = pure_funcs ? function(node) {\n            return pure_funcs.indexOf(node.expression.print_to_string()) < 0;\n        } : return_true;\n    }\n    var top_retain = this.options[\"top_retain\"];\n    if (top_retain instanceof RegExp) {\n        this.top_retain = function(def) {\n            return top_retain.test(def.name);\n        };\n    } else if (typeof top_retain == \"function\") {\n        this.top_retain = top_retain;\n    } else if (top_retain) {\n        if (typeof top_retain == \"string\") {\n            top_retain = top_retain.split(/,/);\n        }\n        this.top_retain = function(def) {\n            return top_retain.indexOf(def.name) >= 0;\n        };\n    }\n    var toplevel = this.options[\"toplevel\"];\n    if (typeof toplevel == \"string\") {\n        this.toplevel.funcs = /funcs/.test(toplevel);\n        this.toplevel.vars = /vars/.test(toplevel);\n    } else {\n        this.toplevel = toplevel ? return_true : return_false;\n        this.toplevel.funcs = this.toplevel.vars = toplevel;\n    }\n    var sequences = this.options[\"sequences\"];\n    this.sequences_limit = sequences == 1 ? 800 : sequences | 0;\n    this.warnings_produced = {};\n};\n\nCompressor.prototype = new TreeTransformer;\nmerge(Compressor.prototype, {\n    option: function(key) { return this.options[key] },\n    toplevel: function(def) {\n        for (var i = 0, len = def.orig.length; i < len; i++)\n            if (!this.toplevel[def.orig[i] instanceof AST_SymbolDefun ? \"funcs\" : \"vars\"])\n                return false;\n        return true;\n    },\n    compress: function(node) {\n        if (this.option(\"expression\")) {\n            node.process_expression(true);\n        }\n        var passes = +this.options.passes || 1;\n        for (var pass = 0; pass < passes && pass < 3; ++pass) {\n            if (pass > 0 || this.option(\"reduce_vars\"))\n                node.reset_opt_flags(this, true);\n            node = node.transform(this);\n        }\n        if (this.option(\"expression\")) {\n            node.process_expression(false);\n        }\n        return node;\n    },\n    info: function() {\n        if (this.options.warnings == \"verbose\") {\n            AST_Node.warn.apply(AST_Node, arguments);\n        }\n    },\n    warn: function(text, props) {\n        if (this.options.warnings) {\n            // only emit unique warnings\n            var message = string_template(text, props);\n            if (!(message in this.warnings_produced)) {\n                this.warnings_produced[message] = true;\n                AST_Node.warn.apply(AST_Node, arguments);\n            }\n        }\n    },\n    clear_warnings: function() {\n        this.warnings_produced = {};\n    },\n    before: function(node, descend, in_list) {\n        if (node._squeezed) return node;\n        var was_scope = false;\n        if (node instanceof AST_Scope) {\n            node = node.hoist_declarations(this);\n            was_scope = true;\n        }\n        // Before https://github.com/mishoo/UglifyJS2/pull/1602 AST_Node.optimize()\n        // would call AST_Node.transform() if a different instance of AST_Node is\n        // produced after OPT().\n        // This corrupts TreeWalker.stack, which cause AST look-ups to malfunction.\n        // Migrate and defer all children's AST_Node.transform() to below, which\n        // will now happen after this parent AST_Node has been properly substituted\n        // thus gives a consistent AST snapshot.\n        descend(node, this);\n        // Existing code relies on how AST_Node.optimize() worked, and omitting the\n        // following replacement call would result in degraded efficiency of both\n        // output and performance.\n        descend(node, this);\n        var opt = node.optimize(this);\n        if (was_scope && opt instanceof AST_Scope) {\n            opt.drop_unused(this);\n            descend(opt, this);\n        }\n        if (opt === node) opt._squeezed = true;\n        return opt;\n    }\n});\n\n(function(){\n\n    function OPT(node, optimizer) {\n        node.DEFMETHOD(\"optimize\", function(compressor){\n            var self = this;\n            if (self._optimized) return self;\n            if (compressor.has_directive(\"use asm\")) return self;\n            var opt = optimizer(self, compressor);\n            opt._optimized = true;\n            return opt;\n        });\n    };\n\n    OPT(AST_Node, function(self, compressor){\n        return self;\n    });\n\n    AST_Node.DEFMETHOD(\"equivalent_to\", function(node){\n        return this.TYPE == node.TYPE && this.print_to_string() == node.print_to_string();\n    });\n\n    AST_Scope.DEFMETHOD(\"process_expression\", function(insert, compressor) {\n        var self = this;\n        var tt = new TreeTransformer(function(node) {\n            if (insert && node instanceof AST_SimpleStatement) {\n                return make_node(AST_Return, node, {\n                    value: node.body\n                });\n            }\n            if (!insert && node instanceof AST_Return) {\n                if (compressor) {\n                    var value = node.value && node.value.drop_side_effect_free(compressor, true);\n                    return value ? make_node(AST_SimpleStatement, node, {\n                        body: value\n                    }) : make_node(AST_EmptyStatement, node);\n                }\n                return make_node(AST_SimpleStatement, node, {\n                    body: node.value || make_node(AST_UnaryPrefix, node, {\n                        operator: \"void\",\n                        expression: make_node(AST_Number, node, {\n                            value: 0\n                        })\n                    })\n                });\n            }\n            if (node instanceof AST_Lambda && node !== self) {\n                return node;\n            }\n            if (node instanceof AST_Block) {\n                var index = node.body.length - 1;\n                if (index >= 0) {\n                    node.body[index] = node.body[index].transform(tt);\n                }\n            }\n            if (node instanceof AST_If) {\n                node.body = node.body.transform(tt);\n                if (node.alternative) {\n                    node.alternative = node.alternative.transform(tt);\n                }\n            }\n            if (node instanceof AST_With) {\n                node.body = node.body.transform(tt);\n            }\n            return node;\n        });\n        self.transform(tt);\n    });\n\n    AST_Node.DEFMETHOD(\"reset_opt_flags\", function(compressor, rescan) {\n        var reduce_vars = rescan && compressor.option(\"reduce_vars\");\n        var safe_ids = Object.create(null);\n        var suppressor = new TreeWalker(function(node) {\n            if (node instanceof AST_Symbol) {\n                var d = node.definition();\n                if (node instanceof AST_SymbolRef) d.references.push(node);\n                d.fixed = false;\n            }\n        });\n        var tw = new TreeWalker(function(node, descend) {\n            node._squeezed = false;\n            node._optimized = false;\n            if (reduce_vars) {\n                if (node instanceof AST_Toplevel) node.globals.each(reset_def);\n                if (node instanceof AST_Scope) node.variables.each(reset_def);\n                if (node instanceof AST_SymbolRef) {\n                    var d = node.definition();\n                    d.references.push(node);\n                    if (d.fixed === undefined || !safe_to_read(d)\n                        || is_modified(node, 0, is_immutable(node.fixed_value()))) {\n                        d.fixed = false;\n                    } else {\n                        var parent = tw.parent();\n                        if (parent instanceof AST_Assign && parent.operator == \"=\" && node === parent.right\n                            || parent instanceof AST_Call && node !== parent.expression\n                            || parent instanceof AST_Return && node === parent.value && node.scope !== d.scope\n                            || parent instanceof AST_VarDef && node === parent.value) {\n                            d.escaped = true;\n                        }\n                    }\n                }\n                if (node instanceof AST_SymbolCatch) {\n                    node.definition().fixed = false;\n                }\n                if (node instanceof AST_VarDef) {\n                    var d = node.name.definition();\n                    if (d.fixed === undefined || safe_to_assign(d, node.value)) {\n                        if (node.value) {\n                            d.fixed = function() {\n                                return node.value;\n                            };\n                            mark(d, false);\n                            descend();\n                        } else {\n                            d.fixed = null;\n                        }\n                        mark(d, true);\n                        return true;\n                    } else if (node.value) {\n                        d.fixed = false;\n                    }\n                }\n                if (node instanceof AST_Assign\n                    && node.operator == \"=\"\n                    && node.left instanceof AST_SymbolRef) {\n                    var d = node.left.definition();\n                    if (safe_to_assign(d, node.right)) {\n                        d.references.push(node.left);\n                        d.fixed = function() {\n                            return node.right;\n                        };\n                        mark(d, false);\n                        node.right.walk(tw);\n                        mark(d, true);\n                        return true;\n                    }\n                }\n                if (node instanceof AST_Defun) {\n                    var d = node.name.definition();\n                    if (d.global && !compressor.toplevel(d) || safe_to_read(d)) {\n                        d.fixed = false;\n                    } else {\n                        d.fixed = node;\n                        mark(d, true);\n                    }\n                    var save_ids = safe_ids;\n                    safe_ids = Object.create(null);\n                    descend();\n                    safe_ids = save_ids;\n                    return true;\n                }\n                if (node instanceof AST_Function) {\n                    push();\n                    var iife;\n                    if (!node.name\n                        && (iife = tw.parent()) instanceof AST_Call\n                        && iife.expression === node) {\n                        // Virtually turn IIFE parameters into variable definitions:\n                        //   (function(a,b) {...})(c,d) => (function() {var a=c,b=d; ...})()\n                        // So existing transformation rules can work on them.\n                        node.argnames.forEach(function(arg, i) {\n                            var d = arg.definition();\n                            if (!node.uses_arguments && d.fixed === undefined) {\n                                d.fixed = function() {\n                                    return iife.args[i] || make_node(AST_Undefined, iife);\n                                };\n                                mark(d, true);\n                            } else {\n                                d.fixed = false;\n                            }\n                        });\n                    }\n                    descend();\n                    pop();\n                    return true;\n                }\n                if (node instanceof AST_Accessor) {\n                    var save_ids = safe_ids;\n                    safe_ids = Object.create(null);\n                    descend();\n                    safe_ids = save_ids;\n                    return true;\n                }\n                if (node instanceof AST_Binary\n                    && (node.operator == \"&&\" || node.operator == \"||\")) {\n                    node.left.walk(tw);\n                    push();\n                    node.right.walk(tw);\n                    pop();\n                    return true;\n                }\n                if (node instanceof AST_Conditional) {\n                    node.condition.walk(tw);\n                    push();\n                    node.consequent.walk(tw);\n                    pop();\n                    push();\n                    node.alternative.walk(tw);\n                    pop();\n                    return true;\n                }\n                if (node instanceof AST_If) {\n                    node.condition.walk(tw);\n                    push();\n                    node.body.walk(tw);\n                    pop();\n                    if (node.alternative) {\n                        push();\n                        node.alternative.walk(tw);\n                        pop();\n                    }\n                    return true;\n                }\n                if (node instanceof AST_DWLoop) {\n                    push();\n                    node.condition.walk(tw);\n                    node.body.walk(tw);\n                    pop();\n                    return true;\n                }\n                if (node instanceof AST_LabeledStatement) {\n                    push();\n                    node.body.walk(tw);\n                    pop();\n                    return true;\n                }\n                if (node instanceof AST_For) {\n                    if (node.init) node.init.walk(tw);\n                    if (node.condition) {\n                        push();\n                        node.condition.walk(tw);\n                        pop();\n                    }\n                    push();\n                    node.body.walk(tw);\n                    pop();\n                    if (node.step) {\n                        push();\n                        node.step.walk(tw);\n                        pop();\n                    }\n                    return true;\n                }\n                if (node instanceof AST_ForIn) {\n                    node.init.walk(suppressor);\n                    node.object.walk(tw);\n                    push();\n                    node.body.walk(tw);\n                    pop();\n                    return true;\n                }\n                if (node instanceof AST_Try) {\n                    push();\n                    walk_body(node, tw);\n                    pop();\n                    if (node.bcatch) {\n                        push();\n                        node.bcatch.walk(tw);\n                        pop();\n                    }\n                    if (node.bfinally) node.bfinally.walk(tw);\n                    return true;\n                }\n                if (node instanceof AST_SwitchBranch) {\n                    push();\n                    descend();\n                    pop();\n                    return true;\n                }\n            }\n        });\n        this.walk(tw);\n\n        function mark(def, safe) {\n            safe_ids[def.id] = safe;\n        }\n\n        function safe_to_read(def) {\n            if (safe_ids[def.id]) {\n                if (def.fixed == null) {\n                    var orig = def.orig[0];\n                    if (orig instanceof AST_SymbolFunarg || orig.name == \"arguments\") return false;\n                    def.fixed = make_node(AST_Undefined, orig);\n                }\n                return true;\n            }\n        }\n\n        function safe_to_assign(def, value) {\n            if (!HOP(safe_ids, def.id)) return false;\n            if (!safe_to_read(def)) return false;\n            if (def.fixed === false) return false;\n            if (def.fixed != null && (!value || def.references.length > 0)) return false;\n            return !def.orig.some(function(sym) {\n                return sym instanceof AST_SymbolDefun\n                    || sym instanceof AST_SymbolLambda;\n            });\n        }\n\n        function push() {\n            safe_ids = Object.create(safe_ids);\n        }\n\n        function pop() {\n            safe_ids = Object.getPrototypeOf(safe_ids);\n        }\n\n        function reset_def(def) {\n            def.escaped = false;\n            if (def.scope.uses_eval) {\n                def.fixed = false;\n            } else if (!def.global || compressor.toplevel(def)) {\n                def.fixed = undefined;\n            } else {\n                def.fixed = false;\n            }\n            def.references = [];\n            def.should_replace = undefined;\n        }\n\n        function is_immutable(value) {\n            return value && value.is_constant() || value instanceof AST_Lambda;\n        }\n\n        function is_modified(node, level, immutable) {\n            var parent = tw.parent(level);\n            if (is_lhs(node, parent)\n                || !immutable && parent instanceof AST_Call && parent.expression === node) {\n                return true;\n            } else if (parent instanceof AST_PropAccess && parent.expression === node) {\n                return !immutable && is_modified(parent, level + 1);\n            }\n        }\n    });\n\n    AST_SymbolRef.DEFMETHOD(\"fixed_value\", function() {\n        var fixed = this.definition().fixed;\n        if (!fixed || fixed instanceof AST_Node) return fixed;\n        return fixed();\n    });\n\n    function is_lhs_read_only(lhs) {\n        return lhs instanceof AST_SymbolRef && lhs.definition().orig[0] instanceof AST_SymbolLambda;\n    }\n\n    function find_variable(compressor, name) {\n        var scope, i = 0;\n        while (scope = compressor.parent(i++)) {\n            if (scope instanceof AST_Scope) break;\n            if (scope instanceof AST_Catch) {\n                scope = scope.argname.definition().scope;\n                break;\n            }\n        }\n        return scope.find_variable(name);\n    }\n\n    function make_node(ctor, orig, props) {\n        if (!props) props = {};\n        if (orig) {\n            if (!props.start) props.start = orig.start;\n            if (!props.end) props.end = orig.end;\n        }\n        return new ctor(props);\n    };\n\n    function make_sequence(orig, expressions) {\n        if (expressions.length == 1) return expressions[0];\n        return make_node(AST_Sequence, orig, {\n            expressions: expressions\n        });\n    }\n\n    function make_node_from_constant(val, orig) {\n        switch (typeof val) {\n          case \"string\":\n            return make_node(AST_String, orig, {\n                value: val\n            });\n          case \"number\":\n            if (isNaN(val)) return make_node(AST_NaN, orig);\n            if (isFinite(val)) {\n                return 1 / val < 0 ? make_node(AST_UnaryPrefix, orig, {\n                    operator: \"-\",\n                    expression: make_node(AST_Number, orig, { value: -val })\n                }) : make_node(AST_Number, orig, { value: val });\n            }\n            return val < 0 ? make_node(AST_UnaryPrefix, orig, {\n                operator: \"-\",\n                expression: make_node(AST_Infinity, orig)\n            }) : make_node(AST_Infinity, orig);\n          case \"boolean\":\n            return make_node(val ? AST_True : AST_False, orig);\n          case \"undefined\":\n            return make_node(AST_Undefined, orig);\n          default:\n            if (val === null) {\n                return make_node(AST_Null, orig, { value: null });\n            }\n            if (val instanceof RegExp) {\n                return make_node(AST_RegExp, orig, { value: val });\n            }\n            throw new Error(string_template(\"Can't handle constant of type: {type}\", {\n                type: typeof val\n            }));\n        }\n    };\n\n    // we shouldn't compress (1,func)(something) to\n    // func(something) because that changes the meaning of\n    // the func (becomes lexical instead of global).\n    function maintain_this_binding(parent, orig, val) {\n        if (parent instanceof AST_UnaryPrefix && parent.operator == \"delete\"\n            || parent instanceof AST_Call && parent.expression === orig\n                && (val instanceof AST_PropAccess || val instanceof AST_SymbolRef && val.name == \"eval\")) {\n            return make_sequence(orig, [ make_node(AST_Number, orig, { value: 0 }), val ]);\n        }\n        return val;\n    }\n\n    function merge_sequence(array, node) {\n        if (node instanceof AST_Sequence) {\n            array.push.apply(array, node.expressions);\n        } else {\n            array.push(node);\n        }\n    }\n\n    function as_statement_array(thing) {\n        if (thing === null) return [];\n        if (thing instanceof AST_BlockStatement) return thing.body;\n        if (thing instanceof AST_EmptyStatement) return [];\n        if (thing instanceof AST_Statement) return [ thing ];\n        throw new Error(\"Can't convert thing to statement array\");\n    };\n\n    function is_empty(thing) {\n        if (thing === null) return true;\n        if (thing instanceof AST_EmptyStatement) return true;\n        if (thing instanceof AST_BlockStatement) return thing.body.length == 0;\n        return false;\n    };\n\n    function loop_body(x) {\n        if (x instanceof AST_Switch) return x;\n        if (x instanceof AST_For || x instanceof AST_ForIn || x instanceof AST_DWLoop) {\n            return (x.body instanceof AST_BlockStatement ? x.body : x);\n        }\n        return x;\n    };\n\n    function is_iife_call(node) {\n        if (node instanceof AST_Call && !(node instanceof AST_New)) {\n            return node.expression instanceof AST_Function || is_iife_call(node.expression);\n        }\n        return false;\n    }\n\n    function tighten_body(statements, compressor) {\n        var CHANGED, max_iter = 10;\n        do {\n            CHANGED = false;\n            statements = eliminate_spurious_blocks(statements);\n            if (compressor.option(\"dead_code\")) {\n                statements = eliminate_dead_code(statements, compressor);\n            }\n            if (compressor.option(\"if_return\")) {\n                statements = handle_if_return(statements, compressor);\n            }\n            if (compressor.sequences_limit > 0) {\n                statements = sequencesize(statements, compressor);\n            }\n            if (compressor.option(\"join_vars\")) {\n                statements = join_consecutive_vars(statements, compressor);\n            }\n            if (compressor.option(\"collapse_vars\")) {\n                statements = collapse(statements, compressor);\n            }\n        } while (CHANGED && max_iter-- > 0);\n\n        return statements;\n\n        // Search from right to left for assignment-like expressions:\n        // - `var a = x;`\n        // - `a = x;`\n        // - `++a`\n        // For each candidate, scan from left to right for first usage, then try\n        // to fold assignment into the site for compression.\n        // Will not attempt to collapse assignments into or past code blocks\n        // which are not sequentially executed, e.g. loops and conditionals.\n        function collapse(statements, compressor) {\n            var scope = compressor.find_parent(AST_Scope);\n            if (scope.uses_eval || scope.uses_with) return statements;\n            var candidates = [];\n            var stat_index = statements.length;\n            while (--stat_index >= 0) {\n                extract_candidates(statements[stat_index]);\n                while (candidates.length > 0) {\n                    var candidate = candidates.pop();\n                    var lhs = get_lhs(candidate);\n                    if (!lhs || is_lhs_read_only(lhs)) continue;\n                    var lvalues = get_lvalues(candidate);\n                    if (lhs instanceof AST_SymbolRef) lvalues[lhs.name] = false;\n                    var side_effects = value_has_side_effects(candidate);\n                    var hit = false, abort = false, replaced = false;\n                    var tt = new TreeTransformer(function(node, descend) {\n                        if (abort) return node;\n                        // Skip nodes before `candidate` as quickly as possible\n                        if (!hit) {\n                            if (node === candidate) {\n                                hit = true;\n                                return node;\n                            }\n                            return;\n                        }\n                        // Stop immediately if these node types are encountered\n                        var parent = tt.parent();\n                        if (node instanceof AST_Assign && node.operator != \"=\" && lhs.equivalent_to(node.left)\n                            || node instanceof AST_Debugger\n                            || node instanceof AST_IterationStatement && !(node instanceof AST_For)\n                            || node instanceof AST_SymbolRef && node.undeclared()\n                            || node instanceof AST_Try\n                            || node instanceof AST_With\n                            || parent instanceof AST_For && node !== parent.init) {\n                            abort = true;\n                            return node;\n                        }\n                        // Replace variable with assignment when found\n                        if (!(node instanceof AST_SymbolDeclaration)\n                            && !is_lhs(node, parent)\n                            && lhs.equivalent_to(node)) {\n                            CHANGED = replaced = abort = true;\n                            compressor.info(\"Collapsing {name} [{file}:{line},{col}]\", {\n                                name: node.print_to_string(),\n                                file: node.start.file,\n                                line: node.start.line,\n                                col: node.start.col\n                            });\n                            if (candidate instanceof AST_UnaryPostfix) {\n                                return make_node(AST_UnaryPrefix, candidate, candidate);\n                            }\n                            if (candidate instanceof AST_VarDef) {\n                                var def = candidate.name.definition();\n                                if (def.references.length == 1 && (!def.global || compressor.toplevel(def))) {\n                                    return maintain_this_binding(parent, node, candidate.value);\n                                }\n                                return make_node(AST_Assign, candidate, {\n                                    operator: \"=\",\n                                    left: make_node(AST_SymbolRef, candidate.name, candidate.name),\n                                    right: candidate.value\n                                });\n                            }\n                            return candidate;\n                        }\n                        // These node types have child nodes that execute sequentially,\n                        // but are otherwise not safe to scan into or beyond them.\n                        var sym;\n                        if (node instanceof AST_Call\n                            || node instanceof AST_Exit\n                            || node instanceof AST_PropAccess\n                            || node instanceof AST_SymbolRef\n                               && (lvalues[node.name]\n                                   || side_effects && !references_in_scope(node.definition()))\n                            || (sym = lhs_or_def(node)) && get_symbol(sym).name in lvalues\n                            || parent instanceof AST_Binary\n                                && (parent.operator == \"&&\" || parent.operator == \"||\")\n                            || parent instanceof AST_Case\n                            || parent instanceof AST_Conditional\n                            || parent instanceof AST_For\n                            || parent instanceof AST_If) {\n                            if (!(node instanceof AST_Scope)) descend(node, tt);\n                            abort = true;\n                            return node;\n                        }\n                        // Skip (non-executed) functions and (leading) default case in switch statements\n                        if (node instanceof AST_Default || node instanceof AST_Scope) return node;\n                    });\n                    for (var i = stat_index; !abort && i < statements.length; i++) {\n                        statements[i].transform(tt);\n                    }\n                    if (replaced && !remove_candidate(candidate)) statements.splice(stat_index, 1);\n                }\n            }\n            return statements;\n\n            function extract_candidates(expr) {\n                if (expr instanceof AST_Assign && !expr.left.has_side_effects(compressor)\n                    || expr instanceof AST_Unary && (expr.operator == \"++\" || expr.operator == \"--\")) {\n                    candidates.push(expr);\n                } else if (expr instanceof AST_Sequence) {\n                    expr.expressions.forEach(extract_candidates);\n                } else if (expr instanceof AST_Definitions) {\n                    expr.definitions.forEach(function(var_def) {\n                        if (var_def.value) candidates.push(var_def);\n                    });\n                } else if (expr instanceof AST_SimpleStatement) {\n                    extract_candidates(expr.body);\n                } else if (expr instanceof AST_For && expr.init) {\n                    extract_candidates(expr.init);\n                }\n            }\n\n            function get_lhs(expr) {\n                if (expr instanceof AST_VarDef) {\n                    var def = expr.name.definition();\n                    if (def.orig.length > 1\n                        || def.references.length == 1 && (!def.global || compressor.toplevel(def))) {\n                        return make_node(AST_SymbolRef, expr.name, expr.name);\n                    }\n                } else {\n                    return expr[expr instanceof AST_Assign ? \"left\" : \"expression\"];\n                }\n            }\n\n            function get_symbol(node) {\n                while (node instanceof AST_PropAccess) node = node.expression;\n                return node;\n            }\n\n            function get_lvalues(expr) {\n                var lvalues = Object.create(null);\n                if (expr instanceof AST_Unary) return lvalues;\n                var scope;\n                var tw = new TreeWalker(function(node, descend) {\n                    if (node instanceof AST_Scope) {\n                        var save_scope = scope;\n                        descend();\n                        scope = save_scope;\n                        return true;\n                    }\n                    if (node instanceof AST_SymbolRef || node instanceof AST_PropAccess) {\n                        var sym = get_symbol(node);\n                        if (sym instanceof AST_SymbolRef) {\n                            lvalues[sym.name] = lvalues[sym.name] || is_lhs(node, tw.parent());\n                        }\n                    }\n                });\n                expr[expr instanceof AST_Assign ? \"right\" : \"value\"].walk(tw);\n                return lvalues;\n            }\n\n            function lhs_or_def(node) {\n                if (node instanceof AST_VarDef) return node.value && node.name;\n                return is_lhs(node.left, node);\n            }\n\n            function remove_candidate(expr) {\n                var found = false;\n                return statements[stat_index].transform(new TreeTransformer(function(node, descend, in_list) {\n                    if (found) return node;\n                    if (node === expr) {\n                        found = true;\n                        if (node instanceof AST_VarDef) {\n                            remove(node.name.definition().orig, node.name);\n                        }\n                        return in_list ? MAP.skip : null;\n                    }\n                }, function(node) {\n                    if (node instanceof AST_Sequence) switch (node.expressions.length) {\n                      case 0: return null;\n                      case 1: return node.expressions[0];\n                    }\n                    if (node instanceof AST_Definitions && node.definitions.length == 0\n                        || node instanceof AST_SimpleStatement && !node.body) {\n                        return null;\n                    }\n                }));\n            }\n\n            function value_has_side_effects(expr) {\n                if (expr instanceof AST_Unary) return false;\n                return expr[expr instanceof AST_Assign ? \"right\" : \"value\"].has_side_effects(compressor);\n            }\n\n            function references_in_scope(def) {\n                if (def.orig.length == 1 && def.orig[0] instanceof AST_SymbolDefun) return true;\n                if (def.scope !== scope) return false;\n                return def.references.every(function(ref) {\n                    return ref.scope === scope;\n                });\n            }\n        }\n\n        function eliminate_spurious_blocks(statements) {\n            var seen_dirs = [];\n            return statements.reduce(function(a, stat){\n                if (stat instanceof AST_BlockStatement) {\n                    CHANGED = true;\n                    a.push.apply(a, eliminate_spurious_blocks(stat.body));\n                } else if (stat instanceof AST_EmptyStatement) {\n                    CHANGED = true;\n                } else if (stat instanceof AST_Directive) {\n                    if (seen_dirs.indexOf(stat.value) < 0) {\n                        a.push(stat);\n                        seen_dirs.push(stat.value);\n                    } else {\n                        CHANGED = true;\n                    }\n                } else {\n                    a.push(stat);\n                }\n                return a;\n            }, []);\n        };\n\n        function handle_if_return(statements, compressor) {\n            var self = compressor.self();\n            var multiple_if_returns = has_multiple_if_returns(statements);\n            var in_lambda = self instanceof AST_Lambda;\n            var ret = []; // Optimized statements, build from tail to front\n            loop: for (var i = statements.length; --i >= 0;) {\n                var stat = statements[i];\n                switch (true) {\n                  case (in_lambda && stat instanceof AST_Return && !stat.value && ret.length == 0):\n                    CHANGED = true;\n                    // note, ret.length is probably always zero\n                    // because we drop unreachable code before this\n                    // step.  nevertheless, it's good to check.\n                    continue loop;\n                  case stat instanceof AST_If:\n                    var ab = aborts(stat.body);\n                    if (can_merge_flow(ab)) {\n                        if (ab.label) {\n                            remove(ab.label.thedef.references, ab);\n                        }\n                        CHANGED = true;\n                        var funs = extract_functions_from_statement_array(ret);\n                        var body = as_statement_array_with_return(stat.body, ab);\n                        stat = stat.clone();\n                        stat.condition = stat.condition.negate(compressor);\n                        stat.body = make_node(AST_BlockStatement, stat, {\n                            body: as_statement_array(stat.alternative).concat(ret)\n                        });\n                        stat.alternative = make_node(AST_BlockStatement, stat, {\n                            body: body\n                        });\n                        ret = [ stat.transform(compressor) ].concat(funs);\n                        continue loop;\n                    }\n\n                    var ab = aborts(stat.alternative);\n                    if (can_merge_flow(ab)) {\n                        if (ab.label) {\n                            remove(ab.label.thedef.references, ab);\n                        }\n                        CHANGED = true;\n                        var funs = extract_functions_from_statement_array(ret);\n                        stat = stat.clone();\n                        stat.body = make_node(AST_BlockStatement, stat.body, {\n                            body: as_statement_array(stat.body).concat(ret)\n                        });\n                        var body = as_statement_array_with_return(stat.alternative, ab);\n                        stat.alternative = make_node(AST_BlockStatement, stat.alternative, {\n                            body: body\n                        });\n                        ret = [ stat.transform(compressor) ].concat(funs);\n                        continue loop;\n                    }\n\n                    if (stat.body instanceof AST_Return) {\n                        var value = stat.body.value;\n                        //---\n                        // pretty silly case, but:\n                        // if (foo()) return; return; ==> foo(); return;\n                        if ((in_lambda && ret.length == 0 || ret[0] instanceof AST_Return && !ret[0].value)\n                            && !value && !stat.alternative) {\n                            CHANGED = true;\n                            var cond = make_node(AST_SimpleStatement, stat.condition, {\n                                body: stat.condition\n                            });\n                            ret.unshift(cond);\n                            continue loop;\n                        }\n                        //---\n                        // if (foo()) return x; return y; ==> return foo() ? x : y;\n                        if (ret[0] instanceof AST_Return && value && ret[0].value && !stat.alternative) {\n                            CHANGED = true;\n                            stat = stat.clone();\n                            stat.alternative = ret[0];\n                            ret[0] = stat.transform(compressor);\n                            continue loop;\n                        }\n                        //---\n                        // if (foo()) return x; [ return ; ] ==> return foo() ? x : undefined;\n                        if (multiple_if_returns && (ret.length == 0 || ret[0] instanceof AST_Return)\n                            && value && !stat.alternative && in_lambda) {\n                            CHANGED = true;\n                            stat = stat.clone();\n                            stat.alternative = ret[0] || make_node(AST_Return, stat, {\n                                value: null\n                            });\n                            ret[0] = stat.transform(compressor);\n                            continue loop;\n                        }\n                        //---\n                        // if (a) return b; if (c) return d; e; ==> return a ? b : c ? d : void e;\n                        //\n                        // if sequences is not enabled, this can lead to an endless loop (issue #866).\n                        // however, with sequences on this helps producing slightly better output for\n                        // the example code.\n                        if (compressor.option(\"sequences\")\n                            && i > 0 && statements[i - 1] instanceof AST_If && statements[i - 1].body instanceof AST_Return\n                            && ret.length == 1 && in_lambda && ret[0] instanceof AST_SimpleStatement\n                            && !stat.alternative) {\n                            CHANGED = true;\n                            ret.push(make_node(AST_Return, ret[0], {\n                                value: null\n                            }).transform(compressor));\n                            ret.unshift(stat);\n                            continue loop;\n                        }\n                    }\n\n                    ret.unshift(stat);\n                    break;\n                  default:\n                    ret.unshift(stat);\n                    break;\n                }\n            }\n            return ret;\n\n            function has_multiple_if_returns(statements) {\n                var n = 0;\n                for (var i = statements.length; --i >= 0;) {\n                    var stat = statements[i];\n                    if (stat instanceof AST_If && stat.body instanceof AST_Return) {\n                        if (++n > 1) return true;\n                    }\n                }\n                return false;\n            }\n\n            function is_return_void(value) {\n                return !value || value instanceof AST_UnaryPrefix && value.operator == \"void\";\n            }\n\n            function can_merge_flow(ab) {\n                if (!ab) return false;\n                var lct = ab instanceof AST_LoopControl ? compressor.loopcontrol_target(ab) : null;\n                return ab instanceof AST_Return && in_lambda && is_return_void(ab.value)\n                    || ab instanceof AST_Continue && self === loop_body(lct)\n                    || ab instanceof AST_Break && lct instanceof AST_BlockStatement && self === lct;\n            }\n\n            function as_statement_array_with_return(node, ab) {\n                var body = as_statement_array(node).slice(0, -1);\n                if (ab.value) {\n                    body.push(make_node(AST_SimpleStatement, ab.value, {\n                        body: ab.value.expression\n                    }));\n                }\n                return body;\n            }\n        };\n\n        function eliminate_dead_code(statements, compressor) {\n            var has_quit = false;\n            var orig = statements.length;\n            var self = compressor.self();\n            statements = statements.reduce(function(a, stat){\n                if (has_quit) {\n                    extract_declarations_from_unreachable_code(compressor, stat, a);\n                } else {\n                    if (stat instanceof AST_LoopControl) {\n                        var lct = compressor.loopcontrol_target(stat);\n                        if ((stat instanceof AST_Break\n                             && !(lct instanceof AST_IterationStatement)\n                             && loop_body(lct) === self) || (stat instanceof AST_Continue\n                                                             && loop_body(lct) === self)) {\n                            if (stat.label) {\n                                remove(stat.label.thedef.references, stat);\n                            }\n                        } else {\n                            a.push(stat);\n                        }\n                    } else {\n                        a.push(stat);\n                    }\n                    if (aborts(stat)) has_quit = true;\n                }\n                return a;\n            }, []);\n            CHANGED = statements.length != orig;\n            return statements;\n        };\n\n        function sequencesize(statements, compressor) {\n            if (statements.length < 2) return statements;\n            var seq = [], ret = [];\n            function push_seq() {\n                if (!seq.length) return;\n                var body = make_sequence(seq[0], seq);\n                ret.push(make_node(AST_SimpleStatement, body, { body: body }));\n                seq = [];\n            };\n            statements.forEach(function(stat){\n                if (stat instanceof AST_SimpleStatement) {\n                    if (seq.length >= compressor.sequences_limit) push_seq();\n                    var body = stat.body;\n                    if (seq.length > 0) body = body.drop_side_effect_free(compressor);\n                    if (body) merge_sequence(seq, body);\n                } else {\n                    push_seq();\n                    ret.push(stat);\n                }\n            });\n            push_seq();\n            ret = sequencesize_2(ret, compressor);\n            CHANGED = ret.length != statements.length;\n            return ret;\n        };\n\n        function sequencesize_2(statements, compressor) {\n            function cons_seq(right) {\n                ret.pop();\n                var left = prev.body;\n                if (!(left instanceof AST_Sequence)) {\n                    left = make_node(AST_Sequence, left, {\n                        expressions: [ left ]\n                    });\n                }\n                merge_sequence(left.expressions, right);\n                return left.transform(compressor);\n            };\n            var ret = [], prev = null;\n            statements.forEach(function(stat){\n                if (prev) {\n                    if (stat instanceof AST_For) {\n                        try {\n                            prev.body.walk(new TreeWalker(function(node){\n                                if (node instanceof AST_Binary && node.operator == \"in\")\n                                    throw cons_seq;\n                            }));\n                            if (stat.init && !(stat.init instanceof AST_Definitions)) {\n                                stat.init = cons_seq(stat.init);\n                            }\n                            else if (!stat.init) {\n                                stat.init = prev.body.drop_side_effect_free(compressor);\n                                ret.pop();\n                            }\n                        } catch(ex) {\n                            if (ex !== cons_seq) throw ex;\n                        }\n                    }\n                    else if (stat instanceof AST_If) {\n                        stat.condition = cons_seq(stat.condition);\n                    }\n                    else if (stat instanceof AST_With) {\n                        stat.expression = cons_seq(stat.expression);\n                    }\n                    else if (stat instanceof AST_Exit && stat.value) {\n                        stat.value = cons_seq(stat.value);\n                    }\n                    else if (stat instanceof AST_Exit) {\n                        stat.value = cons_seq(make_node(AST_Undefined, stat).transform(compressor));\n                    }\n                    else if (stat instanceof AST_Switch) {\n                        stat.expression = cons_seq(stat.expression);\n                    }\n                }\n                ret.push(stat);\n                prev = stat instanceof AST_SimpleStatement ? stat : null;\n            });\n            return ret;\n        };\n\n        function join_consecutive_vars(statements, compressor) {\n            var prev = null;\n            return statements.reduce(function(a, stat){\n                if (stat instanceof AST_Definitions && prev && prev.TYPE == stat.TYPE) {\n                    prev.definitions = prev.definitions.concat(stat.definitions);\n                    CHANGED = true;\n                }\n                else if (stat instanceof AST_For\n                         && prev instanceof AST_Var\n                         && (!stat.init || stat.init.TYPE == prev.TYPE)) {\n                    CHANGED = true;\n                    a.pop();\n                    if (stat.init) {\n                        stat.init.definitions = prev.definitions.concat(stat.init.definitions);\n                    } else {\n                        stat.init = prev;\n                    }\n                    a.push(stat);\n                    prev = stat;\n                }\n                else {\n                    prev = stat;\n                    a.push(stat);\n                }\n                return a;\n            }, []);\n        };\n\n    };\n\n    function extract_functions_from_statement_array(statements) {\n        var funs = [];\n        for (var i = statements.length - 1; i >= 0; --i) {\n            var stat = statements[i];\n            if (stat instanceof AST_Defun) {\n                statements.splice(i, 1);\n                funs.unshift(stat);\n            }\n        }\n        return funs;\n    }\n\n    function extract_declarations_from_unreachable_code(compressor, stat, target) {\n        if (!(stat instanceof AST_Defun)) {\n            compressor.warn(\"Dropping unreachable code [{file}:{line},{col}]\", stat.start);\n        }\n        stat.walk(new TreeWalker(function(node){\n            if (node instanceof AST_Definitions) {\n                compressor.warn(\"Declarations in unreachable code! [{file}:{line},{col}]\", node.start);\n                node.remove_initializers();\n                target.push(node);\n                return true;\n            }\n            if (node instanceof AST_Defun && (node === stat || !compressor.has_directive(\"use strict\"))) {\n                target.push(node);\n                return true;\n            }\n            if (node instanceof AST_Scope) {\n                return true;\n            }\n        }));\n    };\n\n    function is_undefined(node, compressor) {\n        return node.is_undefined\n            || node instanceof AST_Undefined\n            || node instanceof AST_UnaryPrefix\n                && node.operator == \"void\"\n                && !node.expression.has_side_effects(compressor);\n    }\n\n    // may_throw_on_access()\n    // returns true if this node may be null, undefined or contain `AST_Accessor`\n    (function(def) {\n        AST_Node.DEFMETHOD(\"may_throw_on_access\", function(compressor) {\n            var pure_getters = compressor.option(\"pure_getters\");\n            return !pure_getters || this._throw_on_access(pure_getters);\n        });\n\n        function is_strict(pure_getters) {\n            return /strict/.test(pure_getters);\n        }\n\n        def(AST_Node, is_strict);\n        def(AST_Null, return_true);\n        def(AST_Undefined, return_true);\n        def(AST_Constant, return_false);\n        def(AST_Array, return_false);\n        def(AST_Object, function(pure_getters) {\n            if (!is_strict(pure_getters)) return false;\n            for (var i = this.properties.length; --i >=0;)\n                if (this.properties[i].value instanceof AST_Accessor) return true;\n            return false;\n        });\n        def(AST_Function, return_false);\n        def(AST_UnaryPostfix, return_false);\n        def(AST_UnaryPrefix, function() {\n            return this.operator == \"void\";\n        });\n        def(AST_Binary, function(pure_getters) {\n            switch (this.operator) {\n              case \"&&\":\n                return this.left._throw_on_access(pure_getters);\n              case \"||\":\n                return this.left._throw_on_access(pure_getters)\n                    && this.right._throw_on_access(pure_getters);\n              default:\n                return false;\n            }\n        })\n        def(AST_Assign, function(pure_getters) {\n            return this.operator == \"=\"\n                && this.right._throw_on_access(pure_getters);\n        })\n        def(AST_Conditional, function(pure_getters) {\n            return this.consequent._throw_on_access(pure_getters)\n                || this.alternative._throw_on_access(pure_getters);\n        })\n        def(AST_Sequence, function(pure_getters) {\n            return this.expressions[this.expressions.length - 1]._throw_on_access(pure_getters);\n        });\n        def(AST_SymbolRef, function(pure_getters) {\n            if (this.is_undefined) return true;\n            if (!is_strict(pure_getters)) return false;\n            var fixed = this.fixed_value();\n            return !fixed || fixed._throw_on_access(pure_getters);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"_throw_on_access\", func);\n    });\n\n    /* -----[ boolean/negation helpers ]----- */\n\n    // methods to determine whether an expression has a boolean result type\n    (function(def){\n        var unary_bool = [ \"!\", \"delete\" ];\n        var binary_bool = [ \"in\", \"instanceof\", \"==\", \"!=\", \"===\", \"!==\", \"<\", \"<=\", \">=\", \">\" ];\n        def(AST_Node, return_false);\n        def(AST_UnaryPrefix, function(){\n            return member(this.operator, unary_bool);\n        });\n        def(AST_Binary, function(){\n            return member(this.operator, binary_bool) ||\n                ( (this.operator == \"&&\" || this.operator == \"||\") &&\n                  this.left.is_boolean() && this.right.is_boolean() );\n        });\n        def(AST_Conditional, function(){\n            return this.consequent.is_boolean() && this.alternative.is_boolean();\n        });\n        def(AST_Assign, function(){\n            return this.operator == \"=\" && this.right.is_boolean();\n        });\n        def(AST_Sequence, function(){\n            return this.expressions[this.expressions.length - 1].is_boolean();\n        });\n        def(AST_True, return_true);\n        def(AST_False, return_true);\n    })(function(node, func){\n        node.DEFMETHOD(\"is_boolean\", func);\n    });\n\n    // methods to determine if an expression has a numeric result type\n    (function(def){\n        def(AST_Node, return_false);\n        def(AST_Number, return_true);\n        var unary = makePredicate(\"+ - ~ ++ --\");\n        def(AST_Unary, function(){\n            return unary(this.operator);\n        });\n        var binary = makePredicate(\"- * / % & | ^ << >> >>>\");\n        def(AST_Binary, function(compressor){\n            return binary(this.operator) || this.operator == \"+\"\n                && this.left.is_number(compressor)\n                && this.right.is_number(compressor);\n        });\n        def(AST_Assign, function(compressor){\n            return binary(this.operator.slice(0, -1))\n                || this.operator == \"=\" && this.right.is_number(compressor);\n        });\n        def(AST_Sequence, function(compressor){\n            return this.expressions[this.expressions.length - 1].is_number(compressor);\n        });\n        def(AST_Conditional, function(compressor){\n            return this.consequent.is_number(compressor) && this.alternative.is_number(compressor);\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"is_number\", func);\n    });\n\n    // methods to determine if an expression has a string result type\n    (function(def){\n        def(AST_Node, return_false);\n        def(AST_String, return_true);\n        def(AST_UnaryPrefix, function(){\n            return this.operator == \"typeof\";\n        });\n        def(AST_Binary, function(compressor){\n            return this.operator == \"+\" &&\n                (this.left.is_string(compressor) || this.right.is_string(compressor));\n        });\n        def(AST_Assign, function(compressor){\n            return (this.operator == \"=\" || this.operator == \"+=\") && this.right.is_string(compressor);\n        });\n        def(AST_Sequence, function(compressor){\n            return this.expressions[this.expressions.length - 1].is_string(compressor);\n        });\n        def(AST_Conditional, function(compressor){\n            return this.consequent.is_string(compressor) && this.alternative.is_string(compressor);\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"is_string\", func);\n    });\n\n    var unary_side_effects = makePredicate(\"delete ++ --\");\n\n    function is_lhs(node, parent) {\n        if (parent instanceof AST_Unary && unary_side_effects(parent.operator)) return parent.expression;\n        if (parent instanceof AST_Assign && parent.left === node) return node;\n    }\n\n    (function(def){\n        AST_Node.DEFMETHOD(\"resolve_defines\", function(compressor) {\n            if (!compressor.option(\"global_defs\")) return;\n            var def = this._find_defs(compressor, \"\");\n            if (def) {\n                var node, parent = this, level = 0;\n                do {\n                    node = parent;\n                    parent = compressor.parent(level++);\n                } while (parent instanceof AST_PropAccess && parent.expression === node);\n                if (is_lhs(node, parent)) {\n                    compressor.warn('global_defs ' + this.print_to_string() + ' redefined [{file}:{line},{col}]', this.start);\n                } else {\n                    return def;\n                }\n            }\n        });\n        function to_node(value, orig) {\n            if (value instanceof AST_Node) return make_node(value.CTOR, orig, value);\n            if (Array.isArray(value)) return make_node(AST_Array, orig, {\n                elements: value.map(function(value) {\n                    return to_node(value, orig);\n                })\n            });\n            if (value && typeof value == \"object\") {\n                var props = [];\n                for (var key in value) {\n                    props.push(make_node(AST_ObjectKeyVal, orig, {\n                        key: key,\n                        value: to_node(value[key], orig)\n                    }));\n                }\n                return make_node(AST_Object, orig, {\n                    properties: props\n                });\n            }\n            return make_node_from_constant(value, orig);\n        }\n        def(AST_Node, noop);\n        def(AST_Dot, function(compressor, suffix){\n            return this.expression._find_defs(compressor, \".\" + this.property + suffix);\n        });\n        def(AST_SymbolRef, function(compressor, suffix){\n            if (!this.global()) return;\n            var name;\n            var defines = compressor.option(\"global_defs\");\n            if (defines && HOP(defines, (name = this.name + suffix))) {\n                var node = to_node(defines[name], this);\n                var top = compressor.find_parent(AST_Toplevel);\n                node.walk(new TreeWalker(function(node) {\n                    if (node instanceof AST_SymbolRef) {\n                        node.scope = top;\n                        node.thedef = top.def_global(node);\n                    }\n                }));\n                return node;\n            }\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"_find_defs\", func);\n    });\n\n    function best_of_expression(ast1, ast2) {\n        return ast1.print_to_string().length >\n            ast2.print_to_string().length\n            ? ast2 : ast1;\n    }\n\n    function best_of_statement(ast1, ast2) {\n        return best_of_expression(make_node(AST_SimpleStatement, ast1, {\n            body: ast1\n        }), make_node(AST_SimpleStatement, ast2, {\n            body: ast2\n        })).body;\n    }\n\n    function best_of(compressor, ast1, ast2) {\n        return (first_in_statement(compressor) ? best_of_statement : best_of_expression)(ast1, ast2);\n    }\n\n    // methods to evaluate a constant expression\n    (function(def){\n        // If the node has been successfully reduced to a constant,\n        // then its value is returned; otherwise the element itself\n        // is returned.\n        // They can be distinguished as constant value is never a\n        // descendant of AST_Node.\n        AST_Node.DEFMETHOD(\"evaluate\", function(compressor){\n            if (!compressor.option(\"evaluate\")) return this;\n            try {\n                var val = this._eval(compressor);\n                return !val || val instanceof RegExp || typeof val != \"object\" ? val : this;\n            } catch(ex) {\n                if (ex !== def) throw ex;\n                return this;\n            }\n        });\n        var unaryPrefix = makePredicate(\"! ~ - + void\");\n        AST_Node.DEFMETHOD(\"is_constant\", function(){\n            // Accomodate when compress option evaluate=false\n            // as well as the common constant expressions !0 and -1\n            if (this instanceof AST_Constant) {\n                return !(this instanceof AST_RegExp);\n            } else {\n                return this instanceof AST_UnaryPrefix\n                    && this.expression instanceof AST_Constant\n                    && unaryPrefix(this.operator);\n            }\n        });\n        // Obtain the constant value of an expression already known to be constant.\n        // Result only valid iff this.is_constant() is true.\n        AST_Node.DEFMETHOD(\"constant_value\", function(compressor){\n            // Accomodate when option evaluate=false.\n            if (this instanceof AST_Constant && !(this instanceof AST_RegExp)) {\n                return this.value;\n            }\n            // Accomodate the common constant expressions !0 and -1 when option evaluate=false.\n            if (this instanceof AST_UnaryPrefix\n                && this.expression instanceof AST_Constant) switch (this.operator) {\n              case \"!\":\n                return !this.expression.value;\n              case \"~\":\n                return ~this.expression.value;\n              case \"-\":\n                return -this.expression.value;\n              case \"+\":\n                return +this.expression.value;\n              default:\n                throw new Error(string_template(\"Cannot evaluate unary expression {value}\", {\n                    value: this.print_to_string()\n                }));\n            }\n            var result = this.evaluate(compressor);\n            if (result !== this) {\n                return result;\n            }\n            throw new Error(string_template(\"Cannot evaluate constant [{file}:{line},{col}]\", this.start));\n        });\n        def(AST_Statement, function(){\n            throw new Error(string_template(\"Cannot evaluate a statement [{file}:{line},{col}]\", this.start));\n        });\n        def(AST_Lambda, function(){\n            throw def;\n        });\n        function ev(node, compressor) {\n            if (!compressor) throw new Error(\"Compressor must be passed\");\n\n            return node._eval(compressor);\n        };\n        def(AST_Node, function(){\n            throw def;          // not constant\n        });\n        def(AST_Constant, function(){\n            return this.getValue();\n        });\n        def(AST_Array, function(compressor){\n            if (compressor.option(\"unsafe\")) {\n                return this.elements.map(function(element) {\n                    return ev(element, compressor);\n                });\n            }\n            throw def;\n        });\n        def(AST_Object, function(compressor){\n            if (compressor.option(\"unsafe\")) {\n                var val = {};\n                for (var i = 0, len = this.properties.length; i < len; i++) {\n                    var prop = this.properties[i];\n                    var key = prop.key;\n                    if (key instanceof AST_Symbol) {\n                        key = key.name;\n                    } else if (key instanceof AST_Node) {\n                        key = ev(key, compressor);\n                    }\n                    if (typeof Object.prototype[key] === 'function') {\n                        throw def;\n                    }\n                    val[key] = ev(prop.value, compressor);\n                }\n                return val;\n            }\n            throw def;\n        });\n        def(AST_UnaryPrefix, function(compressor){\n            var e = this.expression;\n            switch (this.operator) {\n              case \"!\": return !ev(e, compressor);\n              case \"typeof\":\n                // Function would be evaluated to an array and so typeof would\n                // incorrectly return 'object'. Hence making is a special case.\n                if (e instanceof AST_Function) return typeof function(){};\n\n                e = ev(e, compressor);\n\n                // typeof <RegExp> returns \"object\" or \"function\" on different platforms\n                // so cannot evaluate reliably\n                if (e instanceof RegExp) throw def;\n\n                return typeof e;\n              case \"void\": return void ev(e, compressor);\n              case \"~\": return ~ev(e, compressor);\n              case \"-\": return -ev(e, compressor);\n              case \"+\": return +ev(e, compressor);\n            }\n            throw def;\n        });\n        def(AST_Binary, function(c){\n            var left = this.left, right = this.right, result;\n            switch (this.operator) {\n              case \"&&\"  : result = ev(left, c) &&  ev(right, c); break;\n              case \"||\"  : result = ev(left, c) ||  ev(right, c); break;\n              case \"|\"   : result = ev(left, c) |   ev(right, c); break;\n              case \"&\"   : result = ev(left, c) &   ev(right, c); break;\n              case \"^\"   : result = ev(left, c) ^   ev(right, c); break;\n              case \"+\"   : result = ev(left, c) +   ev(right, c); break;\n              case \"*\"   : result = ev(left, c) *   ev(right, c); break;\n              case \"/\"   : result = ev(left, c) /   ev(right, c); break;\n              case \"%\"   : result = ev(left, c) %   ev(right, c); break;\n              case \"-\"   : result = ev(left, c) -   ev(right, c); break;\n              case \"<<\"  : result = ev(left, c) <<  ev(right, c); break;\n              case \">>\"  : result = ev(left, c) >>  ev(right, c); break;\n              case \">>>\" : result = ev(left, c) >>> ev(right, c); break;\n              case \"==\"  : result = ev(left, c) ==  ev(right, c); break;\n              case \"===\" : result = ev(left, c) === ev(right, c); break;\n              case \"!=\"  : result = ev(left, c) !=  ev(right, c); break;\n              case \"!==\" : result = ev(left, c) !== ev(right, c); break;\n              case \"<\"   : result = ev(left, c) <   ev(right, c); break;\n              case \"<=\"  : result = ev(left, c) <=  ev(right, c); break;\n              case \">\"   : result = ev(left, c) >   ev(right, c); break;\n              case \">=\"  : result = ev(left, c) >=  ev(right, c); break;\n              default:\n                  throw def;\n            }\n            if (isNaN(result) && c.find_parent(AST_With)) {\n                // leave original expression as is\n                throw def;\n            }\n            return result;\n        });\n        def(AST_Conditional, function(compressor){\n            return ev(this.condition, compressor)\n                ? ev(this.consequent, compressor)\n                : ev(this.alternative, compressor);\n        });\n        def(AST_SymbolRef, function(compressor){\n            if (!compressor.option(\"reduce_vars\") || this._evaluating) throw def;\n            this._evaluating = true;\n            try {\n                var fixed = this.fixed_value();\n                if (!fixed) throw def;\n                var value = ev(fixed, compressor);\n                if (!HOP(fixed, \"_eval\")) fixed._eval = function() {\n                    return value;\n                };\n                if (value && typeof value == \"object\" && this.definition().escaped) throw def;\n                return value;\n            } finally {\n                this._evaluating = false;\n            }\n        });\n        def(AST_PropAccess, function(compressor){\n            if (compressor.option(\"unsafe\")) {\n                var key = this.property;\n                if (key instanceof AST_Node) {\n                    key = ev(key, compressor);\n                }\n                var val = ev(this.expression, compressor);\n                if (val && HOP(val, key)) {\n                    return val[key];\n                }\n            }\n            throw def;\n        });\n        var object_fns = [\n            'constructor',\n            'toString',\n            'valueOf',\n        ];\n        var native_fns = {\n            Array: makePredicate([\n                'indexOf',\n                'join',\n                'lastIndexOf',\n                'slice',\n            ].concat(object_fns)),\n            Boolean: makePredicate(object_fns),\n            Number: makePredicate([\n                'toExponential',\n                'toFixed',\n                'toPrecision',\n            ].concat(object_fns)),\n            RegExp: makePredicate([\n                'test',\n            ].concat(object_fns)),\n            String: makePredicate([\n                'charAt',\n                'charCodeAt',\n                'concat',\n                'indexOf',\n                'italics',\n                'lastIndexOf',\n                'match',\n                'replace',\n                'search',\n                'slice',\n                'split',\n                'substr',\n                'substring',\n                'trim',\n            ].concat(object_fns)),\n        };\n        def(AST_Call, function(compressor){\n            var exp = this.expression;\n            if (compressor.option(\"unsafe\") && exp instanceof AST_PropAccess) {\n                var key = exp.property;\n                if (key instanceof AST_Node) {\n                    key = ev(key, compressor);\n                }\n                var val = ev(exp.expression, compressor);\n                if ((val && native_fns[val.constructor.name] || return_false)(key)) {\n                    return val[key].apply(val, this.args.map(function(arg) {\n                        return ev(arg, compressor);\n                    }));\n                }\n            }\n            throw def;\n        });\n        def(AST_New, function(compressor){\n            throw def;\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"_eval\", func);\n    });\n\n    // method to negate an expression\n    (function(def){\n        function basic_negation(exp) {\n            return make_node(AST_UnaryPrefix, exp, {\n                operator: \"!\",\n                expression: exp\n            });\n        }\n        function best(orig, alt, first_in_statement) {\n            var negated = basic_negation(orig);\n            if (first_in_statement) {\n                var stat = make_node(AST_SimpleStatement, alt, {\n                    body: alt\n                });\n                return best_of_expression(negated, stat) === stat ? alt : negated;\n            }\n            return best_of_expression(negated, alt);\n        }\n        def(AST_Node, function(){\n            return basic_negation(this);\n        });\n        def(AST_Statement, function(){\n            throw new Error(\"Cannot negate a statement\");\n        });\n        def(AST_Function, function(){\n            return basic_negation(this);\n        });\n        def(AST_UnaryPrefix, function(){\n            if (this.operator == \"!\")\n                return this.expression;\n            return basic_negation(this);\n        });\n        def(AST_Sequence, function(compressor){\n            var expressions = this.expressions.slice();\n            expressions.push(expressions.pop().negate(compressor));\n            return make_sequence(this, expressions);\n        });\n        def(AST_Conditional, function(compressor, first_in_statement){\n            var self = this.clone();\n            self.consequent = self.consequent.negate(compressor);\n            self.alternative = self.alternative.negate(compressor);\n            return best(this, self, first_in_statement);\n        });\n        def(AST_Binary, function(compressor, first_in_statement){\n            var self = this.clone(), op = this.operator;\n            if (compressor.option(\"unsafe_comps\")) {\n                switch (op) {\n                  case \"<=\" : self.operator = \">\"  ; return self;\n                  case \"<\"  : self.operator = \">=\" ; return self;\n                  case \">=\" : self.operator = \"<\"  ; return self;\n                  case \">\"  : self.operator = \"<=\" ; return self;\n                }\n            }\n            switch (op) {\n              case \"==\" : self.operator = \"!=\"; return self;\n              case \"!=\" : self.operator = \"==\"; return self;\n              case \"===\": self.operator = \"!==\"; return self;\n              case \"!==\": self.operator = \"===\"; return self;\n              case \"&&\":\n                self.operator = \"||\";\n                self.left = self.left.negate(compressor, first_in_statement);\n                self.right = self.right.negate(compressor);\n                return best(this, self, first_in_statement);\n              case \"||\":\n                self.operator = \"&&\";\n                self.left = self.left.negate(compressor, first_in_statement);\n                self.right = self.right.negate(compressor);\n                return best(this, self, first_in_statement);\n            }\n            return basic_negation(this);\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"negate\", function(compressor, first_in_statement){\n            return func.call(this, compressor, first_in_statement);\n        });\n    });\n\n    AST_Call.DEFMETHOD(\"has_pure_annotation\", function(compressor) {\n        if (!compressor.option(\"side_effects\")) return false;\n        if (this.pure !== undefined) return this.pure;\n        var pure = false;\n        var comments, last_comment;\n        if (this.start\n            && (comments = this.start.comments_before)\n            && comments.length\n            && /[@#]__PURE__/.test((last_comment = comments[comments.length - 1]).value)) {\n            pure = last_comment;\n        }\n        return this.pure = pure;\n    });\n\n    // determine if expression has side effects\n    (function(def){\n        def(AST_Node, return_true);\n\n        def(AST_EmptyStatement, return_false);\n        def(AST_Constant, return_false);\n        def(AST_This, return_false);\n\n        def(AST_Call, function(compressor){\n            if (!this.has_pure_annotation(compressor) && compressor.pure_funcs(this)) return true;\n            for (var i = this.args.length; --i >= 0;) {\n                if (this.args[i].has_side_effects(compressor))\n                    return true;\n            }\n            return false;\n        });\n\n        function any(list, compressor) {\n            for (var i = list.length; --i >= 0;)\n                if (list[i].has_side_effects(compressor))\n                    return true;\n            return false;\n        }\n\n        def(AST_Block, function(compressor){\n            return any(this.body, compressor);\n        });\n        def(AST_Switch, function(compressor){\n            return this.expression.has_side_effects(compressor)\n                || any(this.body, compressor);\n        });\n        def(AST_Case, function(compressor){\n            return this.expression.has_side_effects(compressor)\n                || any(this.body, compressor);\n        });\n        def(AST_Try, function(compressor){\n            return any(this.body, compressor)\n                || this.bcatch && this.bcatch.has_side_effects(compressor)\n                || this.bfinally && this.bfinally.has_side_effects(compressor);\n        });\n        def(AST_If, function(compressor){\n            return this.condition.has_side_effects(compressor)\n                || this.body && this.body.has_side_effects(compressor)\n                || this.alternative && this.alternative.has_side_effects(compressor);\n        });\n        def(AST_LabeledStatement, function(compressor){\n            return this.body.has_side_effects(compressor);\n        });\n        def(AST_SimpleStatement, function(compressor){\n            return this.body.has_side_effects(compressor);\n        });\n        def(AST_Defun, return_true);\n        def(AST_Function, return_false);\n        def(AST_Binary, function(compressor){\n            return this.left.has_side_effects(compressor)\n                || this.right.has_side_effects(compressor);\n        });\n        def(AST_Assign, return_true);\n        def(AST_Conditional, function(compressor){\n            return this.condition.has_side_effects(compressor)\n                || this.consequent.has_side_effects(compressor)\n                || this.alternative.has_side_effects(compressor);\n        });\n        def(AST_Unary, function(compressor){\n            return unary_side_effects(this.operator)\n                || this.expression.has_side_effects(compressor);\n        });\n        def(AST_SymbolRef, function(compressor){\n            return this.undeclared();\n        });\n        def(AST_SymbolDeclaration, return_false);\n        def(AST_Object, function(compressor){\n            return any(this.properties, compressor);\n        });\n        def(AST_ObjectProperty, function(compressor){\n            return this.value.has_side_effects(compressor);\n        });\n        def(AST_Array, function(compressor){\n            return any(this.elements, compressor);\n        });\n        def(AST_Dot, function(compressor){\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.has_side_effects(compressor);\n        });\n        def(AST_Sub, function(compressor){\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.has_side_effects(compressor)\n                || this.property.has_side_effects(compressor);\n        });\n        def(AST_Sequence, function(compressor){\n            return this.expressions.some(function(expression, index) {\n                return expression.has_side_effects(compressor);\n            });\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"has_side_effects\", func);\n    });\n\n    // determine if expression is constant\n    (function(def){\n        function all(list) {\n            for (var i = list.length; --i >= 0;)\n                if (!list[i].is_constant_expression())\n                    return false;\n            return true;\n        }\n        def(AST_Node, return_false);\n        def(AST_Constant, return_true);\n        def(AST_Unary, function(){\n            return this.expression.is_constant_expression();\n        });\n        def(AST_Binary, function(){\n            return this.left.is_constant_expression() && this.right.is_constant_expression();\n        });\n        def(AST_Array, function(){\n            return all(this.elements);\n        });\n        def(AST_Object, function(){\n            return all(this.properties);\n        });\n        def(AST_ObjectProperty, function(){\n            return this.value.is_constant_expression();\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"is_constant_expression\", func);\n    });\n\n    // tell me if a statement aborts\n    function aborts(thing) {\n        return thing && thing.aborts();\n    };\n    (function(def){\n        def(AST_Statement, return_null);\n        def(AST_Jump, return_this);\n        function block_aborts(){\n            var n = this.body.length;\n            return n > 0 && aborts(this.body[n - 1]);\n        };\n        def(AST_BlockStatement, block_aborts);\n        def(AST_SwitchBranch, block_aborts);\n        def(AST_If, function(){\n            return this.alternative && aborts(this.body) && aborts(this.alternative) && this;\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"aborts\", func);\n    });\n\n    /* -----[ optimizers ]----- */\n\n    OPT(AST_Directive, function(self, compressor){\n        if (compressor.has_directive(self.value) !== self) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        return self;\n    });\n\n    OPT(AST_Debugger, function(self, compressor){\n        if (compressor.option(\"drop_debugger\"))\n            return make_node(AST_EmptyStatement, self);\n        return self;\n    });\n\n    OPT(AST_LabeledStatement, function(self, compressor){\n        if (self.body instanceof AST_Break\n            && compressor.loopcontrol_target(self.body) === self.body) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        return self.label.references.length == 0 ? self.body : self;\n    });\n\n    OPT(AST_Block, function(self, compressor){\n        self.body = tighten_body(self.body, compressor);\n        return self;\n    });\n\n    OPT(AST_BlockStatement, function(self, compressor){\n        self.body = tighten_body(self.body, compressor);\n        switch (self.body.length) {\n          case 1: return self.body[0];\n          case 0: return make_node(AST_EmptyStatement, self);\n        }\n        return self;\n    });\n\n    AST_Scope.DEFMETHOD(\"drop_unused\", function(compressor){\n        if (!compressor.option(\"unused\")) return;\n        if (compressor.has_directive(\"use asm\")) return;\n        var self = this;\n        if (self.uses_eval || self.uses_with) return;\n        var drop_funcs = !(self instanceof AST_Toplevel) || compressor.toplevel.funcs;\n        var drop_vars = !(self instanceof AST_Toplevel) || compressor.toplevel.vars;\n        if (!drop_funcs && !drop_vars) return;\n        var assign_as_unused = !/keep_assign/.test(compressor.option(\"unused\"));\n        var in_use = [];\n        var in_use_ids = Object.create(null); // avoid expensive linear scans of in_use\n        if (self instanceof AST_Toplevel && compressor.top_retain) {\n            self.variables.each(function(def) {\n                if (compressor.top_retain(def) && !(def.id in in_use_ids)) {\n                    in_use_ids[def.id] = true;\n                    in_use.push(def);\n                }\n            });\n        }\n        var var_defs_by_id = new Dictionary();\n        var initializations = new Dictionary();\n        // pass 1: find out which symbols are directly used in\n        // this scope (not in nested scopes).\n        var scope = this;\n        var tw = new TreeWalker(function(node, descend){\n            if (node !== self) {\n                if (node instanceof AST_Defun) {\n                    if (!drop_funcs && scope === self) {\n                        var node_def = node.name.definition();\n                        if (!(node_def.id in in_use_ids)) {\n                            in_use_ids[node_def.id] = true;\n                            in_use.push(node_def);\n                        }\n                    }\n                    initializations.add(node.name.name, node);\n                    return true; // don't go in nested scopes\n                }\n                if (node instanceof AST_Definitions && scope === self) {\n                    node.definitions.forEach(function(def){\n                        var node_def = def.name.definition();\n                        if (def.name instanceof AST_SymbolVar) {\n                            var_defs_by_id.add(node_def.id, def);\n                        }\n                        if (!drop_vars) {\n                            if (!(node_def.id in in_use_ids)) {\n                                in_use_ids[node_def.id] = true;\n                                in_use.push(node_def);\n                            }\n                        }\n                        if (def.value) {\n                            initializations.add(def.name.name, def.value);\n                            if (def.value.has_side_effects(compressor)) {\n                                def.value.walk(tw);\n                            }\n                        }\n                    });\n                    return true;\n                }\n                if (assign_as_unused\n                    && node instanceof AST_Assign\n                    && node.operator == \"=\"\n                    && node.left instanceof AST_SymbolRef\n                    && scope === self) {\n                    node.right.walk(tw);\n                    return true;\n                }\n                if (node instanceof AST_SymbolRef) {\n                    var node_def = node.definition();\n                    if (!(node_def.id in in_use_ids)) {\n                        in_use_ids[node_def.id] = true;\n                        in_use.push(node_def);\n                    }\n                    return true;\n                }\n                if (node instanceof AST_Scope) {\n                    var save_scope = scope;\n                    scope = node;\n                    descend();\n                    scope = save_scope;\n                    return true;\n                }\n            }\n        });\n        self.walk(tw);\n        // pass 2: for every used symbol we need to walk its\n        // initialization code to figure out if it uses other\n        // symbols (that may not be in_use).\n        for (var i = 0; i < in_use.length; ++i) {\n            in_use[i].orig.forEach(function(decl){\n                // undeclared globals will be instanceof AST_SymbolRef\n                var init = initializations.get(decl.name);\n                if (init) init.forEach(function(init){\n                    var tw = new TreeWalker(function(node){\n                        if (node instanceof AST_SymbolRef) {\n                            var node_def = node.definition();\n                            if (!(node_def.id in in_use_ids)) {\n                                in_use_ids[node_def.id] = true;\n                                in_use.push(node_def);\n                            }\n                        }\n                    });\n                    init.walk(tw);\n                });\n            });\n        }\n        // pass 3: we should drop declarations not in_use\n        var tt = new TreeTransformer(\n            function before(node, descend, in_list) {\n                if (node instanceof AST_Function\n                    && node.name\n                    && !compressor.option(\"keep_fnames\")) {\n                    var def = node.name.definition();\n                    // any declarations with same name will overshadow\n                    // name of this anonymous function and can therefore\n                    // never be used anywhere\n                    if (!(def.id in in_use_ids) || def.orig.length > 1)\n                        node.name = null;\n                }\n                if (node instanceof AST_Lambda && !(node instanceof AST_Accessor)) {\n                    var trim = !compressor.option(\"keep_fargs\");\n                    for (var a = node.argnames, i = a.length; --i >= 0;) {\n                        var sym = a[i];\n                        if (!(sym.definition().id in in_use_ids)) {\n                            sym.__unused = true;\n                            if (trim) {\n                                a.pop();\n                                compressor[sym.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused function argument {name} [{file}:{line},{col}]\", template(sym));\n                            }\n                        }\n                        else {\n                            trim = false;\n                        }\n                    }\n                }\n                if (drop_funcs && node instanceof AST_Defun && node !== self) {\n                    if (!(node.name.definition().id in in_use_ids)) {\n                        compressor[node.name.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused function {name} [{file}:{line},{col}]\", template(node.name));\n                        return make_node(AST_EmptyStatement, node);\n                    }\n                    return node;\n                }\n                if (drop_vars && node instanceof AST_Definitions && !(tt.parent() instanceof AST_ForIn && tt.parent().init === node)) {\n                    // place uninitialized names at the start\n                    var body = [], head = [], tail = [];\n                    // for unused names whose initialization has\n                    // side effects, we can cascade the init. code\n                    // into the next one, or next statement.\n                    var side_effects = [];\n                    node.definitions.forEach(function(def) {\n                        if (def.value) def.value = def.value.transform(tt);\n                        var sym = def.name.definition();\n                        if (sym.id in in_use_ids) {\n                            if (def.name instanceof AST_SymbolVar) {\n                                var var_defs = var_defs_by_id.get(sym.id);\n                                if (var_defs.length > 1 && !def.value) {\n                                    compressor.warn(\"Dropping duplicated definition of variable {name} [{file}:{line},{col}]\", template(def.name));\n                                    remove(var_defs, def);\n                                    remove(sym.orig, def.name);\n                                    return;\n                                }\n                            }\n                            if (def.value) {\n                                if (side_effects.length > 0) {\n                                    if (tail.length > 0) {\n                                        merge_sequence(side_effects, def.value);\n                                        def.value = make_sequence(def.value, side_effects);\n                                    } else {\n                                        body.push(make_node(AST_SimpleStatement, node, {\n                                            body: make_sequence(node, side_effects)\n                                        }));\n                                    }\n                                    side_effects = [];\n                                }\n                                tail.push(def);\n                            } else {\n                                head.push(def);\n                            }\n                        } else if (sym.orig[0] instanceof AST_SymbolCatch) {\n                            var value = def.value && def.value.drop_side_effect_free(compressor);\n                            if (value) merge_sequence(side_effects, value);\n                            def.value = null;\n                            head.push(def);\n                        } else {\n                            var value = def.value && def.value.drop_side_effect_free(compressor);\n                            if (value) {\n                                compressor.warn(\"Side effects in initialization of unused variable {name} [{file}:{line},{col}]\", template(def.name));\n                                merge_sequence(side_effects, value);\n                            } else {\n                                compressor[def.name.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused variable {name} [{file}:{line},{col}]\", template(def.name));\n                            }\n                            remove(sym.orig, def.name);\n                        }\n                    });\n                    if (head.length == 0 && tail.length == 1 && tail[0].name instanceof AST_SymbolVar) {\n                        var var_defs = var_defs_by_id.get(tail[0].name.definition().id);\n                        if (var_defs.length > 1) {\n                            var def = tail.pop();\n                            compressor.warn(\"Converting duplicated definition of variable {name} to assignment [{file}:{line},{col}]\", template(def.name));\n                            remove(var_defs, def);\n                            remove(def.name.definition().orig, def.name);\n                            side_effects.unshift(make_node(AST_Assign, def, {\n                                operator: \"=\",\n                                left: make_node(AST_SymbolRef, def.name, def.name),\n                                right: def.value\n                            }));\n                        }\n                    }\n                    if (head.length > 0 || tail.length > 0) {\n                        node.definitions = head.concat(tail);\n                        body.push(node);\n                    }\n                    if (side_effects.length > 0) {\n                        body.push(make_node(AST_SimpleStatement, node, {\n                            body: make_sequence(node, side_effects)\n                        }));\n                    }\n                    switch (body.length) {\n                        case 0:\n                        return in_list ? MAP.skip : make_node(AST_EmptyStatement, node);\n                        case 1:\n                        return body[0];\n                        default:\n                        return in_list ? MAP.splice(body) : make_node(AST_BlockStatement, node, {\n                            body: body\n                        });\n                    }\n                }\n                if (drop_vars && assign_as_unused\n                    && node instanceof AST_Assign\n                    && node.operator == \"=\"\n                    && node.left instanceof AST_SymbolRef) {\n                    var def = node.left.definition();\n                    if (!(def.id in in_use_ids)\n                        && self.variables.get(def.name) === def) {\n                        return maintain_this_binding(tt.parent(), node, node.right.transform(tt));\n                    }\n                }\n                // certain combination of unused name + side effect leads to:\n                //    https://github.com/mishoo/UglifyJS2/issues/44\n                //    https://github.com/mishoo/UglifyJS2/issues/1830\n                //    https://github.com/mishoo/UglifyJS2/issues/1838\n                // that's an invalid AST.\n                // We fix it at this stage by moving the `var` outside the `for`.\n                if (node instanceof AST_For) {\n                    descend(node, this);\n                    if (node.init instanceof AST_BlockStatement) {\n                        var block = node.init;\n                        node.init = block.body.pop();\n                        block.body.push(node);\n                        return in_list ? MAP.splice(block.body) : block;\n                    } else if (node.init instanceof AST_SimpleStatement) {\n                        node.init = node.init.body;\n                    } else if (is_empty(node.init)) {\n                        node.init = null;\n                    }\n                    return node;\n                }\n                if (node instanceof AST_LabeledStatement && node.body instanceof AST_For) {\n                    descend(node, this);\n                    if (node.body instanceof AST_BlockStatement) {\n                        var block = node.body;\n                        node.body = block.body.pop();\n                        block.body.push(node);\n                        return in_list ? MAP.splice(block.body) : block;\n                    }\n                    return node;\n                }\n                if (node instanceof AST_Scope && node !== self)\n                    return node;\n\n                function template(sym) {\n                    return {\n                        name : sym.name,\n                        file : sym.start.file,\n                        line : sym.start.line,\n                        col  : sym.start.col\n                    };\n                }\n            }\n        );\n        self.transform(tt);\n    });\n\n    AST_Scope.DEFMETHOD(\"hoist_declarations\", function(compressor){\n        var self = this;\n        if (compressor.has_directive(\"use asm\")) return self;\n        var hoist_funs = compressor.option(\"hoist_funs\");\n        var hoist_vars = compressor.option(\"hoist_vars\");\n        if (hoist_funs || hoist_vars) {\n            var dirs = [];\n            var hoisted = [];\n            var vars = new Dictionary(), vars_found = 0, var_decl = 0;\n            // let's count var_decl first, we seem to waste a lot of\n            // space if we hoist `var` when there's only one.\n            self.walk(new TreeWalker(function(node){\n                if (node instanceof AST_Scope && node !== self)\n                    return true;\n                if (node instanceof AST_Var) {\n                    ++var_decl;\n                    return true;\n                }\n            }));\n            hoist_vars = hoist_vars && var_decl > 1;\n            var tt = new TreeTransformer(\n                function before(node) {\n                    if (node !== self) {\n                        if (node instanceof AST_Directive) {\n                            dirs.push(node);\n                            return make_node(AST_EmptyStatement, node);\n                        }\n                        if (hoist_funs && node instanceof AST_Defun\n                            && (tt.parent() === self || !compressor.has_directive(\"use strict\"))) {\n                            hoisted.push(node);\n                            return make_node(AST_EmptyStatement, node);\n                        }\n                        if (hoist_vars && node instanceof AST_Var) {\n                            node.definitions.forEach(function(def){\n                                vars.set(def.name.name, def);\n                                ++vars_found;\n                            });\n                            var seq = node.to_assignments(compressor);\n                            var p = tt.parent();\n                            if (p instanceof AST_ForIn && p.init === node) {\n                                if (seq == null) {\n                                    var def = node.definitions[0].name;\n                                    return make_node(AST_SymbolRef, def, def);\n                                }\n                                return seq;\n                            }\n                            if (p instanceof AST_For && p.init === node) {\n                                return seq;\n                            }\n                            if (!seq) return make_node(AST_EmptyStatement, node);\n                            return make_node(AST_SimpleStatement, node, {\n                                body: seq\n                            });\n                        }\n                        if (node instanceof AST_Scope)\n                            return node; // to avoid descending in nested scopes\n                    }\n                }\n            );\n            self = self.transform(tt);\n            if (vars_found > 0) {\n                // collect only vars which don't show up in self's arguments list\n                var defs = [];\n                vars.each(function(def, name){\n                    if (self instanceof AST_Lambda\n                        && find_if(function(x){ return x.name == def.name.name },\n                                   self.argnames)) {\n                        vars.del(name);\n                    } else {\n                        def = def.clone();\n                        def.value = null;\n                        defs.push(def);\n                        vars.set(name, def);\n                    }\n                });\n                if (defs.length > 0) {\n                    // try to merge in assignments\n                    for (var i = 0; i < self.body.length;) {\n                        if (self.body[i] instanceof AST_SimpleStatement) {\n                            var expr = self.body[i].body, sym, assign;\n                            if (expr instanceof AST_Assign\n                                && expr.operator == \"=\"\n                                && (sym = expr.left) instanceof AST_Symbol\n                                && vars.has(sym.name))\n                            {\n                                var def = vars.get(sym.name);\n                                if (def.value) break;\n                                def.value = expr.right;\n                                remove(defs, def);\n                                defs.push(def);\n                                self.body.splice(i, 1);\n                                continue;\n                            }\n                            if (expr instanceof AST_Sequence\n                                && (assign = expr.expressions[0]) instanceof AST_Assign\n                                && assign.operator == \"=\"\n                                && (sym = assign.left) instanceof AST_Symbol\n                                && vars.has(sym.name))\n                            {\n                                var def = vars.get(sym.name);\n                                if (def.value) break;\n                                def.value = assign.right;\n                                remove(defs, def);\n                                defs.push(def);\n                                self.body[i].body = make_sequence(expr, expr.expressions.slice(1));\n                                continue;\n                            }\n                        }\n                        if (self.body[i] instanceof AST_EmptyStatement) {\n                            self.body.splice(i, 1);\n                            continue;\n                        }\n                        if (self.body[i] instanceof AST_BlockStatement) {\n                            var tmp = [ i, 1 ].concat(self.body[i].body);\n                            self.body.splice.apply(self.body, tmp);\n                            continue;\n                        }\n                        break;\n                    }\n                    defs = make_node(AST_Var, self, {\n                        definitions: defs\n                    });\n                    hoisted.push(defs);\n                };\n            }\n            self.body = dirs.concat(hoisted, self.body);\n        }\n        return self;\n    });\n\n    // drop_side_effect_free()\n    // remove side-effect-free parts which only affects return value\n    (function(def){\n        // Drop side-effect-free elements from an array of expressions.\n        // Returns an array of expressions with side-effects or null\n        // if all elements were dropped. Note: original array may be\n        // returned if nothing changed.\n        function trim(nodes, compressor, first_in_statement) {\n            var len = nodes.length;\n            if (!len) return null;\n            var ret = [], changed = false;\n            for (var i = 0; i < len; i++) {\n                var node = nodes[i].drop_side_effect_free(compressor, first_in_statement);\n                changed |= node !== nodes[i];\n                if (node) {\n                    merge_sequence(ret, node);\n                    first_in_statement = false;\n                }\n            }\n            return changed ? ret.length ? ret : null : nodes;\n        }\n\n        def(AST_Node, return_this);\n        def(AST_Constant, return_null);\n        def(AST_This, return_null);\n        def(AST_Call, function(compressor, first_in_statement){\n            if (!this.has_pure_annotation(compressor) && compressor.pure_funcs(this)) {\n                if (this.expression instanceof AST_Function\n                    && (!this.expression.name || !this.expression.name.definition().references.length)) {\n                    var node = this.clone();\n                    node.expression.process_expression(false, compressor);\n                    return node;\n                }\n                return this;\n            }\n            if (this.pure) {\n                compressor.warn(\"Dropping __PURE__ call [{file}:{line},{col}]\", this.start);\n                this.pure.value = this.pure.value.replace(/[@#]__PURE__/g, ' ');\n            }\n            var args = trim(this.args, compressor, first_in_statement);\n            return args && make_sequence(this, args);\n        });\n        def(AST_Accessor, return_null);\n        def(AST_Function, return_null);\n        def(AST_Binary, function(compressor, first_in_statement){\n            var right = this.right.drop_side_effect_free(compressor);\n            if (!right) return this.left.drop_side_effect_free(compressor, first_in_statement);\n            switch (this.operator) {\n              case \"&&\":\n              case \"||\":\n                if (right === this.right) return this;\n                var node = this.clone();\n                node.right = right;\n                return node;\n              default:\n                var left = this.left.drop_side_effect_free(compressor, first_in_statement);\n                if (!left) return this.right.drop_side_effect_free(compressor, first_in_statement);\n                return make_sequence(this, [ left, right ]);\n            }\n        });\n        def(AST_Assign, return_this);\n        def(AST_Conditional, function(compressor){\n            var consequent = this.consequent.drop_side_effect_free(compressor);\n            var alternative = this.alternative.drop_side_effect_free(compressor);\n            if (consequent === this.consequent && alternative === this.alternative) return this;\n            if (!consequent) return alternative ? make_node(AST_Binary, this, {\n                operator: \"||\",\n                left: this.condition,\n                right: alternative\n            }) : this.condition.drop_side_effect_free(compressor);\n            if (!alternative) return make_node(AST_Binary, this, {\n                operator: \"&&\",\n                left: this.condition,\n                right: consequent\n            });\n            var node = this.clone();\n            node.consequent = consequent;\n            node.alternative = alternative;\n            return node;\n        });\n        def(AST_Unary, function(compressor, first_in_statement){\n            if (unary_side_effects(this.operator)) return this;\n            if (this.operator == \"typeof\" && this.expression instanceof AST_SymbolRef) return null;\n            var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n            if (first_in_statement\n                && this instanceof AST_UnaryPrefix\n                && is_iife_call(expression)) {\n                if (expression === this.expression && this.operator.length === 1) return this;\n                return make_node(AST_UnaryPrefix, this, {\n                    operator: this.operator.length === 1 ? this.operator : \"!\",\n                    expression: expression\n                });\n            }\n            return expression;\n        });\n        def(AST_SymbolRef, function() {\n            return this.undeclared() ? this : null;\n        });\n        def(AST_Object, function(compressor, first_in_statement){\n            var values = trim(this.properties, compressor, first_in_statement);\n            return values && make_sequence(this, values);\n        });\n        def(AST_ObjectProperty, function(compressor, first_in_statement){\n            return this.value.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def(AST_Array, function(compressor, first_in_statement){\n            var values = trim(this.elements, compressor, first_in_statement);\n            return values && make_sequence(this, values);\n        });\n        def(AST_Dot, function(compressor, first_in_statement){\n            if (this.expression.may_throw_on_access(compressor)) return this;\n            return this.expression.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def(AST_Sub, function(compressor, first_in_statement){\n            if (this.expression.may_throw_on_access(compressor)) return this;\n            var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n            if (!expression) return this.property.drop_side_effect_free(compressor, first_in_statement);\n            var property = this.property.drop_side_effect_free(compressor);\n            if (!property) return expression;\n            return make_sequence(this, [ expression, property ]);\n        });\n        def(AST_Sequence, function(compressor){\n            var last = this.expressions[this.expressions.length - 1];\n            var expr = last.drop_side_effect_free(compressor);\n            if (expr === last) return this;\n            var expressions = this.expressions.slice(0, -1);\n            if (expr) merge_sequence(expressions, expr);\n            return make_sequence(this, expressions);\n        });\n    })(function(node, func){\n        node.DEFMETHOD(\"drop_side_effect_free\", func);\n    });\n\n    OPT(AST_SimpleStatement, function(self, compressor){\n        if (compressor.option(\"side_effects\")) {\n            var body = self.body;\n            var node = body.drop_side_effect_free(compressor, true);\n            if (!node) {\n                compressor.warn(\"Dropping side-effect-free statement [{file}:{line},{col}]\", self.start);\n                return make_node(AST_EmptyStatement, self);\n            }\n            if (node !== body) {\n                return make_node(AST_SimpleStatement, self, { body: node });\n            }\n        }\n        return self;\n    });\n\n    OPT(AST_DWLoop, function(self, compressor){\n        if (!compressor.option(\"loops\")) return self;\n        var cond = self.condition.evaluate(compressor);\n        if (cond !== self.condition) {\n            if (cond) {\n                return make_node(AST_For, self, {\n                    body: self.body\n                });\n            }\n            if (compressor.option(\"dead_code\") && self instanceof AST_While) {\n                var a = [];\n                extract_declarations_from_unreachable_code(compressor, self.body, a);\n                return make_node(AST_BlockStatement, self, { body: a }).optimize(compressor);\n            }\n            if (self instanceof AST_Do) {\n                var has_loop_control = false;\n                var tw = new TreeWalker(function(node) {\n                    if (node instanceof AST_Scope || has_loop_control) return true;\n                    if (node instanceof AST_LoopControl && tw.loopcontrol_target(node) === self)\n                        return has_loop_control = true;\n                });\n                var parent = compressor.parent();\n                (parent instanceof AST_LabeledStatement ? parent : self).walk(tw);\n                if (!has_loop_control) return self.body;\n            }\n        }\n        if (self instanceof AST_While) {\n            return make_node(AST_For, self, self).optimize(compressor);\n        }\n        return self;\n    });\n\n    function if_break_in_loop(self, compressor) {\n        function drop_it(rest) {\n            rest = as_statement_array(rest);\n            if (self.body instanceof AST_BlockStatement) {\n                self.body = self.body.clone();\n                self.body.body = rest.concat(self.body.body.slice(1));\n                self.body = self.body.transform(compressor);\n            } else {\n                self.body = make_node(AST_BlockStatement, self.body, {\n                    body: rest\n                }).transform(compressor);\n            }\n            if_break_in_loop(self, compressor);\n        }\n        var first = self.body instanceof AST_BlockStatement ? self.body.body[0] : self.body;\n        if (first instanceof AST_If) {\n            if (first.body instanceof AST_Break\n                && compressor.loopcontrol_target(first.body) === compressor.self()) {\n                if (self.condition) {\n                    self.condition = make_node(AST_Binary, self.condition, {\n                        left: self.condition,\n                        operator: \"&&\",\n                        right: first.condition.negate(compressor),\n                    });\n                } else {\n                    self.condition = first.condition.negate(compressor);\n                }\n                drop_it(first.alternative);\n            }\n            else if (first.alternative instanceof AST_Break\n                     && compressor.loopcontrol_target(first.alternative) === compressor.self()) {\n                if (self.condition) {\n                    self.condition = make_node(AST_Binary, self.condition, {\n                        left: self.condition,\n                        operator: \"&&\",\n                        right: first.condition,\n                    });\n                } else {\n                    self.condition = first.condition;\n                }\n                drop_it(first.body);\n            }\n        }\n    };\n\n    OPT(AST_For, function(self, compressor){\n        if (!compressor.option(\"loops\")) return self;\n        if (self.condition) {\n            var cond = self.condition.evaluate(compressor);\n            if (compressor.option(\"dead_code\") && !cond) {\n                var a = [];\n                if (self.init instanceof AST_Statement) {\n                    a.push(self.init);\n                }\n                else if (self.init) {\n                    a.push(make_node(AST_SimpleStatement, self.init, {\n                        body: self.init\n                    }));\n                }\n                extract_declarations_from_unreachable_code(compressor, self.body, a);\n                return make_node(AST_BlockStatement, self, { body: a }).optimize(compressor);\n            }\n            if (cond !== self.condition) {\n                cond = make_node_from_constant(cond, self.condition).transform(compressor);\n                self.condition = best_of_expression(cond, self.condition);\n            }\n        }\n        if_break_in_loop(self, compressor);\n        return self;\n    });\n\n    OPT(AST_If, function(self, compressor){\n        if (is_empty(self.alternative)) self.alternative = null;\n\n        if (!compressor.option(\"conditionals\")) return self;\n        // if condition can be statically determined, warn and drop\n        // one of the blocks.  note, statically determined implies\n        // “has no side effects”; also it doesn't work for cases like\n        // `x && true`, though it probably should.\n        var cond = self.condition.evaluate(compressor);\n        if (cond !== self.condition) {\n            if (cond) {\n                compressor.warn(\"Condition always true [{file}:{line},{col}]\", self.condition.start);\n                if (compressor.option(\"dead_code\")) {\n                    var a = [];\n                    if (self.alternative) {\n                        extract_declarations_from_unreachable_code(compressor, self.alternative, a);\n                    }\n                    a.push(self.body);\n                    return make_node(AST_BlockStatement, self, { body: a }).optimize(compressor);\n                }\n            } else {\n                compressor.warn(\"Condition always false [{file}:{line},{col}]\", self.condition.start);\n                if (compressor.option(\"dead_code\")) {\n                    var a = [];\n                    extract_declarations_from_unreachable_code(compressor, self.body, a);\n                    if (self.alternative) a.push(self.alternative);\n                    return make_node(AST_BlockStatement, self, { body: a }).optimize(compressor);\n                }\n            }\n            cond = make_node_from_constant(cond, self.condition).transform(compressor);\n            self.condition = best_of_expression(cond, self.condition);\n        }\n        var negated = self.condition.negate(compressor);\n        var self_condition_length = self.condition.print_to_string().length;\n        var negated_length = negated.print_to_string().length;\n        var negated_is_best = negated_length < self_condition_length;\n        if (self.alternative && negated_is_best) {\n            negated_is_best = false; // because we already do the switch here.\n            // no need to swap values of self_condition_length and negated_length\n            // here because they are only used in an equality comparison later on.\n            self.condition = negated;\n            var tmp = self.body;\n            self.body = self.alternative || make_node(AST_EmptyStatement, self);\n            self.alternative = tmp;\n        }\n        if (is_empty(self.body) && is_empty(self.alternative)) {\n            return make_node(AST_SimpleStatement, self.condition, {\n                body: self.condition.clone()\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_SimpleStatement\n            && self.alternative instanceof AST_SimpleStatement) {\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Conditional, self, {\n                    condition   : self.condition,\n                    consequent  : self.body.body,\n                    alternative : self.alternative.body\n                })\n            }).optimize(compressor);\n        }\n        if (is_empty(self.alternative) && self.body instanceof AST_SimpleStatement) {\n            if (self_condition_length === negated_length && !negated_is_best\n                && self.condition instanceof AST_Binary && self.condition.operator == \"||\") {\n                // although the code length of self.condition and negated are the same,\n                // negated does not require additional surrounding parentheses.\n                // see https://github.com/mishoo/UglifyJS2/issues/979\n                negated_is_best = true;\n            }\n            if (negated_is_best) return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"||\",\n                    left     : negated,\n                    right    : self.body.body\n                })\n            }).optimize(compressor);\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"&&\",\n                    left     : self.condition,\n                    right    : self.body.body\n                })\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_EmptyStatement\n            && self.alternative instanceof AST_SimpleStatement) {\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"||\",\n                    left     : self.condition,\n                    right    : self.alternative.body\n                })\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_Exit\n            && self.alternative instanceof AST_Exit\n            && self.body.TYPE == self.alternative.TYPE) {\n            return make_node(self.body.CTOR, self, {\n                value: make_node(AST_Conditional, self, {\n                    condition   : self.condition,\n                    consequent  : self.body.value || make_node(AST_Undefined, self.body),\n                    alternative : self.alternative.value || make_node(AST_Undefined, self.alternative)\n                }).transform(compressor)\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_If\n            && !self.body.alternative\n            && !self.alternative) {\n            self = make_node(AST_If, self, {\n                condition: make_node(AST_Binary, self.condition, {\n                    operator: \"&&\",\n                    left: self.condition,\n                    right: self.body.condition\n                }),\n                body: self.body.body,\n                alternative: null\n            });\n        }\n        if (aborts(self.body)) {\n            if (self.alternative) {\n                var alt = self.alternative;\n                self.alternative = null;\n                return make_node(AST_BlockStatement, self, {\n                    body: [ self, alt ]\n                }).optimize(compressor);\n            }\n        }\n        if (aborts(self.alternative)) {\n            var body = self.body;\n            self.body = self.alternative;\n            self.condition = negated_is_best ? negated : self.condition.negate(compressor);\n            self.alternative = null;\n            return make_node(AST_BlockStatement, self, {\n                body: [ self, body ]\n            }).optimize(compressor);\n        }\n        return self;\n    });\n\n    OPT(AST_Switch, function(self, compressor){\n        if (!compressor.option(\"switches\")) return self;\n        var branch;\n        var value = self.expression.evaluate(compressor);\n        if (value !== self.expression) {\n            var expression = make_node_from_constant(value, self.expression).transform(compressor);\n            self.expression = best_of_expression(expression, self.expression);\n        }\n        if (!compressor.option(\"dead_code\")) return self;\n        var decl = [];\n        var body = [];\n        var default_branch;\n        var exact_match;\n        for (var i = 0, len = self.body.length; i < len && !exact_match; i++) {\n            branch = self.body[i];\n            if (branch instanceof AST_Default) {\n                if (!default_branch) {\n                    default_branch = branch;\n                } else {\n                    eliminate_branch(branch, body[body.length - 1]);\n                }\n            } else if (value !== self.expression) {\n                var exp = branch.expression.evaluate(compressor);\n                if (exp === value) {\n                    exact_match = branch;\n                    if (default_branch) {\n                        var default_index = body.indexOf(default_branch);\n                        body.splice(default_index, 1);\n                        eliminate_branch(default_branch, body[default_index - 1]);\n                        default_branch = null;\n                    }\n                } else if (exp !== branch.expression) {\n                    eliminate_branch(branch, body[body.length - 1]);\n                    continue;\n                }\n            }\n            if (aborts(branch)) {\n                var prev = body[body.length - 1];\n                if (aborts(prev) && prev.body.length == branch.body.length\n                    && make_node(AST_BlockStatement, prev, prev).equivalent_to(make_node(AST_BlockStatement, branch, branch))) {\n                    prev.body = [];\n                }\n            }\n            body.push(branch);\n        }\n        while (i < len) eliminate_branch(self.body[i++], body[body.length - 1]);\n        if (body.length > 0) {\n            body[0].body = decl.concat(body[0].body);\n        }\n        self.body = body;\n        while (branch = body[body.length - 1]) {\n            var stat = branch.body[branch.body.length - 1];\n            if (stat instanceof AST_Break && compressor.loopcontrol_target(stat) === self)\n                branch.body.pop();\n            if (branch.body.length || branch instanceof AST_Case\n                && (default_branch || branch.expression.has_side_effects(compressor))) break;\n            if (body.pop() === default_branch) default_branch = null;\n        }\n        if (body.length == 0) {\n            return make_node(AST_BlockStatement, self, {\n                body: decl.concat(make_node(AST_SimpleStatement, self.expression, {\n                    body: self.expression\n                }))\n            }).optimize(compressor);\n        }\n        if (body.length == 1 && (body[0] === exact_match || body[0] === default_branch)) {\n            var has_break = false;\n            var tw = new TreeWalker(function(node) {\n                if (has_break\n                    || node instanceof AST_Lambda\n                    || node instanceof AST_SimpleStatement) return true;\n                if (node instanceof AST_Break && tw.loopcontrol_target(node) === self)\n                    has_break = true;\n            });\n            self.walk(tw);\n            if (!has_break) {\n                body = body[0].body.slice();\n                body.unshift(make_node(AST_SimpleStatement, self.expression, {\n                    body: self.expression\n                }));\n                return make_node(AST_BlockStatement, self, {\n                    body: body\n                }).optimize(compressor);\n            }\n        }\n        return self;\n\n        function eliminate_branch(branch, prev) {\n            if (prev && !aborts(prev)) {\n                prev.body = prev.body.concat(branch.body);\n            } else {\n                extract_declarations_from_unreachable_code(compressor, branch, decl);\n            }\n        }\n    });\n\n    OPT(AST_Try, function(self, compressor){\n        self.body = tighten_body(self.body, compressor);\n        if (self.bcatch && self.bfinally && all(self.bfinally.body, is_empty)) self.bfinally = null;\n        if (all(self.body, is_empty)) {\n            var body = [];\n            if (self.bcatch) extract_declarations_from_unreachable_code(compressor, self.bcatch, body);\n            if (self.bfinally) body = body.concat(self.bfinally.body);\n            return make_node(AST_BlockStatement, self, {\n                body: body\n            }).optimize(compressor);\n        }\n        return self;\n    });\n\n    AST_Definitions.DEFMETHOD(\"remove_initializers\", function(){\n        this.definitions.forEach(function(def){ def.value = null });\n    });\n\n    AST_Definitions.DEFMETHOD(\"to_assignments\", function(compressor){\n        var reduce_vars = compressor.option(\"reduce_vars\");\n        var assignments = this.definitions.reduce(function(a, def){\n            if (def.value) {\n                var name = make_node(AST_SymbolRef, def.name, def.name);\n                a.push(make_node(AST_Assign, def, {\n                    operator : \"=\",\n                    left     : name,\n                    right    : def.value\n                }));\n                if (reduce_vars) name.definition().fixed = false;\n            }\n            return a;\n        }, []);\n        if (assignments.length == 0) return null;\n        return make_sequence(this, assignments);\n    });\n\n    OPT(AST_Definitions, function(self, compressor){\n        if (self.definitions.length == 0)\n            return make_node(AST_EmptyStatement, self);\n        return self;\n    });\n\n    OPT(AST_Call, function(self, compressor){\n        var exp = self.expression;\n        if (compressor.option(\"reduce_vars\")\n            && exp instanceof AST_SymbolRef) {\n            var def = exp.definition();\n            var fixed = exp.fixed_value();\n            if (fixed instanceof AST_Defun) {\n                def.fixed = fixed = make_node(AST_Function, fixed, fixed).clone(true);\n            }\n            if (fixed instanceof AST_Function) {\n                exp = fixed;\n                if (compressor.option(\"unused\")\n                    && def.references.length == 1\n                    && !(def.scope.uses_arguments\n                        && def.orig[0] instanceof AST_SymbolFunarg)\n                    && !def.scope.uses_eval\n                    && compressor.find_parent(AST_Scope) === def.scope) {\n                    self.expression = exp;\n                }\n            }\n        }\n        if (compressor.option(\"unused\")\n            && exp instanceof AST_Function\n            && !exp.uses_arguments\n            && !exp.uses_eval) {\n            var pos = 0, last = 0;\n            for (var i = 0, len = self.args.length; i < len; i++) {\n                var trim = i >= exp.argnames.length;\n                if (trim || exp.argnames[i].__unused) {\n                    var node = self.args[i].drop_side_effect_free(compressor);\n                    if (node) {\n                        self.args[pos++] = node;\n                    } else if (!trim) {\n                        self.args[pos++] = make_node(AST_Number, self.args[i], {\n                            value: 0\n                        });\n                        continue;\n                    }\n                } else {\n                    self.args[pos++] = self.args[i];\n                }\n                last = pos;\n            }\n            self.args.length = last;\n        }\n        if (compressor.option(\"unsafe\")) {\n            if (exp instanceof AST_SymbolRef && exp.undeclared()) {\n                switch (exp.name) {\n                  case \"Array\":\n                    if (self.args.length != 1) {\n                        return make_node(AST_Array, self, {\n                            elements: self.args\n                        }).optimize(compressor);\n                    }\n                    break;\n                  case \"Object\":\n                    if (self.args.length == 0) {\n                        return make_node(AST_Object, self, {\n                            properties: []\n                        });\n                    }\n                    break;\n                  case \"String\":\n                    if (self.args.length == 0) return make_node(AST_String, self, {\n                        value: \"\"\n                    });\n                    if (self.args.length <= 1) return make_node(AST_Binary, self, {\n                        left: self.args[0],\n                        operator: \"+\",\n                        right: make_node(AST_String, self, { value: \"\" })\n                    }).optimize(compressor);\n                    break;\n                  case \"Number\":\n                    if (self.args.length == 0) return make_node(AST_Number, self, {\n                        value: 0\n                    });\n                    if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {\n                        expression: self.args[0],\n                        operator: \"+\"\n                    }).optimize(compressor);\n                  case \"Boolean\":\n                    if (self.args.length == 0) return make_node(AST_False, self);\n                    if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {\n                        expression: make_node(AST_UnaryPrefix, self, {\n                            expression: self.args[0],\n                            operator: \"!\"\n                        }),\n                        operator: \"!\"\n                    }).optimize(compressor);\n                    break;\n                }\n            }\n            else if (exp instanceof AST_Dot && exp.property == \"toString\" && self.args.length == 0) {\n                return make_node(AST_Binary, self, {\n                    left: make_node(AST_String, self, { value: \"\" }),\n                    operator: \"+\",\n                    right: exp.expression\n                }).optimize(compressor);\n            }\n            else if (exp instanceof AST_Dot && exp.expression instanceof AST_Array && exp.property == \"join\") EXIT: {\n                var separator;\n                if (self.args.length > 0) {\n                    separator = self.args[0].evaluate(compressor);\n                    if (separator === self.args[0]) break EXIT; // not a constant\n                }\n                var elements = [];\n                var consts = [];\n                exp.expression.elements.forEach(function(el) {\n                    var value = el.evaluate(compressor);\n                    if (value !== el) {\n                        consts.push(value);\n                    } else {\n                        if (consts.length > 0) {\n                            elements.push(make_node(AST_String, self, {\n                                value: consts.join(separator)\n                            }));\n                            consts.length = 0;\n                        }\n                        elements.push(el);\n                    }\n                });\n                if (consts.length > 0) {\n                    elements.push(make_node(AST_String, self, {\n                        value: consts.join(separator)\n                    }));\n                }\n                if (elements.length == 0) return make_node(AST_String, self, { value: \"\" });\n                if (elements.length == 1) {\n                    if (elements[0].is_string(compressor)) {\n                        return elements[0];\n                    }\n                    return make_node(AST_Binary, elements[0], {\n                        operator : \"+\",\n                        left     : make_node(AST_String, self, { value: \"\" }),\n                        right    : elements[0]\n                    });\n                }\n                if (separator == \"\") {\n                    var first;\n                    if (elements[0].is_string(compressor)\n                        || elements[1].is_string(compressor)) {\n                        first = elements.shift();\n                    } else {\n                        first = make_node(AST_String, self, { value: \"\" });\n                    }\n                    return elements.reduce(function(prev, el){\n                        return make_node(AST_Binary, el, {\n                            operator : \"+\",\n                            left     : prev,\n                            right    : el\n                        });\n                    }, first).optimize(compressor);\n                }\n                // need this awkward cloning to not affect original element\n                // best_of will decide which one to get through.\n                var node = self.clone();\n                node.expression = node.expression.clone();\n                node.expression.expression = node.expression.expression.clone();\n                node.expression.expression.elements = elements;\n                return best_of(compressor, self, node);\n            }\n            else if (exp instanceof AST_Dot && exp.expression.is_string(compressor) && exp.property == \"charAt\") {\n                var arg = self.args[0];\n                var index = arg ? arg.evaluate(compressor) : 0;\n                if (index !== arg) {\n                    return make_node(AST_Sub, exp, {\n                        expression: exp.expression,\n                        property: make_node_from_constant(index | 0, arg || exp)\n                    }).optimize(compressor);\n                }\n            }\n        }\n        if (compressor.option(\"unsafe_Func\")\n            && exp instanceof AST_SymbolRef\n            && exp.undeclared()\n            && exp.name == \"Function\") {\n            // new Function() => function(){}\n            if (self.args.length == 0) return make_node(AST_Function, self, {\n                argnames: [],\n                body: []\n            });\n            if (all(self.args, function(x) {\n                return x instanceof AST_String;\n            })) {\n                // quite a corner-case, but we can handle it:\n                //   https://github.com/mishoo/UglifyJS2/issues/203\n                // if the code argument is a constant, then we can minify it.\n                try {\n                    var code = \"NaN(function(\" + self.args.slice(0, -1).map(function(arg) {\n                        return arg.value;\n                    }).join(\",\") + \"){\" + self.args[self.args.length - 1].value + \"})\";\n                    var ast = parse(code);\n                    var mangle = { ie8: compressor.option(\"ie8\") };\n                    ast.figure_out_scope(mangle);\n                    var comp = new Compressor(compressor.options);\n                    ast = ast.transform(comp);\n                    ast.figure_out_scope(mangle);\n                    ast.mangle_names();\n                    var fun;\n                    ast.walk(new TreeWalker(function(node) {\n                        if (fun) return true;\n                        if (node instanceof AST_Lambda) {\n                            fun = node;\n                            return true;\n                        }\n                    }));\n                    var args = fun.argnames.map(function(arg, i) {\n                        return make_node(AST_String, self.args[i], {\n                            value: arg.print_to_string()\n                        });\n                    });\n                    var code = OutputStream();\n                    AST_BlockStatement.prototype._codegen.call(fun, fun, code);\n                    code = code.toString().replace(/^\\{|\\}$/g, \"\");\n                    args.push(make_node(AST_String, self.args[self.args.length - 1], {\n                        value: code\n                    }));\n                    self.args = args;\n                    return self;\n                } catch (ex) {\n                    if (ex instanceof JS_Parse_Error) {\n                        compressor.warn(\"Error parsing code passed to new Function [{file}:{line},{col}]\", self.args[self.args.length - 1].start);\n                        compressor.warn(ex.toString());\n                    } else {\n                        throw ex;\n                    }\n                }\n            }\n        }\n        if (exp instanceof AST_Function) {\n            if (exp.body[0] instanceof AST_Return) {\n                var value = exp.body[0].value;\n                if (!value || value.is_constant_expression()) {\n                    var args = self.args.concat(value || make_node(AST_Undefined, self));\n                    return make_sequence(self, args).transform(compressor);\n                }\n            }\n            if (compressor.option(\"side_effects\") && all(exp.body, is_empty)) {\n                var args = self.args.concat(make_node(AST_Undefined, self));\n                return make_sequence(self, args).transform(compressor);\n            }\n        }\n        if (compressor.option(\"drop_console\")) {\n            if (exp instanceof AST_PropAccess) {\n                var name = exp.expression;\n                while (name.expression) {\n                    name = name.expression;\n                }\n                if (name instanceof AST_SymbolRef\n                    && name.name == \"console\"\n                    && name.undeclared()) {\n                    return make_node(AST_Undefined, self).optimize(compressor);\n                }\n            }\n        }\n        if (compressor.option(\"negate_iife\")\n            && compressor.parent() instanceof AST_SimpleStatement\n            && is_iife_call(self)) {\n            return self.negate(compressor, true);\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    OPT(AST_New, function(self, compressor){\n        if (compressor.option(\"unsafe\")) {\n            var exp = self.expression;\n            if (exp instanceof AST_SymbolRef && exp.undeclared()) {\n                switch (exp.name) {\n                  case \"Object\":\n                  case \"RegExp\":\n                  case \"Function\":\n                  case \"Error\":\n                  case \"Array\":\n                    return make_node(AST_Call, self, self).transform(compressor);\n                }\n            }\n        }\n        return self;\n    });\n\n    OPT(AST_Sequence, function(self, compressor){\n        if (!compressor.option(\"side_effects\")) return self;\n        var expressions = [];\n        filter_for_side_effects();\n        var end = expressions.length - 1;\n        trim_right_for_undefined();\n        if (end > 0 && compressor.option(\"cascade\")) trim_left_for_assignment();\n        if (end == 0) {\n            self = maintain_this_binding(compressor.parent(), self, expressions[0]);\n            if (!(self instanceof AST_Sequence)) self = self.optimize(compressor);\n            return self;\n        }\n        self.expressions = expressions;\n        return self;\n\n        function filter_for_side_effects() {\n            var first = first_in_statement(compressor);\n            var last = self.expressions.length - 1;\n            self.expressions.forEach(function(expr, index) {\n                if (index < last) expr = expr.drop_side_effect_free(compressor, first);\n                if (expr) {\n                    merge_sequence(expressions, expr);\n                    first = false;\n                }\n            });\n        }\n\n        function trim_right_for_undefined() {\n            while (end > 0 && is_undefined(expressions[end], compressor)) end--;\n            if (end < expressions.length - 1) {\n                expressions[end] = make_node(AST_UnaryPrefix, self, {\n                    operator   : \"void\",\n                    expression : expressions[end]\n                });\n                expressions.length = end + 1;\n            }\n        }\n\n        function trim_left_for_assignment() {\n            for (var i = 0, j = 1; j <= end; j++) {\n                var left = expressions[i];\n                var cdr = expressions[j];\n                if (left instanceof AST_Assign\n                    && !left.left.has_side_effects(compressor)) {\n                    left = left.left;\n                } else if (left instanceof AST_Unary\n                    && (left.operator == \"++\" || left.operator == \"--\")) {\n                    left = left.expression;\n                } else left = null;\n                if (!left || is_lhs_read_only(left)) {\n                    expressions[++i] = cdr;\n                    continue;\n                }\n                var parent = null, field;\n                while (true) {\n                    if (cdr.equivalent_to(left)) {\n                        var car = expressions[i];\n                        if (car instanceof AST_UnaryPostfix) {\n                            car = make_node(AST_UnaryPrefix, car, {\n                                operator: car.operator,\n                                expression: left\n                            });\n                        }\n                        if (parent) {\n                            parent[field] = car;\n                            expressions[i] = expressions[j];\n                        } else {\n                            expressions[i] = car;\n                        }\n                        break;\n                    }\n                    if (cdr instanceof AST_Binary && !(cdr instanceof AST_Assign)) {\n                        if (cdr.left.is_constant()) {\n                            if (cdr.operator == \"||\" || cdr.operator == \"&&\") {\n                                expressions[++i] = expressions[j];\n                                break;\n                            }\n                            field = \"right\";\n                        } else {\n                            field = \"left\";\n                        }\n                    } else if (cdr instanceof AST_Call\n                        || cdr instanceof AST_PropAccess\n                        || cdr instanceof AST_Unary && !unary_side_effects(cdr.operator)) {\n                        field = \"expression\";\n                    } else {\n                        expressions[++i] = expressions[j];\n                        break;\n                    }\n                    parent = cdr;\n                    cdr = cdr[field];\n                }\n            }\n            end = i;\n            expressions.length = end + 1;\n        }\n    });\n\n    AST_Unary.DEFMETHOD(\"lift_sequences\", function(compressor){\n        if (compressor.option(\"sequences\")) {\n            if (this.expression instanceof AST_Sequence) {\n                var x = this.expression.expressions.slice();\n                var e = this.clone();\n                e.expression = x.pop();\n                x.push(e);\n                return make_sequence(this, x).optimize(compressor);\n            }\n        }\n        return this;\n    });\n\n    OPT(AST_UnaryPostfix, function(self, compressor){\n        return self.lift_sequences(compressor);\n    });\n\n    OPT(AST_UnaryPrefix, function(self, compressor){\n        var e = self.expression;\n        if (self.operator == \"delete\"\n            && !(e instanceof AST_SymbolRef\n                || e instanceof AST_PropAccess\n                || e instanceof AST_NaN\n                || e instanceof AST_Infinity\n                || e instanceof AST_Undefined)) {\n            if (e instanceof AST_Sequence) {\n                e = e.expressions.slice();\n                e.push(make_node(AST_True, self));\n                return make_sequence(self, e).optimize(compressor);\n            }\n            return make_sequence(self, [ e, make_node(AST_True, self) ]).optimize(compressor);\n        }\n        var seq = self.lift_sequences(compressor);\n        if (seq !== self) {\n            return seq;\n        }\n        if (compressor.option(\"side_effects\") && self.operator == \"void\") {\n            e = e.drop_side_effect_free(compressor);\n            if (e) {\n                self.expression = e;\n                return self;\n            } else {\n                return make_node(AST_Undefined, self).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"booleans\") && compressor.in_boolean_context()) {\n            switch (self.operator) {\n              case \"!\":\n                if (e instanceof AST_UnaryPrefix && e.operator == \"!\") {\n                    // !!foo ==> foo, if we're in boolean context\n                    return e.expression;\n                }\n                if (e instanceof AST_Binary) {\n                    self = best_of(compressor, self, e.negate(compressor, first_in_statement(compressor)));\n                }\n                break;\n              case \"typeof\":\n                // typeof always returns a non-empty string, thus it's\n                // always true in booleans\n                compressor.warn(\"Boolean expression always true [{file}:{line},{col}]\", self.start);\n                return (e instanceof AST_SymbolRef ? make_node(AST_True, self) : make_sequence(self, [\n                    e,\n                    make_node(AST_True, self)\n                ])).optimize(compressor);\n            }\n        }\n        if (self.operator == \"-\" && e instanceof AST_Infinity) {\n            e = e.transform(compressor);\n        }\n        if (e instanceof AST_Binary\n            && (self.operator == \"+\" || self.operator == \"-\")\n            && (e.operator == \"*\" || e.operator == \"/\" || e.operator == \"%\")) {\n            return make_node(AST_Binary, self, {\n                operator: e.operator,\n                left: make_node(AST_UnaryPrefix, e.left, {\n                    operator: self.operator,\n                    expression: e.left\n                }),\n                right: e.right\n            });\n        }\n        // avoids infinite recursion of numerals\n        if (self.operator != \"-\"\n            || !(e instanceof AST_Number || e instanceof AST_Infinity)) {\n            var ev = self.evaluate(compressor);\n            if (ev !== self) {\n                ev = make_node_from_constant(ev, self).optimize(compressor);\n                return best_of(compressor, ev, self);\n            }\n        }\n        return self;\n    });\n\n    AST_Binary.DEFMETHOD(\"lift_sequences\", function(compressor){\n        if (compressor.option(\"sequences\")) {\n            if (this.left instanceof AST_Sequence) {\n                var x = this.left.expressions.slice();\n                var e = this.clone();\n                e.left = x.pop();\n                x.push(e);\n                return make_sequence(this, x).optimize(compressor);\n            }\n            if (this.right instanceof AST_Sequence && !this.left.has_side_effects(compressor)) {\n                var assign = this.operator == \"=\" && this.left instanceof AST_SymbolRef;\n                var x = this.right.expressions;\n                var last = x.length - 1;\n                for (var i = 0; i < last; i++) {\n                    if (!assign && x[i].has_side_effects(compressor)) break;\n                }\n                if (i == last) {\n                    x = x.slice();\n                    var e = this.clone();\n                    e.right = x.pop();\n                    x.push(e);\n                    return make_sequence(this, x).optimize(compressor);\n                } else if (i > 0) {\n                    var e = this.clone();\n                    e.right = make_sequence(this.right, x.slice(i));\n                    x = x.slice(0, i);\n                    x.push(e);\n                    return make_sequence(this, x).optimize(compressor);\n                }\n            }\n        }\n        return this;\n    });\n\n    var commutativeOperators = makePredicate(\"== === != !== * & | ^\");\n\n    OPT(AST_Binary, function(self, compressor){\n        function reversible() {\n            return self.left.is_constant()\n                || self.right.is_constant()\n                || !self.left.has_side_effects(compressor)\n                    && !self.right.has_side_effects(compressor);\n        }\n        function reverse(op) {\n            if (reversible()) {\n                if (op) self.operator = op;\n                var tmp = self.left;\n                self.left = self.right;\n                self.right = tmp;\n            }\n        }\n        if (commutativeOperators(self.operator)) {\n            if (self.right.is_constant()\n                && !self.left.is_constant()) {\n                // if right is a constant, whatever side effects the\n                // left side might have could not influence the\n                // result.  hence, force switch.\n\n                if (!(self.left instanceof AST_Binary\n                      && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {\n                    reverse();\n                }\n            }\n        }\n        self = self.lift_sequences(compressor);\n        if (compressor.option(\"comparisons\")) switch (self.operator) {\n          case \"===\":\n          case \"!==\":\n            if ((self.left.is_string(compressor) && self.right.is_string(compressor)) ||\n                (self.left.is_number(compressor) && self.right.is_number(compressor)) ||\n                (self.left.is_boolean() && self.right.is_boolean())) {\n                self.operator = self.operator.substr(0, 2);\n            }\n            // XXX: intentionally falling down to the next case\n          case \"==\":\n          case \"!=\":\n            // \"undefined\" == typeof x => undefined === x\n            if (self.left instanceof AST_String\n                && self.left.value == \"undefined\"\n                && self.right instanceof AST_UnaryPrefix\n                && self.right.operator == \"typeof\") {\n                var expr = self.right.expression;\n                if (expr instanceof AST_SymbolRef ? !expr.undeclared()\n                    : !(expr instanceof AST_PropAccess && compressor.option(\"ie8\"))) {\n                    self.right = expr;\n                    self.left = make_node(AST_Undefined, self.left).optimize(compressor);\n                    if (self.operator.length == 2) self.operator += \"=\";\n                }\n            }\n            break;\n        }\n        if (compressor.option(\"booleans\") && self.operator == \"+\" && compressor.in_boolean_context()) {\n            var ll = self.left.evaluate(compressor);\n            var rr = self.right.evaluate(compressor);\n            if (ll && typeof ll == \"string\") {\n                compressor.warn(\"+ in boolean context always true [{file}:{line},{col}]\", self.start);\n                return make_sequence(self, [\n                    self.right,\n                    make_node(AST_True, self)\n                ]).optimize(compressor);\n            }\n            if (rr && typeof rr == \"string\") {\n                compressor.warn(\"+ in boolean context always true [{file}:{line},{col}]\", self.start);\n                return make_sequence(self, [\n                    self.left,\n                    make_node(AST_True, self)\n                ]).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"comparisons\") && self.is_boolean()) {\n            if (!(compressor.parent() instanceof AST_Binary)\n                || compressor.parent() instanceof AST_Assign) {\n                var negated = make_node(AST_UnaryPrefix, self, {\n                    operator: \"!\",\n                    expression: self.negate(compressor, first_in_statement(compressor))\n                });\n                self = best_of(compressor, self, negated);\n            }\n            if (compressor.option(\"unsafe_comps\")) {\n                switch (self.operator) {\n                  case \"<\": reverse(\">\"); break;\n                  case \"<=\": reverse(\">=\"); break;\n                }\n            }\n        }\n        if (self.operator == \"+\") {\n            if (self.right instanceof AST_String\n                && self.right.getValue() == \"\"\n                && self.left.is_string(compressor)) {\n                return self.left;\n            }\n            if (self.left instanceof AST_String\n                && self.left.getValue() == \"\"\n                && self.right.is_string(compressor)) {\n                return self.right;\n            }\n            if (self.left instanceof AST_Binary\n                && self.left.operator == \"+\"\n                && self.left.left instanceof AST_String\n                && self.left.left.getValue() == \"\"\n                && self.right.is_string(compressor)) {\n                self.left = self.left.right;\n                return self.transform(compressor);\n            }\n        }\n        if (compressor.option(\"evaluate\")) {\n            switch (self.operator) {\n              case \"&&\":\n                var ll = self.left.evaluate(compressor);\n                if (!ll) {\n                    compressor.warn(\"Condition left of && always false [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), self, self.left).optimize(compressor);\n                } else if (ll !== self.left) {\n                    compressor.warn(\"Condition left of && always true [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), self, self.right).optimize(compressor);\n                }\n                if (compressor.option(\"booleans\") && compressor.in_boolean_context()) {\n                    var rr = self.right.evaluate(compressor);\n                    if (!rr) {\n                        compressor.warn(\"Boolean && always false [{file}:{line},{col}]\", self.start);\n                        return make_sequence(self, [\n                            self.left,\n                            make_node(AST_False, self)\n                        ]).optimize(compressor);\n                    } else if (rr !== self.right) {\n                        compressor.warn(\"Dropping side-effect-free && in boolean context [{file}:{line},{col}]\", self.start);\n                        return self.left.optimize(compressor);\n                    }\n                }\n                break;\n              case \"||\":\n                var ll = self.left.evaluate(compressor);\n                if (!ll) {\n                    compressor.warn(\"Condition left of || always false [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), self, self.right).optimize(compressor);\n                } else if (ll !== self.left) {\n                    compressor.warn(\"Condition left of || always true [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), self, self.left).optimize(compressor);\n                }\n                if (compressor.option(\"booleans\") && compressor.in_boolean_context()) {\n                    var rr = self.right.evaluate(compressor);\n                    if (!rr) {\n                        compressor.warn(\"Dropping side-effect-free || in boolean context [{file}:{line},{col}]\", self.start);\n                        return self.left.optimize(compressor);\n                    } else if (rr !== self.right) {\n                        compressor.warn(\"Boolean || always true [{file}:{line},{col}]\", self.start);\n                        return make_sequence(self, [\n                            self.left,\n                            make_node(AST_True, self)\n                        ]).optimize(compressor);\n                    }\n                }\n                break;\n            }\n            var associative = true;\n            switch (self.operator) {\n              case \"+\":\n                // \"foo\" + (\"bar\" + x) => \"foobar\" + x\n                if (self.left instanceof AST_Constant\n                    && self.right instanceof AST_Binary\n                    && self.right.operator == \"+\"\n                    && self.right.left instanceof AST_Constant\n                    && self.right.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: make_node(AST_String, self.left, {\n                            value: \"\" + self.left.getValue() + self.right.left.getValue(),\n                            start: self.left.start,\n                            end: self.right.left.end\n                        }),\n                        right: self.right.right\n                    });\n                }\n                // (x + \"foo\") + \"bar\" => x + \"foobar\"\n                if (self.right instanceof AST_Constant\n                    && self.left instanceof AST_Binary\n                    && self.left.operator == \"+\"\n                    && self.left.right instanceof AST_Constant\n                    && self.left.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: self.left.left,\n                        right: make_node(AST_String, self.right, {\n                            value: \"\" + self.left.right.getValue() + self.right.getValue(),\n                            start: self.left.right.start,\n                            end: self.right.end\n                        })\n                    });\n                }\n                // (x + \"foo\") + (\"bar\" + y) => (x + \"foobar\") + y\n                if (self.left instanceof AST_Binary\n                    && self.left.operator == \"+\"\n                    && self.left.is_string(compressor)\n                    && self.left.right instanceof AST_Constant\n                    && self.right instanceof AST_Binary\n                    && self.right.operator == \"+\"\n                    && self.right.left instanceof AST_Constant\n                    && self.right.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: make_node(AST_Binary, self.left, {\n                            operator: \"+\",\n                            left: self.left.left,\n                            right: make_node(AST_String, self.left.right, {\n                                value: \"\" + self.left.right.getValue() + self.right.left.getValue(),\n                                start: self.left.right.start,\n                                end: self.right.left.end\n                            })\n                        }),\n                        right: self.right.right\n                    });\n                }\n                // a + -b => a - b\n                if (self.right instanceof AST_UnaryPrefix\n                    && self.right.operator == \"-\"\n                    && self.left.is_number(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"-\",\n                        left: self.left,\n                        right: self.right.expression\n                    });\n                    break;\n                }\n                // -a + b => b - a\n                if (self.left instanceof AST_UnaryPrefix\n                    && self.left.operator == \"-\"\n                    && reversible()\n                    && self.right.is_number(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"-\",\n                        left: self.right,\n                        right: self.left.expression\n                    });\n                    break;\n                }\n              case \"*\":\n                associative = compressor.option(\"unsafe_math\");\n              case \"&\":\n              case \"|\":\n              case \"^\":\n                // a + +b => +b + a\n                if (self.left.is_number(compressor)\n                    && self.right.is_number(compressor)\n                    && reversible()\n                    && !(self.left instanceof AST_Binary\n                        && self.left.operator != self.operator\n                        && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {\n                    var reversed = make_node(AST_Binary, self, {\n                        operator: self.operator,\n                        left: self.right,\n                        right: self.left\n                    });\n                    if (self.right instanceof AST_Constant\n                        && !(self.left instanceof AST_Constant)) {\n                        self = best_of(compressor, reversed, self);\n                    } else {\n                        self = best_of(compressor, self, reversed);\n                    }\n                }\n                if (associative && self.is_number(compressor)) {\n                    // a + (b + c) => (a + b) + c\n                    if (self.right instanceof AST_Binary\n                        && self.right.operator == self.operator) {\n                        self = make_node(AST_Binary, self, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left, {\n                                operator: self.operator,\n                                left: self.left,\n                                right: self.right.left,\n                                start: self.left.start,\n                                end: self.right.left.end\n                            }),\n                            right: self.right.right\n                        });\n                    }\n                    // (n + 2) + 3 => 5 + n\n                    // (2 * n) * 3 => 6 + n\n                    if (self.right instanceof AST_Constant\n                        && self.left instanceof AST_Binary\n                        && self.left.operator == self.operator) {\n                        if (self.left.left instanceof AST_Constant) {\n                            self = make_node(AST_Binary, self, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left, {\n                                    operator: self.operator,\n                                    left: self.left.left,\n                                    right: self.right,\n                                    start: self.left.left.start,\n                                    end: self.right.end\n                                }),\n                                right: self.left.right\n                            });\n                        } else if (self.left.right instanceof AST_Constant) {\n                            self = make_node(AST_Binary, self, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left, {\n                                    operator: self.operator,\n                                    left: self.left.right,\n                                    right: self.right,\n                                    start: self.left.right.start,\n                                    end: self.right.end\n                                }),\n                                right: self.left.left\n                            });\n                        }\n                    }\n                    // (a | 1) | (2 | d) => (3 | a) | b\n                    if (self.left instanceof AST_Binary\n                        && self.left.operator == self.operator\n                        && self.left.right instanceof AST_Constant\n                        && self.right instanceof AST_Binary\n                        && self.right.operator == self.operator\n                        && self.right.left instanceof AST_Constant) {\n                        self = make_node(AST_Binary, self, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left.left, {\n                                    operator: self.operator,\n                                    left: self.left.right,\n                                    right: self.right.left,\n                                    start: self.left.right.start,\n                                    end: self.right.left.end\n                                }),\n                                right: self.left.left\n                            }),\n                            right: self.right.right\n                        });\n                    }\n                }\n            }\n        }\n        // x && (y && z)  ==>  x && y && z\n        // x || (y || z)  ==>  x || y || z\n        // x + (\"y\" + z)  ==>  x + \"y\" + z\n        // \"x\" + (y + \"z\")==>  \"x\" + y + \"z\"\n        if (self.right instanceof AST_Binary\n            && self.right.operator == self.operator\n            && (self.operator == \"&&\"\n                || self.operator == \"||\"\n                || (self.operator == \"+\"\n                    && (self.right.left.is_string(compressor)\n                        || (self.left.is_string(compressor)\n                            && self.right.right.is_string(compressor))))))\n        {\n            self.left = make_node(AST_Binary, self.left, {\n                operator : self.operator,\n                left     : self.left,\n                right    : self.right.left\n            });\n            self.right = self.right.right;\n            return self.transform(compressor);\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    OPT(AST_SymbolRef, function(self, compressor){\n        var def = self.resolve_defines(compressor);\n        if (def) {\n            return def.optimize(compressor);\n        }\n        // testing against !self.scope.uses_with first is an optimization\n        if (!compressor.option(\"ie8\")\n            && self.undeclared()\n            && (!self.scope.uses_with || !compressor.find_parent(AST_With))) {\n            switch (self.name) {\n              case \"undefined\":\n                return make_node(AST_Undefined, self).optimize(compressor);\n              case \"NaN\":\n                return make_node(AST_NaN, self).optimize(compressor);\n              case \"Infinity\":\n                return make_node(AST_Infinity, self).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"evaluate\")\n            && compressor.option(\"reduce_vars\")\n            && is_lhs(self, compressor.parent()) !== self) {\n            var d = self.definition();\n            var fixed = self.fixed_value();\n            if (fixed) {\n                if (d.should_replace === undefined) {\n                    var init = fixed.evaluate(compressor);\n                    if (init !== fixed && (compressor.option(\"unsafe_regexp\") || !(init instanceof RegExp))) {\n                        init = make_node_from_constant(init, fixed);\n                        var value_length = init.optimize(compressor).print_to_string().length;\n                        var fn;\n                        if (has_symbol_ref(fixed)) {\n                            fn = function() {\n                                var result = init.optimize(compressor);\n                                return result === init ? result.clone(true) : result;\n                            };\n                        } else {\n                            value_length = Math.min(value_length, fixed.print_to_string().length);\n                            fn = function() {\n                                var result = best_of_expression(init.optimize(compressor), fixed);\n                                return result === init || result === fixed ? result.clone(true) : result;\n                            };\n                        }\n                        var name_length = d.name.length;\n                        var overhead = 0;\n                        if (compressor.option(\"unused\") && (!d.global || compressor.toplevel(d))) {\n                            overhead = (name_length + 2 + value_length) / d.references.length;\n                        }\n                        d.should_replace = value_length <= name_length + overhead ? fn : false;\n                    } else {\n                        d.should_replace = false;\n                    }\n                }\n                if (d.should_replace) {\n                    return d.should_replace();\n                }\n            }\n        }\n        return self;\n\n        function has_symbol_ref(value) {\n            var found;\n            value.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_SymbolRef) found = true;\n                if (found) return true;\n            }));\n            return found;\n        }\n    });\n\n    function is_atomic(lhs, self) {\n        return lhs instanceof AST_SymbolRef || lhs.TYPE === self.TYPE;\n    }\n\n    OPT(AST_Undefined, function(self, compressor){\n        if (compressor.option(\"unsafe\")) {\n            var undef = find_variable(compressor, \"undefined\");\n            if (undef) {\n                var ref = make_node(AST_SymbolRef, self, {\n                    name   : \"undefined\",\n                    scope  : undef.scope,\n                    thedef : undef\n                });\n                ref.is_undefined = true;\n                return ref;\n            }\n        }\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && is_atomic(lhs, self)) return self;\n        return make_node(AST_UnaryPrefix, self, {\n            operator: \"void\",\n            expression: make_node(AST_Number, self, {\n                value: 0\n            })\n        });\n    });\n\n    OPT(AST_Infinity, function(self, compressor){\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && is_atomic(lhs, self)) return self;\n        if (compressor.option(\"keep_infinity\")\n            && !(lhs && !is_atomic(lhs, self))\n            && !find_variable(compressor, \"Infinity\"))\n            return self;\n        return make_node(AST_Binary, self, {\n            operator: \"/\",\n            left: make_node(AST_Number, self, {\n                value: 1\n            }),\n            right: make_node(AST_Number, self, {\n                value: 0\n            })\n        });\n    });\n\n    OPT(AST_NaN, function(self, compressor){\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && !is_atomic(lhs, self)\n            || find_variable(compressor, \"NaN\")) {\n            return make_node(AST_Binary, self, {\n                operator: \"/\",\n                left: make_node(AST_Number, self, {\n                    value: 0\n                }),\n                right: make_node(AST_Number, self, {\n                    value: 0\n                })\n            });\n        }\n        return self;\n    });\n\n    var ASSIGN_OPS = [ '+', '-', '/', '*', '%', '>>', '<<', '>>>', '|', '^', '&' ];\n    var ASSIGN_OPS_COMMUTATIVE = [ '*', '|', '^', '&' ];\n    OPT(AST_Assign, function(self, compressor){\n        self = self.lift_sequences(compressor);\n        if (self.operator == \"=\" && self.left instanceof AST_SymbolRef && self.right instanceof AST_Binary) {\n            // x = expr1 OP expr2\n            if (self.right.left instanceof AST_SymbolRef\n                && self.right.left.name == self.left.name\n                && member(self.right.operator, ASSIGN_OPS)) {\n                // x = x - 2  --->  x -= 2\n                self.operator = self.right.operator + \"=\";\n                self.right = self.right.right;\n            }\n            else if (self.right.right instanceof AST_SymbolRef\n                && self.right.right.name == self.left.name\n                && member(self.right.operator, ASSIGN_OPS_COMMUTATIVE)\n                && !self.right.left.has_side_effects(compressor)) {\n                // x = 2 & x  --->  x &= 2\n                self.operator = self.right.operator + \"=\";\n                self.right = self.right.left;\n            }\n        }\n        return self;\n    });\n\n    OPT(AST_Conditional, function(self, compressor){\n        if (!compressor.option(\"conditionals\")) return self;\n        // This looks like lift_sequences(), should probably be under \"sequences\"\n        if (self.condition instanceof AST_Sequence) {\n            var expressions = self.condition.expressions.slice();\n            self.condition = expressions.pop();\n            expressions.push(self);\n            return make_sequence(self, expressions);\n        }\n        var cond = self.condition.evaluate(compressor);\n        if (cond !== self.condition) {\n            if (cond) {\n                compressor.warn(\"Condition always true [{file}:{line},{col}]\", self.start);\n                return maintain_this_binding(compressor.parent(), self, self.consequent);\n            } else {\n                compressor.warn(\"Condition always false [{file}:{line},{col}]\", self.start);\n                return maintain_this_binding(compressor.parent(), self, self.alternative);\n            }\n        }\n        var negated = cond.negate(compressor, first_in_statement(compressor));\n        if (best_of(compressor, cond, negated) === negated) {\n            self = make_node(AST_Conditional, self, {\n                condition: negated,\n                consequent: self.alternative,\n                alternative: self.consequent\n            });\n        }\n        var condition = self.condition;\n        var consequent = self.consequent;\n        var alternative = self.alternative;\n        // x?x:y --> x||y\n        if (condition instanceof AST_SymbolRef\n            && consequent instanceof AST_SymbolRef\n            && condition.definition() === consequent.definition()) {\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: condition,\n                right: alternative\n            });\n        }\n        // if (foo) exp = something; else exp = something_else;\n        //                   |\n        //                   v\n        // exp = foo ? something : something_else;\n        if (consequent instanceof AST_Assign\n            && alternative instanceof AST_Assign\n            && consequent.operator == alternative.operator\n            && consequent.left.equivalent_to(alternative.left)\n            && (!self.condition.has_side_effects(compressor)\n                || consequent.operator == \"=\"\n                    && !consequent.left.has_side_effects(compressor))) {\n            return make_node(AST_Assign, self, {\n                operator: consequent.operator,\n                left: consequent.left,\n                right: make_node(AST_Conditional, self, {\n                    condition: self.condition,\n                    consequent: consequent.right,\n                    alternative: alternative.right\n                })\n            });\n        }\n        // x ? y(a) : y(b) --> y(x ? a : b)\n        if (consequent instanceof AST_Call\n            && alternative.TYPE === consequent.TYPE\n            && consequent.args.length == 1\n            && alternative.args.length == 1\n            && consequent.expression.equivalent_to(alternative.expression)\n            && !consequent.expression.has_side_effects(compressor)) {\n            consequent.args[0] = make_node(AST_Conditional, self, {\n                condition: self.condition,\n                consequent: consequent.args[0],\n                alternative: alternative.args[0]\n            });\n            return consequent;\n        }\n        // x?y?z:a:a --> x&&y?z:a\n        if (consequent instanceof AST_Conditional\n            && consequent.alternative.equivalent_to(alternative)) {\n            return make_node(AST_Conditional, self, {\n                condition: make_node(AST_Binary, self, {\n                    left: self.condition,\n                    operator: \"&&\",\n                    right: consequent.condition\n                }),\n                consequent: consequent.consequent,\n                alternative: alternative\n            });\n        }\n        // x ? y : y --> x, y\n        if (consequent.equivalent_to(alternative)) {\n            return make_sequence(self, [\n                self.condition,\n                consequent\n            ]).optimize(compressor);\n        }\n\n        if (is_true(self.consequent)) {\n            if (is_false(self.alternative)) {\n                // c ? true : false ---> !!c\n                return booleanize(self.condition);\n            }\n            // c ? true : x ---> !!c || x\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: booleanize(self.condition),\n                right: self.alternative\n            });\n        }\n        if (is_false(self.consequent)) {\n            if (is_true(self.alternative)) {\n                // c ? false : true ---> !c\n                return booleanize(self.condition.negate(compressor));\n            }\n            // c ? false : x ---> !c && x\n            return make_node(AST_Binary, self, {\n                operator: \"&&\",\n                left: booleanize(self.condition.negate(compressor)),\n                right: self.alternative\n            });\n        }\n        if (is_true(self.alternative)) {\n            // c ? x : true ---> !c || x\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: booleanize(self.condition.negate(compressor)),\n                right: self.consequent\n            });\n        }\n        if (is_false(self.alternative)) {\n            // c ? x : false ---> !!c && x\n            return make_node(AST_Binary, self, {\n                operator: \"&&\",\n                left: booleanize(self.condition),\n                right: self.consequent\n            });\n        }\n\n        return self;\n\n        function booleanize(node) {\n            if (node.is_boolean()) return node;\n            // !!expression\n            return make_node(AST_UnaryPrefix, node, {\n                operator: \"!\",\n                expression: node.negate(compressor)\n            });\n        }\n\n        // AST_True or !0\n        function is_true(node) {\n            return node instanceof AST_True\n                || (node instanceof AST_UnaryPrefix\n                    && node.operator == \"!\"\n                    && node.expression instanceof AST_Constant\n                    && !node.expression.value);\n        }\n        // AST_False or !1\n        function is_false(node) {\n            return node instanceof AST_False\n                || (node instanceof AST_UnaryPrefix\n                    && node.operator == \"!\"\n                    && node.expression instanceof AST_Constant\n                    && !!node.expression.value);\n        }\n    });\n\n    OPT(AST_Boolean, function(self, compressor){\n        if (compressor.option(\"booleans\")) {\n            var p = compressor.parent();\n            if (p instanceof AST_Binary && (p.operator == \"==\"\n                                            || p.operator == \"!=\")) {\n                compressor.warn(\"Non-strict equality against boolean: {operator} {value} [{file}:{line},{col}]\", {\n                    operator : p.operator,\n                    value    : self.value,\n                    file     : p.start.file,\n                    line     : p.start.line,\n                    col      : p.start.col,\n                });\n                return make_node(AST_Number, self, {\n                    value: +self.value\n                });\n            }\n            return make_node(AST_UnaryPrefix, self, {\n                operator: \"!\",\n                expression: make_node(AST_Number, self, {\n                    value: 1 - self.value\n                })\n            });\n        }\n        return self;\n    });\n\n    OPT(AST_Sub, function(self, compressor){\n        var prop = self.property;\n        if (prop instanceof AST_String && compressor.option(\"properties\")) {\n            prop = prop.getValue();\n            if (RESERVED_WORDS(prop) ? !compressor.option(\"ie8\") : is_identifier_string(prop)) {\n                return make_node(AST_Dot, self, {\n                    expression : self.expression,\n                    property   : prop\n                }).optimize(compressor);\n            }\n            var v = parseFloat(prop);\n            if (!isNaN(v) && v.toString() == prop) {\n                self.property = make_node(AST_Number, self.property, {\n                    value: v\n                });\n            }\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    OPT(AST_Dot, function(self, compressor){\n        var def = self.resolve_defines(compressor);\n        if (def) {\n            return def.optimize(compressor);\n        }\n        var prop = self.property;\n        if (RESERVED_WORDS(prop) && compressor.option(\"ie8\")) {\n            return make_node(AST_Sub, self, {\n                expression : self.expression,\n                property   : make_node(AST_String, self, {\n                    value: prop\n                })\n            }).optimize(compressor);\n        }\n        if (compressor.option(\"unsafe_proto\")\n            && self.expression instanceof AST_Dot\n            && self.expression.property == \"prototype\") {\n            var exp = self.expression.expression;\n            if (exp instanceof AST_SymbolRef && exp.undeclared()) switch (exp.name) {\n              case \"Array\":\n                self.expression = make_node(AST_Array, self.expression, {\n                    elements: []\n                });\n                break;\n              case \"Object\":\n                self.expression = make_node(AST_Object, self.expression, {\n                    properties: []\n                });\n                break;\n              case \"String\":\n                self.expression = make_node(AST_String, self.expression, {\n                    value: \"\"\n                });\n                break;\n            }\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    function literals_in_boolean_context(self, compressor) {\n        if (compressor.option(\"booleans\") && compressor.in_boolean_context()) {\n            return best_of(compressor, self, make_sequence(self, [\n                self,\n                make_node(AST_True, self)\n            ]).optimize(compressor));\n        }\n        return self;\n    };\n    OPT(AST_Array, literals_in_boolean_context);\n    OPT(AST_Object, literals_in_boolean_context);\n    OPT(AST_RegExp, literals_in_boolean_context);\n\n    OPT(AST_Return, function(self, compressor){\n        if (self.value && is_undefined(self.value, compressor)) {\n            self.value = null;\n        }\n        return self;\n    });\n\n    OPT(AST_VarDef, function(self, compressor){\n        var defines = compressor.option(\"global_defs\");\n        if (defines && HOP(defines, self.name.name)) {\n            compressor.warn('global_defs ' + self.name.name + ' redefined [{file}:{line},{col}]', self.start);\n        }\n        return self;\n    });\n\n})();\n"]}