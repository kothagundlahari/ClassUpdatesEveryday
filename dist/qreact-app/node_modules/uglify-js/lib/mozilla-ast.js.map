{"version":3,"sources":["../../../../../qreact-app/node_modules/uglify-js/lib/mozilla-ast.js"],"names":["normalize_directives","body","in_directive","i","length","AST_Statement","AST_String","AST_Directive","start","end","value","MOZ_TO_ME","Program","M","AST_Toplevel","my_start_token","my_end_token","map","from_moz","FunctionDeclaration","AST_Defun","name","id","argnames","params","FunctionExpression","AST_Function","ExpressionStatement","AST_SimpleStatement","expression","TryStatement","handlers","handler","guardedHandlers","Error","AST_Try","block","bcatch","bfinally","finalizer","AST_Finally","Property","key","args","type","kind","AST_ObjectKeyVal","AST_SymbolAccessor","AST_Accessor","AST_ObjectGetter","AST_ObjectSetter","ArrayExpression","AST_Array","elements","elem","AST_Hole","ObjectExpression","AST_Object","properties","prop","SequenceExpression","AST_Sequence","expressions","MemberExpression","computed","AST_Sub","AST_Dot","property","object","SwitchCase","test","AST_Case","AST_Default","consequent","VariableDeclaration","AST_Var","definitions","declarations","Literal","val","AST_Null","AST_Number","AST_True","AST_False","rx","regex","pattern","RegExp","flags","toString","raw","AST_RegExp","Identifier","p","FROM_MOZ_STACK","AST_Label","AST_SymbolVar","AST_SymbolLambda","AST_SymbolFunarg","AST_SymbolDefun","AST_SymbolCatch","AST_LabelRef","AST_SymbolRef","UpdateExpression","UnaryExpression","To_Moz_Unary","prefix","AST_UnaryPrefix","AST_UnaryPostfix","operator","argument","AST_EmptyStatement","AST_BlockStatement","AST_If","AST_LabeledStatement","AST_Break","AST_Continue","AST_With","AST_Switch","AST_Return","AST_Throw","AST_While","AST_Do","AST_For","AST_ForIn","AST_Debugger","AST_VarDef","AST_Catch","AST_This","AST_Binary","AST_Assign","AST_Conditional","AST_New","AST_Call","def_to_moz","To_Moz_Program","to_moz_scope","To_Moz_FunctionDeclaration","to_moz","To_Moz_FunctionExpression","To_Moz_Directive","To_Moz_ExpressionStatement","AST_SwitchBranch","To_Moz_SwitchCase","To_Moz_TryStatement","to_moz_block","To_Moz_CatchClause","param","argname","guard","AST_Definitions","To_Moz_VariableDeclaration","To_Moz_SequenceExpression","AST_PropAccess","To_Moz_MemberExpression","isComputed","AST_Unary","To_Moz_BinaryExpression","left","right","To_Moz_ArrayExpression","To_Moz_ObjectExpression","AST_ObjectProperty","To_Moz_Property","AST_Symbol","To_Moz_Identifier","def","definition","mangled_name","To_Moz_RegExpLiteral","source","match","AST_Constant","To_Moz_Literal","AST_Atom","To_Moz_Atom","String","AST_Boolean","DEFMETHOD","prototype","to_mozilla_ast","To_Moz_ArrayHole","AST_Block","AST_Lambda","raw_token","moznode","loc","range","AST_Token","file","line","col","column","pos","endline","endcol","endpos","moztype","mytype","propmap","moz_to_me","me_to_moz","JSON","stringify","split","forEach","m","exec","moz","how","my","Function","exports","node","push","ret","pop","AST_Node","from_mozilla_ast","save_stack","ast","set_moz_loc","mynode","myparent","unshift"],"mappings":"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","file":"mozilla-ast.js","sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\n(function(){\n\n    var normalize_directives = function(body) {\n        var in_directive = true;\n\n        for (var i = 0; i < body.length; i++) {\n            if (in_directive && body[i] instanceof AST_Statement && body[i].body instanceof AST_String) {\n                body[i] = new AST_Directive({\n                    start: body[i].start,\n                    end: body[i].end,\n                    value: body[i].body.value\n                });\n            } else if (in_directive && !(body[i] instanceof AST_Statement && body[i].body instanceof AST_String)) {\n                in_directive = false;\n            }\n        }\n\n        return body;\n    };\n\n    var MOZ_TO_ME = {\n        Program: function(M) {\n            return new AST_Toplevel({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: normalize_directives(M.body.map(from_moz))\n            });\n        },\n        FunctionDeclaration: function(M) {\n            return new AST_Defun({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                argnames: M.params.map(from_moz),\n                body: normalize_directives(from_moz(M.body).body)\n            });\n        },\n        FunctionExpression: function(M) {\n            return new AST_Function({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                argnames: M.params.map(from_moz),\n                body: normalize_directives(from_moz(M.body).body)\n            });\n        },\n        ExpressionStatement: function(M) {\n            return new AST_SimpleStatement({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: from_moz(M.expression)\n            });\n        },\n        TryStatement: function(M) {\n            var handlers = M.handlers || [M.handler];\n            if (handlers.length > 1 || M.guardedHandlers && M.guardedHandlers.length) {\n                throw new Error(\"Multiple catch clauses are not supported.\");\n            }\n            return new AST_Try({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                body     : from_moz(M.block).body,\n                bcatch   : from_moz(handlers[0]),\n                bfinally : M.finalizer ? new AST_Finally(from_moz(M.finalizer)) : null\n            });\n        },\n        Property: function(M) {\n            var key = M.key;\n            var args = {\n                start    : my_start_token(key),\n                end      : my_end_token(M.value),\n                key      : key.type == \"Identifier\" ? key.name : key.value,\n                value    : from_moz(M.value)\n            };\n            if (M.kind == \"init\") return new AST_ObjectKeyVal(args);\n            args.key = new AST_SymbolAccessor({\n                name: args.key\n            });\n            args.value = new AST_Accessor(args.value);\n            if (M.kind == \"get\") return new AST_ObjectGetter(args);\n            if (M.kind == \"set\") return new AST_ObjectSetter(args);\n        },\n        ArrayExpression: function(M) {\n            return new AST_Array({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                elements : M.elements.map(function(elem){\n                    return elem === null ? new AST_Hole() : from_moz(elem);\n                })\n            });\n        },\n        ObjectExpression: function(M) {\n            return new AST_Object({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                properties : M.properties.map(function(prop){\n                    prop.type = \"Property\";\n                    return from_moz(prop)\n                })\n            });\n        },\n        SequenceExpression: function(M) {\n            return new AST_Sequence({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                expressions: M.expressions.map(from_moz)\n            });\n        },\n        MemberExpression: function(M) {\n            return new (M.computed ? AST_Sub : AST_Dot)({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                property   : M.computed ? from_moz(M.property) : M.property.name,\n                expression : from_moz(M.object)\n            });\n        },\n        SwitchCase: function(M) {\n            return new (M.test ? AST_Case : AST_Default)({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                expression : from_moz(M.test),\n                body       : M.consequent.map(from_moz)\n            });\n        },\n        VariableDeclaration: function(M) {\n            return new AST_Var({\n                start       : my_start_token(M),\n                end         : my_end_token(M),\n                definitions : M.declarations.map(from_moz)\n            });\n        },\n        Literal: function(M) {\n            var val = M.value, args = {\n                start  : my_start_token(M),\n                end    : my_end_token(M)\n            };\n            if (val === null) return new AST_Null(args);\n            switch (typeof val) {\n              case \"string\":\n                args.value = val;\n                return new AST_String(args);\n              case \"number\":\n                args.value = val;\n                return new AST_Number(args);\n              case \"boolean\":\n                return new (val ? AST_True : AST_False)(args);\n              default:\n                var rx = M.regex;\n                if (rx && rx.pattern) {\n                    // RegExpLiteral as per ESTree AST spec\n                    args.value = new RegExp(rx.pattern, rx.flags).toString();\n                } else {\n                    // support legacy RegExp\n                    args.value = M.regex && M.raw ? M.raw : val;\n                }\n                return new AST_RegExp(args);\n            }\n        },\n        Identifier: function(M) {\n            var p = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];\n            return new (  p.type == \"LabeledStatement\" ? AST_Label\n                        : p.type == \"VariableDeclarator\" && p.id === M ? AST_SymbolVar\n                        : p.type == \"FunctionExpression\" ? (p.id === M ? AST_SymbolLambda : AST_SymbolFunarg)\n                        : p.type == \"FunctionDeclaration\" ? (p.id === M ? AST_SymbolDefun : AST_SymbolFunarg)\n                        : p.type == \"CatchClause\" ? AST_SymbolCatch\n                        : p.type == \"BreakStatement\" || p.type == \"ContinueStatement\" ? AST_LabelRef\n                        : AST_SymbolRef)({\n                            start : my_start_token(M),\n                            end   : my_end_token(M),\n                            name  : M.name\n                        });\n        }\n    };\n\n    MOZ_TO_ME.UpdateExpression =\n    MOZ_TO_ME.UnaryExpression = function To_Moz_Unary(M) {\n        var prefix = \"prefix\" in M ? M.prefix\n            : M.type == \"UnaryExpression\" ? true : false;\n        return new (prefix ? AST_UnaryPrefix : AST_UnaryPostfix)({\n            start      : my_start_token(M),\n            end        : my_end_token(M),\n            operator   : M.operator,\n            expression : from_moz(M.argument)\n        });\n    };\n\n    map(\"EmptyStatement\", AST_EmptyStatement);\n    map(\"BlockStatement\", AST_BlockStatement, \"body@body\");\n    map(\"IfStatement\", AST_If, \"test>condition, consequent>body, alternate>alternative\");\n    map(\"LabeledStatement\", AST_LabeledStatement, \"label>label, body>body\");\n    map(\"BreakStatement\", AST_Break, \"label>label\");\n    map(\"ContinueStatement\", AST_Continue, \"label>label\");\n    map(\"WithStatement\", AST_With, \"object>expression, body>body\");\n    map(\"SwitchStatement\", AST_Switch, \"discriminant>expression, cases@body\");\n    map(\"ReturnStatement\", AST_Return, \"argument>value\");\n    map(\"ThrowStatement\", AST_Throw, \"argument>value\");\n    map(\"WhileStatement\", AST_While, \"test>condition, body>body\");\n    map(\"DoWhileStatement\", AST_Do, \"test>condition, body>body\");\n    map(\"ForStatement\", AST_For, \"init>init, test>condition, update>step, body>body\");\n    map(\"ForInStatement\", AST_ForIn, \"left>init, right>object, body>body\");\n    map(\"DebuggerStatement\", AST_Debugger);\n    map(\"VariableDeclarator\", AST_VarDef, \"id>name, init>value\");\n    map(\"CatchClause\", AST_Catch, \"param>argname, body%body\");\n\n    map(\"ThisExpression\", AST_This);\n    map(\"BinaryExpression\", AST_Binary, \"operator=operator, left>left, right>right\");\n    map(\"LogicalExpression\", AST_Binary, \"operator=operator, left>left, right>right\");\n    map(\"AssignmentExpression\", AST_Assign, \"operator=operator, left>left, right>right\");\n    map(\"ConditionalExpression\", AST_Conditional, \"test>condition, consequent>consequent, alternate>alternative\");\n    map(\"NewExpression\", AST_New, \"callee>expression, arguments@args\");\n    map(\"CallExpression\", AST_Call, \"callee>expression, arguments@args\");\n\n    def_to_moz(AST_Toplevel, function To_Moz_Program(M) {\n        return to_moz_scope(\"Program\", M);\n    });\n\n    def_to_moz(AST_Defun, function To_Moz_FunctionDeclaration(M) {\n        return {\n            type: \"FunctionDeclaration\",\n            id: to_moz(M.name),\n            params: M.argnames.map(to_moz),\n            body: to_moz_scope(\"BlockStatement\", M)\n        }\n    });\n\n    def_to_moz(AST_Function, function To_Moz_FunctionExpression(M) {\n        return {\n            type: \"FunctionExpression\",\n            id: to_moz(M.name),\n            params: M.argnames.map(to_moz),\n            body: to_moz_scope(\"BlockStatement\", M)\n        }\n    });\n\n    def_to_moz(AST_Directive, function To_Moz_Directive(M) {\n        return {\n            type: \"ExpressionStatement\",\n            expression: {\n                type: \"Literal\",\n                value: M.value\n            }\n        };\n    });\n\n    def_to_moz(AST_SimpleStatement, function To_Moz_ExpressionStatement(M) {\n        return {\n            type: \"ExpressionStatement\",\n            expression: to_moz(M.body)\n        };\n    });\n\n    def_to_moz(AST_SwitchBranch, function To_Moz_SwitchCase(M) {\n        return {\n            type: \"SwitchCase\",\n            test: to_moz(M.expression),\n            consequent: M.body.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Try, function To_Moz_TryStatement(M) {\n        return {\n            type: \"TryStatement\",\n            block: to_moz_block(M),\n            handler: to_moz(M.bcatch),\n            guardedHandlers: [],\n            finalizer: to_moz(M.bfinally)\n        };\n    });\n\n    def_to_moz(AST_Catch, function To_Moz_CatchClause(M) {\n        return {\n            type: \"CatchClause\",\n            param: to_moz(M.argname),\n            guard: null,\n            body: to_moz_block(M)\n        };\n    });\n\n    def_to_moz(AST_Definitions, function To_Moz_VariableDeclaration(M) {\n        return {\n            type: \"VariableDeclaration\",\n            kind: \"var\",\n            declarations: M.definitions.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Sequence, function To_Moz_SequenceExpression(M) {\n        return {\n            type: \"SequenceExpression\",\n            expressions: M.expressions.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_PropAccess, function To_Moz_MemberExpression(M) {\n        var isComputed = M instanceof AST_Sub;\n        return {\n            type: \"MemberExpression\",\n            object: to_moz(M.expression),\n            computed: isComputed,\n            property: isComputed ? to_moz(M.property) : {type: \"Identifier\", name: M.property}\n        };\n    });\n\n    def_to_moz(AST_Unary, function To_Moz_Unary(M) {\n        return {\n            type: M.operator == \"++\" || M.operator == \"--\" ? \"UpdateExpression\" : \"UnaryExpression\",\n            operator: M.operator,\n            prefix: M instanceof AST_UnaryPrefix,\n            argument: to_moz(M.expression)\n        };\n    });\n\n    def_to_moz(AST_Binary, function To_Moz_BinaryExpression(M) {\n        return {\n            type: M.operator == \"&&\" || M.operator == \"||\" ? \"LogicalExpression\" : \"BinaryExpression\",\n            left: to_moz(M.left),\n            operator: M.operator,\n            right: to_moz(M.right)\n        };\n    });\n\n    def_to_moz(AST_Array, function To_Moz_ArrayExpression(M) {\n        return {\n            type: \"ArrayExpression\",\n            elements: M.elements.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Object, function To_Moz_ObjectExpression(M) {\n        return {\n            type: \"ObjectExpression\",\n            properties: M.properties.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_ObjectProperty, function To_Moz_Property(M) {\n        var key = {\n            type: \"Literal\",\n            value: M.key instanceof AST_SymbolAccessor ? M.key.name : M.key\n        };\n        var kind;\n        if (M instanceof AST_ObjectKeyVal) {\n            kind = \"init\";\n        } else\n        if (M instanceof AST_ObjectGetter) {\n            kind = \"get\";\n        } else\n        if (M instanceof AST_ObjectSetter) {\n            kind = \"set\";\n        }\n        return {\n            type: \"Property\",\n            kind: kind,\n            key: key,\n            value: to_moz(M.value)\n        };\n    });\n\n    def_to_moz(AST_Symbol, function To_Moz_Identifier(M) {\n        var def = M.definition();\n        return {\n            type: \"Identifier\",\n            name: def ? def.mangled_name || def.name : M.name\n        };\n    });\n\n    def_to_moz(AST_RegExp, function To_Moz_RegExpLiteral(M) {\n        var value = M.value;\n        return {\n            type: \"Literal\",\n            value: value,\n            raw: value.toString(),\n            regex: {\n                pattern: value.source,\n                flags: value.toString().match(/[gimuy]*$/)[0]\n            }\n        };\n    });\n\n    def_to_moz(AST_Constant, function To_Moz_Literal(M) {\n        var value = M.value;\n        if (typeof value === 'number' && (value < 0 || (value === 0 && 1 / value < 0))) {\n            return {\n                type: \"UnaryExpression\",\n                operator: \"-\",\n                prefix: true,\n                argument: {\n                    type: \"Literal\",\n                    value: -value,\n                    raw: M.start.raw\n                }\n            };\n        }\n        return {\n            type: \"Literal\",\n            value: value,\n            raw: M.start.raw\n        };\n    });\n\n    def_to_moz(AST_Atom, function To_Moz_Atom(M) {\n        return {\n            type: \"Identifier\",\n            name: String(M.value)\n        };\n    });\n\n    AST_Boolean.DEFMETHOD(\"to_mozilla_ast\", AST_Constant.prototype.to_mozilla_ast);\n    AST_Null.DEFMETHOD(\"to_mozilla_ast\", AST_Constant.prototype.to_mozilla_ast);\n    AST_Hole.DEFMETHOD(\"to_mozilla_ast\", function To_Moz_ArrayHole() { return null });\n\n    AST_Block.DEFMETHOD(\"to_mozilla_ast\", AST_BlockStatement.prototype.to_mozilla_ast);\n    AST_Lambda.DEFMETHOD(\"to_mozilla_ast\", AST_Function.prototype.to_mozilla_ast);\n\n    /* -----[ tools ]----- */\n\n    function raw_token(moznode) {\n        if (moznode.type == \"Literal\") {\n            return moznode.raw != null ? moznode.raw : moznode.value + \"\";\n        }\n    }\n\n    function my_start_token(moznode) {\n        var loc = moznode.loc, start = loc && loc.start;\n        var range = moznode.range;\n        return new AST_Token({\n            file    : loc && loc.source,\n            line    : start && start.line,\n            col     : start && start.column,\n            pos     : range ? range[0] : moznode.start,\n            endline : start && start.line,\n            endcol  : start && start.column,\n            endpos  : range ? range[0] : moznode.start,\n            raw     : raw_token(moznode),\n        });\n    };\n\n    function my_end_token(moznode) {\n        var loc = moznode.loc, end = loc && loc.end;\n        var range = moznode.range;\n        return new AST_Token({\n            file    : loc && loc.source,\n            line    : end && end.line,\n            col     : end && end.column,\n            pos     : range ? range[1] : moznode.end,\n            endline : end && end.line,\n            endcol  : end && end.column,\n            endpos  : range ? range[1] : moznode.end,\n            raw     : raw_token(moznode),\n        });\n    };\n\n    function map(moztype, mytype, propmap) {\n        var moz_to_me = \"function From_Moz_\" + moztype + \"(M){\\n\";\n        moz_to_me += \"return new U2.\" + mytype.name + \"({\\n\" +\n            \"start: my_start_token(M),\\n\" +\n            \"end: my_end_token(M)\";\n\n        var me_to_moz = \"function To_Moz_\" + moztype + \"(M){\\n\";\n        me_to_moz += \"return {\\n\" +\n            \"type: \" + JSON.stringify(moztype);\n\n        if (propmap) propmap.split(/\\s*,\\s*/).forEach(function(prop){\n            var m = /([a-z0-9$_]+)(=|@|>|%)([a-z0-9$_]+)/i.exec(prop);\n            if (!m) throw new Error(\"Can't understand property map: \" + prop);\n            var moz = m[1], how = m[2], my = m[3];\n            moz_to_me += \",\\n\" + my + \": \";\n            me_to_moz += \",\\n\" + moz + \": \";\n            switch (how) {\n                case \"@\":\n                    moz_to_me += \"M.\" + moz + \".map(from_moz)\";\n                    me_to_moz += \"M.\" +  my + \".map(to_moz)\";\n                    break;\n                case \">\":\n                    moz_to_me += \"from_moz(M.\" + moz + \")\";\n                    me_to_moz += \"to_moz(M.\" + my + \")\";\n                    break;\n                case \"=\":\n                    moz_to_me += \"M.\" + moz;\n                    me_to_moz += \"M.\" + my;\n                    break;\n                case \"%\":\n                    moz_to_me += \"from_moz(M.\" + moz + \").body\";\n                    me_to_moz += \"to_moz_block(M)\";\n                    break;\n                default:\n                    throw new Error(\"Can't understand operator in propmap: \" + prop);\n            }\n        });\n\n        moz_to_me += \"\\n})\\n}\";\n        me_to_moz += \"\\n}\\n}\";\n\n        //moz_to_me = parse(moz_to_me).print_to_string({ beautify: true });\n        //me_to_moz = parse(me_to_moz).print_to_string({ beautify: true });\n        //console.log(moz_to_me);\n\n        moz_to_me = new Function(\"U2\", \"my_start_token\", \"my_end_token\", \"from_moz\", \"return(\" + moz_to_me + \")\")(\n            exports, my_start_token, my_end_token, from_moz\n        );\n        me_to_moz = new Function(\"to_moz\", \"to_moz_block\", \"to_moz_scope\", \"return(\" + me_to_moz + \")\")(\n            to_moz, to_moz_block, to_moz_scope\n        );\n        MOZ_TO_ME[moztype] = moz_to_me;\n        def_to_moz(mytype, me_to_moz);\n    };\n\n    var FROM_MOZ_STACK = null;\n\n    function from_moz(node) {\n        FROM_MOZ_STACK.push(node);\n        var ret = node != null ? MOZ_TO_ME[node.type](node) : null;\n        FROM_MOZ_STACK.pop();\n        return ret;\n    };\n\n    AST_Node.from_mozilla_ast = function(node){\n        var save_stack = FROM_MOZ_STACK;\n        FROM_MOZ_STACK = [];\n        var ast = from_moz(node);\n        FROM_MOZ_STACK = save_stack;\n        return ast;\n    };\n\n    function set_moz_loc(mynode, moznode, myparent) {\n        var start = mynode.start;\n        var end = mynode.end;\n        if (start.pos != null && end.endpos != null) {\n            moznode.range = [start.pos, end.endpos];\n        }\n        if (start.line) {\n            moznode.loc = {\n                start: {line: start.line, column: start.col},\n                end: end.endline ? {line: end.endline, column: end.endcol} : null\n            };\n            if (start.file) {\n                moznode.loc.source = start.file;\n            }\n        }\n        return moznode;\n    };\n\n    function def_to_moz(mytype, handler) {\n        mytype.DEFMETHOD(\"to_mozilla_ast\", function() {\n            return set_moz_loc(this, handler(this));\n        });\n    };\n\n    function to_moz(node) {\n        return node != null ? node.to_mozilla_ast() : null;\n    };\n\n    function to_moz_block(node) {\n        return {\n            type: \"BlockStatement\",\n            body: node.body.map(to_moz)\n        };\n    };\n\n    function to_moz_scope(type, node) {\n        var body = node.body.map(to_moz);\n        if (node.body[0] instanceof AST_SimpleStatement && node.body[0].body instanceof AST_String) {\n            body.unshift(to_moz(new AST_EmptyStatement(node.body[0])));\n        }\n        return {\n            type: type,\n            body: body\n        };\n    };\n})();\n"]}