{"version":3,"sources":["../../../../../qreact-app/node_modules/uglify-js/lib/output.js"],"names":["EXPECT_DIRECTIVE","is_some_comments","comment","type","test","value","OutputStream","options","defaults","ascii_only","beautify","bracketize","comments","ie8","indent_level","indent_start","inline_script","keep_quoted_props","max_line_len","preamble","preserve_line","quote_keys","quote_style","semicolons","shebang","source_map","width","wrap_iife","comment_filter","return_false","regex_pos","lastIndexOf","RegExp","substr","return_true","indentation","current_col","current_line","current_pos","OUTPUT","to_ascii","str","identifier","replace","ch","code","charCodeAt","toString","length","make_string","quote","dq","sq","s","i","charAt","quote_single","quote_double","encode_string","ret","make_name","name","make_indent","back","repeat_string","might_need_space","might_need_semicolon","might_add_newline","last","mapping_token","mapping_name","mappings","do_add_mapping","forEach","mapping","add","token","file","line","col","ex","AST_Node","warn","cline","ccol","noop","ensure_line_len","left","slice","right","delta","requireSemicolonChars","makePredicate","print","String","prev","indexOf","stack","target_line","start","is_identifier_char","push","a","split","n","space","indent","half","with_indent","cont","next_indent","save_indentation","newline","semicolon","force_semicolon","with_block","with_parens","with_square","comma","colon","add_mapping","get","current_width","should_break","print_name","print_string","escape_directive","encoded","option","opt","pos","push_node","node","pop_node","pop","parent","DEFPRINT","nodetype","generator","DEFMETHOD","use_asm","in_directive","stream","force_parens","self","_codegen","prev_use_asm","AST_Directive","AST_Scope","doit","add_comments","add_source_map","needs_parens","_readonly","output","_comments_dumped","comments_before","AST_Exit","walk","TreeWalker","concat","AST_Function","AST_Array","AST_Object","shift","filter","nlb","c","PARENS","func","Array","isArray","first_in_statement","p","AST_Call","expression","AST_Unary","AST_PropAccess","AST_Sequence","AST_Binary","AST_VarDef","AST_ObjectProperty","AST_Conditional","po","operator","pp","PRECEDENCE","so","sp","AST_New","p1","AST_Assign","need_constructor_parens","AST_Number","getValue","make_num","condition","AST_Debugger","display_body","body","is_toplevel","allow_directives","stmt","AST_EmptyStatement","AST_SimpleStatement","AST_String","AST_StatementWithBody","force_statement","AST_Statement","AST_Toplevel","AST_LabeledStatement","label","print_bracketed","AST_BlockStatement","AST_Do","make_block","AST_While","_do_print_body","AST_For","init","AST_Definitions","parenthesize_for_noin","step","AST_ForIn","object","AST_With","AST_Lambda","nokeyword","argnames","arg","_do_print","kind","AST_Return","AST_Throw","AST_LoopControl","AST_Break","AST_Continue","make_then","b","AST_If","alternative","AST_Switch","branch","AST_SwitchBranch","AST_Default","AST_Case","AST_Try","bcatch","bfinally","AST_Catch","argname","AST_Finally","definitions","def","in_for","avoid_semicolon","AST_Var","noin","args","expr","prototype","expressions","index","AST_Dot","end","property","AST_Sub","AST_UnaryPrefix","op","AST_UnaryPostfix","consequent","elements","len","exp","AST_Hole","properties","prop","print_property_name","key","parseFloat","RESERVED_WORDS","is_identifier_string","AST_ObjectKeyVal","AST_ObjectSetter","_print_getter_setter","AST_ObjectGetter","AST_Symbol","definition","mangled_name","AST_This","AST_Constant","raw","AST_RegExp","regexp","raw_source","stat","best_of","best","num","m","Math","floor","toLowerCase","exec","DEFMAP","basic_sourcemap_gen","AST_Jump"],"mappings":"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","file":"output.js","sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nvar EXPECT_DIRECTIVE = /^$|[;{][\\s\\n]*$/;\n\nfunction is_some_comments(comment) {\n    // multiline comment\n    return comment.type == \"comment2\" && /@preserve|@license|@cc_on/i.test(comment.value);\n}\n\nfunction OutputStream(options) {\n\n    options = defaults(options, {\n        ascii_only       : false,\n        beautify         : false,\n        bracketize       : false,\n        comments         : false,\n        ie8              : false,\n        indent_level     : 4,\n        indent_start     : 0,\n        inline_script    : true,\n        keep_quoted_props: false,\n        max_line_len     : false,\n        preamble         : null,\n        preserve_line    : false,\n        quote_keys       : false,\n        quote_style      : 0,\n        semicolons       : true,\n        shebang          : true,\n        source_map       : null,\n        width            : 80,\n        wrap_iife        : false,\n    }, true);\n\n    // Convert comment option to RegExp if neccessary and set up comments filter\n    var comment_filter = return_false; // Default case, throw all comments away\n    if (options.comments) {\n        var comments = options.comments;\n        if (typeof options.comments === \"string\" && /^\\/.*\\/[a-zA-Z]*$/.test(options.comments)) {\n            var regex_pos = options.comments.lastIndexOf(\"/\");\n            comments = new RegExp(\n                options.comments.substr(1, regex_pos - 1),\n                options.comments.substr(regex_pos + 1)\n            );\n        }\n        if (comments instanceof RegExp) {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments.test(comment.value);\n            };\n        }\n        else if (typeof comments === \"function\") {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments(this, comment);\n            };\n        }\n        else if (comments === \"some\") {\n            comment_filter = is_some_comments;\n        } else { // NOTE includes \"all\" option\n            comment_filter = return_true;\n        }\n    }\n\n    var indentation = 0;\n    var current_col = 0;\n    var current_line = 1;\n    var current_pos = 0;\n    var OUTPUT = \"\";\n\n    function to_ascii(str, identifier) {\n        return str.replace(/[\\u0000-\\u001f\\u007f-\\uffff]/g, function(ch) {\n            var code = ch.charCodeAt(0).toString(16);\n            if (code.length <= 2 && !identifier) {\n                while (code.length < 2) code = \"0\" + code;\n                return \"\\\\x\" + code;\n            } else {\n                while (code.length < 4) code = \"0\" + code;\n                return \"\\\\u\" + code;\n            }\n        });\n    };\n\n    function make_string(str, quote) {\n        var dq = 0, sq = 0;\n        str = str.replace(/[\\\\\\b\\f\\n\\r\\v\\t\\x22\\x27\\u2028\\u2029\\0\\ufeff]/g,\n          function(s, i){\n            switch (s) {\n              case '\"': ++dq; return '\"';\n              case \"'\": ++sq; return \"'\";\n              case \"\\\\\": return \"\\\\\\\\\";\n              case \"\\n\": return \"\\\\n\";\n              case \"\\r\": return \"\\\\r\";\n              case \"\\t\": return \"\\\\t\";\n              case \"\\b\": return \"\\\\b\";\n              case \"\\f\": return \"\\\\f\";\n              case \"\\x0B\": return options.ie8 ? \"\\\\x0B\" : \"\\\\v\";\n              case \"\\u2028\": return \"\\\\u2028\";\n              case \"\\u2029\": return \"\\\\u2029\";\n              case \"\\ufeff\": return \"\\\\ufeff\";\n              case \"\\0\":\n                  return /[0-7]/.test(str.charAt(i+1)) ? \"\\\\x00\" : \"\\\\0\";\n            }\n            return s;\n        });\n        function quote_single() {\n            return \"'\" + str.replace(/\\x27/g, \"\\\\'\") + \"'\";\n        }\n        function quote_double() {\n            return '\"' + str.replace(/\\x22/g, '\\\\\"') + '\"';\n        }\n        if (options.ascii_only) str = to_ascii(str);\n        switch (options.quote_style) {\n          case 1:\n            return quote_single();\n          case 2:\n            return quote_double();\n          case 3:\n            return quote == \"'\" ? quote_single() : quote_double();\n          default:\n            return dq > sq ? quote_single() : quote_double();\n        }\n    };\n\n    function encode_string(str, quote) {\n        var ret = make_string(str, quote);\n        if (options.inline_script) {\n            ret = ret.replace(/<\\x2fscript([>\\/\\t\\n\\f\\r ])/gi, \"<\\\\/script$1\");\n            ret = ret.replace(/\\x3c!--/g, \"\\\\x3c!--\");\n            ret = ret.replace(/--\\x3e/g, \"--\\\\x3e\");\n        }\n        return ret;\n    };\n\n    function make_name(name) {\n        name = name.toString();\n        if (options.ascii_only)\n            name = to_ascii(name, true);\n        return name;\n    };\n\n    function make_indent(back) {\n        return repeat_string(\" \", options.indent_start + indentation - back * options.indent_level);\n    };\n\n    /* -----[ beautification/minification ]----- */\n\n    var might_need_space = false;\n    var might_need_semicolon = false;\n    var might_add_newline = 0;\n    var last = \"\";\n    var mapping_token, mapping_name, mappings = options.source_map && [];\n\n    var do_add_mapping = mappings ? function() {\n        mappings.forEach(function(mapping) {\n            try {\n                options.source_map.add(\n                    mapping.token.file,\n                    mapping.line, mapping.col,\n                    mapping.token.line, mapping.token.col,\n                    !mapping.name && mapping.token.type == \"name\" ? mapping.token.value : mapping.name\n                );\n            } catch(ex) {\n                AST_Node.warn(\"Couldn't figure out mapping for {file}:{line},{col} → {cline},{ccol} [{name}]\", {\n                    file: mapping.token.file,\n                    line: mapping.token.line,\n                    col: mapping.token.col,\n                    cline: mapping.line,\n                    ccol: mapping.col,\n                    name: mapping.name || \"\"\n                })\n            }\n        });\n        mappings = [];\n    } : noop;\n\n    var ensure_line_len = options.max_line_len ? function() {\n        if (current_col > options.max_line_len) {\n            if (might_add_newline) {\n                var left = OUTPUT.slice(0, might_add_newline);\n                var right = OUTPUT.slice(might_add_newline);\n                if (mappings) {\n                    var delta = right.length - current_col;\n                    mappings.forEach(function(mapping) {\n                        mapping.line++;\n                        mapping.col += delta;\n                    });\n                }\n                OUTPUT = left + \"\\n\" + right;\n                current_line++;\n                current_pos++;\n                current_col = right.length;\n            }\n            if (current_col > options.max_line_len) {\n                AST_Node.warn(\"Output exceeds {max_line_len} characters\", options);\n            }\n        }\n        if (might_add_newline) {\n            might_add_newline = 0;\n            do_add_mapping();\n        }\n    } : noop;\n\n    var requireSemicolonChars = makePredicate(\"( [ + * / - , .\");\n\n    function print(str) {\n        str = String(str);\n        var ch = str.charAt(0);\n        var prev = last.charAt(last.length - 1);\n        if (might_need_semicolon) {\n            might_need_semicolon = false;\n\n            if (prev == \":\" && ch == \"}\" || (!ch || \";}\".indexOf(ch) < 0) && prev != \";\") {\n                if (options.semicolons || requireSemicolonChars(ch)) {\n                    OUTPUT += \";\";\n                    current_col++;\n                    current_pos++;\n                } else {\n                    ensure_line_len();\n                    OUTPUT += \"\\n\";\n                    current_pos++;\n                    current_line++;\n                    current_col = 0;\n\n                    if (/^\\s+$/.test(str)) {\n                        // reset the semicolon flag, since we didn't print one\n                        // now and might still have to later\n                        might_need_semicolon = true;\n                    }\n                }\n\n                if (!options.beautify)\n                    might_need_space = false;\n            }\n        }\n\n        if (!options.beautify && options.preserve_line && stack[stack.length - 1]) {\n            var target_line = stack[stack.length - 1].start.line;\n            while (current_line < target_line) {\n                ensure_line_len();\n                OUTPUT += \"\\n\";\n                current_pos++;\n                current_line++;\n                current_col = 0;\n                might_need_space = false;\n            }\n        }\n\n        if (might_need_space) {\n            if ((is_identifier_char(prev)\n                    && (is_identifier_char(ch) || ch == \"\\\\\"))\n                || (ch == \"/\" && ch == prev)\n                || ((ch == \"+\" || ch == \"-\") && ch == last))\n            {\n                OUTPUT += \" \";\n                current_col++;\n                current_pos++;\n            }\n            might_need_space = false;\n        }\n\n        if (mapping_token) {\n            mappings.push({\n                token: mapping_token,\n                name: mapping_name,\n                line: current_line,\n                col: current_col\n            });\n            mapping_token = false;\n            if (!might_add_newline) do_add_mapping();\n        }\n\n        OUTPUT += str;\n        current_pos += str.length;\n        var a = str.split(/\\r?\\n/), n = a.length - 1;\n        current_line += n;\n        current_col += a[0].length;\n        if (n > 0) {\n            ensure_line_len();\n            current_col = a[n].length;\n        }\n        last = str;\n    };\n\n    var space = options.beautify ? function() {\n        print(\" \");\n    } : function() {\n        might_need_space = true;\n    };\n\n    var indent = options.beautify ? function(half) {\n        if (options.beautify) {\n            print(make_indent(half ? 0.5 : 0));\n        }\n    } : noop;\n\n    var with_indent = options.beautify ? function(col, cont) {\n        if (col === true) col = next_indent();\n        var save_indentation = indentation;\n        indentation = col;\n        var ret = cont();\n        indentation = save_indentation;\n        return ret;\n    } : function(col, cont) { return cont() };\n\n    var newline = options.beautify ? function() {\n        print(\"\\n\");\n    } : options.max_line_len ? function() {\n        ensure_line_len();\n        might_add_newline = OUTPUT.length;\n    } : noop;\n\n    var semicolon = options.beautify ? function() {\n        print(\";\");\n    } : function() {\n        might_need_semicolon = true;\n    };\n\n    function force_semicolon() {\n        might_need_semicolon = false;\n        print(\";\");\n    };\n\n    function next_indent() {\n        return indentation + options.indent_level;\n    };\n\n    function with_block(cont) {\n        var ret;\n        print(\"{\");\n        newline();\n        with_indent(next_indent(), function(){\n            ret = cont();\n        });\n        indent();\n        print(\"}\");\n        return ret;\n    };\n\n    function with_parens(cont) {\n        print(\"(\");\n        //XXX: still nice to have that for argument lists\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\")\");\n        return ret;\n    };\n\n    function with_square(cont) {\n        print(\"[\");\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\"]\");\n        return ret;\n    };\n\n    function comma() {\n        print(\",\");\n        space();\n    };\n\n    function colon() {\n        print(\":\");\n        space();\n    };\n\n    var add_mapping = mappings ? function(token, name) {\n        mapping_token = token;\n        mapping_name = name;\n    } : noop;\n\n    function get() {\n        if (might_add_newline) {\n            ensure_line_len();\n        }\n        return OUTPUT;\n    };\n\n    var stack = [];\n    return {\n        get             : get,\n        toString        : get,\n        indent          : indent,\n        indentation     : function() { return indentation },\n        current_width   : function() { return current_col - indentation },\n        should_break    : function() { return options.width && this.current_width() >= options.width },\n        newline         : newline,\n        print           : print,\n        space           : space,\n        comma           : comma,\n        colon           : colon,\n        last            : function() { return last },\n        semicolon       : semicolon,\n        force_semicolon : force_semicolon,\n        to_ascii        : to_ascii,\n        print_name      : function(name) { print(make_name(name)) },\n        print_string    : function(str, quote, escape_directive) {\n            var encoded = encode_string(str, quote);\n            if (escape_directive === true && encoded.indexOf(\"\\\\\") === -1) {\n                // Insert semicolons to break directive prologue\n                if (!EXPECT_DIRECTIVE.test(OUTPUT)) {\n                    force_semicolon();\n                }\n                force_semicolon();\n            }\n            print(encoded);\n        },\n        encode_string   : encode_string,\n        next_indent     : next_indent,\n        with_indent     : with_indent,\n        with_block      : with_block,\n        with_parens     : with_parens,\n        with_square     : with_square,\n        add_mapping     : add_mapping,\n        option          : function(opt) { return options[opt] },\n        comment_filter  : comment_filter,\n        line            : function() { return current_line },\n        col             : function() { return current_col },\n        pos             : function() { return current_pos },\n        push_node       : function(node) { stack.push(node) },\n        pop_node        : function() { return stack.pop() },\n        parent          : function(n) {\n            return stack[stack.length - 2 - (n || 0)];\n        }\n    };\n\n};\n\n/* -----[ code generators ]----- */\n\n(function(){\n\n    /* -----[ utils ]----- */\n\n    function DEFPRINT(nodetype, generator) {\n        nodetype.DEFMETHOD(\"_codegen\", generator);\n    };\n\n    var use_asm = false;\n    var in_directive = false;\n\n    AST_Node.DEFMETHOD(\"print\", function(stream, force_parens){\n        var self = this, generator = self._codegen, prev_use_asm = use_asm;\n        if (self instanceof AST_Directive && self.value == \"use asm\" && stream.parent() instanceof AST_Scope) {\n            use_asm = true;\n        }\n        function doit() {\n            self.add_comments(stream);\n            self.add_source_map(stream);\n            generator(self, stream);\n        }\n        stream.push_node(self);\n        if (force_parens || self.needs_parens(stream)) {\n            stream.with_parens(doit);\n        } else {\n            doit();\n        }\n        stream.pop_node();\n        if (self instanceof AST_Scope) {\n            use_asm = prev_use_asm;\n        }\n    });\n\n    AST_Node.DEFMETHOD(\"print_to_string\", function(options){\n        var s = OutputStream(options);\n        if (!options) s._readonly = true;\n        this.print(s);\n        return s.get();\n    });\n\n    /* -----[ comments ]----- */\n\n    AST_Node.DEFMETHOD(\"add_comments\", function(output){\n        if (output._readonly) return;\n        var self = this;\n        var start = self.start;\n        if (start && !start._comments_dumped) {\n            start._comments_dumped = true;\n            var comments = start.comments_before || [];\n\n            // XXX: ugly fix for https://github.com/mishoo/UglifyJS2/issues/112\n            //               and https://github.com/mishoo/UglifyJS2/issues/372\n            if (self instanceof AST_Exit && self.value) {\n                self.value.walk(new TreeWalker(function(node){\n                    if (node.start && node.start.comments_before) {\n                        comments = comments.concat(node.start.comments_before);\n                        node.start.comments_before = [];\n                    }\n                    if (node instanceof AST_Function ||\n                        node instanceof AST_Array ||\n                        node instanceof AST_Object)\n                    {\n                        return true; // don't go inside.\n                    }\n                }));\n            }\n\n            if (output.pos() == 0) {\n                if (comments.length > 0 && output.option(\"shebang\") && comments[0].type == \"comment5\") {\n                    output.print(\"#!\" + comments.shift().value + \"\\n\");\n                    output.indent();\n                }\n                var preamble = output.option(\"preamble\");\n                if (preamble) {\n                    output.print(preamble.replace(/\\r\\n?|[\\n\\u2028\\u2029]|\\s*$/g, \"\\n\"));\n                }\n            }\n\n            comments = comments.filter(output.comment_filter, self);\n\n            // Keep single line comments after nlb, after nlb\n            if (!output.option(\"beautify\") && comments.length > 0 &&\n                /comment[134]/.test(comments[0].type) &&\n                output.col() !== 0 && comments[0].nlb)\n            {\n                output.print(\"\\n\");\n            }\n\n            comments.forEach(function(c){\n                if (/comment[134]/.test(c.type)) {\n                    output.print(\"//\" + c.value + \"\\n\");\n                    output.indent();\n                }\n                else if (c.type == \"comment2\") {\n                    output.print(\"/*\" + c.value + \"*/\");\n                    if (start.nlb) {\n                        output.print(\"\\n\");\n                        output.indent();\n                    } else {\n                        output.space();\n                    }\n                }\n            });\n        }\n    });\n\n    /* -----[ PARENTHESES ]----- */\n\n    function PARENS(nodetype, func) {\n        if (Array.isArray(nodetype)) {\n            nodetype.forEach(function(nodetype){\n                PARENS(nodetype, func);\n            });\n        } else {\n            nodetype.DEFMETHOD(\"needs_parens\", func);\n        }\n    };\n\n    PARENS(AST_Node, function(){\n        return false;\n    });\n\n    // a function expression needs parens around it when it's provably\n    // the first token to appear in a statement.\n    PARENS(AST_Function, function(output){\n        if (first_in_statement(output)) {\n            return true;\n        }\n\n        if (output.option('wrap_iife')) {\n            var p = output.parent();\n            return p instanceof AST_Call && p.expression === this;\n        }\n\n        return false;\n    });\n\n    // same goes for an object literal, because otherwise it would be\n    // interpreted as a block of code.\n    PARENS(AST_Object, function(output){\n        return first_in_statement(output);\n    });\n\n    PARENS(AST_Unary, function(output){\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this\n            || p instanceof AST_Call && p.expression === this;\n    });\n\n    PARENS(AST_Sequence, function(output){\n        var p = output.parent();\n        return p instanceof AST_Call             // (foo, bar)() or foo(1, (2, 3), 4)\n            || p instanceof AST_Unary            // !(foo, bar, baz)\n            || p instanceof AST_Binary           // 1 + (2, 3) + 4 ==> 8\n            || p instanceof AST_VarDef           // var a = (1, 2), b = a + a; ==> b == 4\n            || p instanceof AST_PropAccess       // (1, {foo:2}).foo or (1, {foo:2})[\"foo\"] ==> 2\n            || p instanceof AST_Array            // [ 1, (2, 3), 4 ] ==> [ 1, 3, 4 ]\n            || p instanceof AST_ObjectProperty   // { foo: (1, 2) }.foo ==> 2\n            || p instanceof AST_Conditional      /* (false, true) ? (a = 10, b = 20) : (c = 30)\n                                                  * ==> 20 (side effect, set a := 10 and b := 20) */\n        ;\n    });\n\n    PARENS(AST_Binary, function(output){\n        var p = output.parent();\n        // (foo && bar)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // typeof (foo && bar)\n        if (p instanceof AST_Unary)\n            return true;\n        // (foo && bar)[\"prop\"], (foo && bar).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n        // this deals with precedence: 3 * (2 + 1)\n        if (p instanceof AST_Binary) {\n            var po = p.operator, pp = PRECEDENCE[po];\n            var so = this.operator, sp = PRECEDENCE[so];\n            if (pp > sp\n                || (pp == sp\n                    && this === p.right)) {\n                return true;\n            }\n        }\n    });\n\n    PARENS(AST_PropAccess, function(output){\n        var p = output.parent();\n        if (p instanceof AST_New && p.expression === this) {\n            // i.e. new (foo.bar().baz)\n            //\n            // if there's one call into this subtree, then we need\n            // parens around it too, otherwise the call will be\n            // interpreted as passing the arguments to the upper New\n            // expression.\n            try {\n                this.walk(new TreeWalker(function(node){\n                    if (node instanceof AST_Call) throw p;\n                }));\n            } catch(ex) {\n                if (ex !== p) throw ex;\n                return true;\n            }\n        }\n    });\n\n    PARENS(AST_Call, function(output){\n        var p = output.parent(), p1;\n        if (p instanceof AST_New && p.expression === this)\n            return true;\n\n        // workaround for Safari bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=123506\n        return this.expression instanceof AST_Function\n            && p instanceof AST_PropAccess\n            && p.expression === this\n            && (p1 = output.parent(1)) instanceof AST_Assign\n            && p1.left === p;\n    });\n\n    PARENS(AST_New, function(output){\n        var p = output.parent();\n        if (!need_constructor_parens(this, output)\n            && (p instanceof AST_PropAccess // (new Date).getTime(), (new Date)[\"getTime\"]()\n                || p instanceof AST_Call && p.expression === this)) // (new foo)(bar)\n            return true;\n    });\n\n    PARENS(AST_Number, function(output){\n        var p = output.parent();\n        if (p instanceof AST_PropAccess && p.expression === this) {\n            var value = this.getValue();\n            if (value < 0 || /^0/.test(make_num(value))) {\n                return true;\n            }\n        }\n    });\n\n    PARENS([ AST_Assign, AST_Conditional ], function(output){\n        var p = output.parent();\n        // !(a = false) → true\n        if (p instanceof AST_Unary)\n            return true;\n        // 1 + (a = 2) + 3 → 6, side effect setting a = 2\n        if (p instanceof AST_Binary && !(p instanceof AST_Assign))\n            return true;\n        // (a = func)() —or— new (a = Object)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // (a = foo) ? bar : baz\n        if (p instanceof AST_Conditional && p.condition === this)\n            return true;\n        // (a = foo)[\"prop\"] —or— (a = foo).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n    });\n\n    /* -----[ PRINTERS ]----- */\n\n    DEFPRINT(AST_Directive, function(self, output){\n        output.print_string(self.value, self.quote);\n        output.semicolon();\n    });\n    DEFPRINT(AST_Debugger, function(self, output){\n        output.print(\"debugger\");\n        output.semicolon();\n    });\n\n    /* -----[ statements ]----- */\n\n    function display_body(body, is_toplevel, output, allow_directives) {\n        var last = body.length - 1;\n        in_directive = allow_directives;\n        body.forEach(function(stmt, i){\n            if (in_directive === true && !(stmt instanceof AST_Directive ||\n                stmt instanceof AST_EmptyStatement ||\n                (stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String)\n            )) {\n                in_directive = false;\n            }\n            if (!(stmt instanceof AST_EmptyStatement)) {\n                output.indent();\n                stmt.print(output);\n                if (!(i == last && is_toplevel)) {\n                    output.newline();\n                    if (is_toplevel) output.newline();\n                }\n            }\n            if (in_directive === true &&\n                stmt instanceof AST_SimpleStatement &&\n                stmt.body instanceof AST_String\n            ) {\n                in_directive = false;\n            }\n        });\n        in_directive = false;\n    };\n\n    AST_StatementWithBody.DEFMETHOD(\"_do_print_body\", function(output){\n        force_statement(this.body, output);\n    });\n\n    DEFPRINT(AST_Statement, function(self, output){\n        self.body.print(output);\n        output.semicolon();\n    });\n    DEFPRINT(AST_Toplevel, function(self, output){\n        display_body(self.body, true, output, true);\n        output.print(\"\");\n    });\n    DEFPRINT(AST_LabeledStatement, function(self, output){\n        self.label.print(output);\n        output.colon();\n        self.body.print(output);\n    });\n    DEFPRINT(AST_SimpleStatement, function(self, output){\n        self.body.print(output);\n        output.semicolon();\n    });\n    function print_bracketed(body, output, allow_directives) {\n        if (body.length > 0) output.with_block(function(){\n            display_body(body, false, output, allow_directives);\n        });\n        else output.print(\"{}\");\n    };\n    DEFPRINT(AST_BlockStatement, function(self, output){\n        print_bracketed(self.body, output);\n    });\n    DEFPRINT(AST_EmptyStatement, function(self, output){\n        output.semicolon();\n    });\n    DEFPRINT(AST_Do, function(self, output){\n        output.print(\"do\");\n        output.space();\n        make_block(self.body, output);\n        output.space();\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function(){\n            self.condition.print(output);\n        });\n        output.semicolon();\n    });\n    DEFPRINT(AST_While, function(self, output){\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function(){\n            self.condition.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_For, function(self, output){\n        output.print(\"for\");\n        output.space();\n        output.with_parens(function(){\n            if (self.init) {\n                if (self.init instanceof AST_Definitions) {\n                    self.init.print(output);\n                } else {\n                    parenthesize_for_noin(self.init, output, true);\n                }\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.condition) {\n                self.condition.print(output);\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.step) {\n                self.step.print(output);\n            }\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_ForIn, function(self, output){\n        output.print(\"for\");\n        output.space();\n        output.with_parens(function(){\n            self.init.print(output);\n            output.space();\n            output.print(\"in\");\n            output.space();\n            self.object.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_With, function(self, output){\n        output.print(\"with\");\n        output.space();\n        output.with_parens(function(){\n            self.expression.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n\n    /* -----[ functions ]----- */\n    AST_Lambda.DEFMETHOD(\"_do_print\", function(output, nokeyword){\n        var self = this;\n        if (!nokeyword) {\n            output.print(\"function\");\n        }\n        if (self.name) {\n            output.space();\n            self.name.print(output);\n        }\n        output.with_parens(function(){\n            self.argnames.forEach(function(arg, i){\n                if (i) output.comma();\n                arg.print(output);\n            });\n        });\n        output.space();\n        print_bracketed(self.body, output, true);\n    });\n    DEFPRINT(AST_Lambda, function(self, output){\n        self._do_print(output);\n    });\n\n    /* -----[ exits ]----- */\n    AST_Exit.DEFMETHOD(\"_do_print\", function(output, kind){\n        output.print(kind);\n        if (this.value) {\n            output.space();\n            this.value.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Return, function(self, output){\n        self._do_print(output, \"return\");\n    });\n    DEFPRINT(AST_Throw, function(self, output){\n        self._do_print(output, \"throw\");\n    });\n\n    /* -----[ loop control ]----- */\n    AST_LoopControl.DEFMETHOD(\"_do_print\", function(output, kind){\n        output.print(kind);\n        if (this.label) {\n            output.space();\n            this.label.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Break, function(self, output){\n        self._do_print(output, \"break\");\n    });\n    DEFPRINT(AST_Continue, function(self, output){\n        self._do_print(output, \"continue\");\n    });\n\n    /* -----[ if ]----- */\n    function make_then(self, output) {\n        var b = self.body;\n        if (output.option(\"bracketize\")\n            || output.option(\"ie8\") && b instanceof AST_Do)\n            return make_block(b, output);\n        // The squeezer replaces \"block\"-s that contain only a single\n        // statement with the statement itself; technically, the AST\n        // is correct, but this can create problems when we output an\n        // IF having an ELSE clause where the THEN clause ends in an\n        // IF *without* an ELSE block (then the outer ELSE would refer\n        // to the inner IF).  This function checks for this case and\n        // adds the block brackets if needed.\n        if (!b) return output.force_semicolon();\n        while (true) {\n            if (b instanceof AST_If) {\n                if (!b.alternative) {\n                    make_block(self.body, output);\n                    return;\n                }\n                b = b.alternative;\n            }\n            else if (b instanceof AST_StatementWithBody) {\n                b = b.body;\n            }\n            else break;\n        }\n        force_statement(self.body, output);\n    };\n    DEFPRINT(AST_If, function(self, output){\n        output.print(\"if\");\n        output.space();\n        output.with_parens(function(){\n            self.condition.print(output);\n        });\n        output.space();\n        if (self.alternative) {\n            make_then(self, output);\n            output.space();\n            output.print(\"else\");\n            output.space();\n            if (self.alternative instanceof AST_If)\n                self.alternative.print(output);\n            else\n                force_statement(self.alternative, output);\n        } else {\n            self._do_print_body(output);\n        }\n    });\n\n    /* -----[ switch ]----- */\n    DEFPRINT(AST_Switch, function(self, output){\n        output.print(\"switch\");\n        output.space();\n        output.with_parens(function(){\n            self.expression.print(output);\n        });\n        output.space();\n        var last = self.body.length - 1;\n        if (last < 0) output.print(\"{}\");\n        else output.with_block(function(){\n            self.body.forEach(function(branch, i){\n                output.indent(true);\n                branch.print(output);\n                if (i < last && branch.body.length > 0)\n                    output.newline();\n            });\n        });\n    });\n    AST_SwitchBranch.DEFMETHOD(\"_do_print_body\", function(output){\n        output.newline();\n        this.body.forEach(function(stmt){\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    });\n    DEFPRINT(AST_Default, function(self, output){\n        output.print(\"default:\");\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_Case, function(self, output){\n        output.print(\"case\");\n        output.space();\n        self.expression.print(output);\n        output.print(\":\");\n        self._do_print_body(output);\n    });\n\n    /* -----[ exceptions ]----- */\n    DEFPRINT(AST_Try, function(self, output){\n        output.print(\"try\");\n        output.space();\n        print_bracketed(self.body, output);\n        if (self.bcatch) {\n            output.space();\n            self.bcatch.print(output);\n        }\n        if (self.bfinally) {\n            output.space();\n            self.bfinally.print(output);\n        }\n    });\n    DEFPRINT(AST_Catch, function(self, output){\n        output.print(\"catch\");\n        output.space();\n        output.with_parens(function(){\n            self.argname.print(output);\n        });\n        output.space();\n        print_bracketed(self.body, output);\n    });\n    DEFPRINT(AST_Finally, function(self, output){\n        output.print(\"finally\");\n        output.space();\n        print_bracketed(self.body, output);\n    });\n\n    /* -----[ var/const ]----- */\n    AST_Definitions.DEFMETHOD(\"_do_print\", function(output, kind){\n        output.print(kind);\n        output.space();\n        this.definitions.forEach(function(def, i){\n            if (i) output.comma();\n            def.print(output);\n        });\n        var p = output.parent();\n        var in_for = p instanceof AST_For || p instanceof AST_ForIn;\n        var avoid_semicolon = in_for && p.init === this;\n        if (!avoid_semicolon)\n            output.semicolon();\n    });\n    DEFPRINT(AST_Var, function(self, output){\n        self._do_print(output, \"var\");\n    });\n\n    function parenthesize_for_noin(node, output, noin) {\n        if (!noin) node.print(output);\n        else try {\n            // need to take some precautions here:\n            //    https://github.com/mishoo/UglifyJS2/issues/60\n            node.walk(new TreeWalker(function(node){\n                if (node instanceof AST_Binary && node.operator == \"in\")\n                    throw output;\n            }));\n            node.print(output);\n        } catch(ex) {\n            if (ex !== output) throw ex;\n            node.print(output, true);\n        }\n    };\n\n    DEFPRINT(AST_VarDef, function(self, output){\n        self.name.print(output);\n        if (self.value) {\n            output.space();\n            output.print(\"=\");\n            output.space();\n            var p = output.parent(1);\n            var noin = p instanceof AST_For || p instanceof AST_ForIn;\n            parenthesize_for_noin(self.value, output, noin);\n        }\n    });\n\n    /* -----[ other expressions ]----- */\n    DEFPRINT(AST_Call, function(self, output){\n        self.expression.print(output);\n        if (self instanceof AST_New && !need_constructor_parens(self, output))\n            return;\n        output.with_parens(function(){\n            self.args.forEach(function(expr, i){\n                if (i) output.comma();\n                expr.print(output);\n            });\n        });\n    });\n    DEFPRINT(AST_New, function(self, output){\n        output.print(\"new\");\n        output.space();\n        AST_Call.prototype._codegen(self, output);\n    });\n\n    AST_Sequence.DEFMETHOD(\"_do_print\", function(output){\n        this.expressions.forEach(function(node, index) {\n            if (index > 0) {\n                output.comma();\n                if (output.should_break()) {\n                    output.newline();\n                    output.indent();\n                }\n            }\n            node.print(output);\n        });\n    });\n    DEFPRINT(AST_Sequence, function(self, output){\n        self._do_print(output);\n        // var p = output.parent();\n        // if (p instanceof AST_Statement) {\n        //     output.with_indent(output.next_indent(), function(){\n        //         self._do_print(output);\n        //     });\n        // } else {\n        //     self._do_print(output);\n        // }\n    });\n    DEFPRINT(AST_Dot, function(self, output){\n        var expr = self.expression;\n        expr.print(output);\n        if (expr instanceof AST_Number && expr.getValue() >= 0) {\n            if (!/[xa-f.)]/i.test(output.last())) {\n                output.print(\".\");\n            }\n        }\n        output.print(\".\");\n        // the name after dot would be mapped about here.\n        output.add_mapping(self.end);\n        output.print_name(self.property);\n    });\n    DEFPRINT(AST_Sub, function(self, output){\n        self.expression.print(output);\n        output.print(\"[\");\n        self.property.print(output);\n        output.print(\"]\");\n    });\n    DEFPRINT(AST_UnaryPrefix, function(self, output){\n        var op = self.operator;\n        output.print(op);\n        if (/^[a-z]/i.test(op)\n            || (/[+-]$/.test(op)\n                && self.expression instanceof AST_UnaryPrefix\n                && /^[+-]/.test(self.expression.operator))) {\n            output.space();\n        }\n        self.expression.print(output);\n    });\n    DEFPRINT(AST_UnaryPostfix, function(self, output){\n        self.expression.print(output);\n        output.print(self.operator);\n    });\n    DEFPRINT(AST_Binary, function(self, output){\n        var op = self.operator;\n        self.left.print(output);\n        if (op[0] == \">\" /* \">>\" \">>>\" \">\" \">=\" */\n            && self.left instanceof AST_UnaryPostfix\n            && self.left.operator == \"--\") {\n            // space is mandatory to avoid outputting -->\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        output.print(op);\n        if ((op == \"<\" || op == \"<<\")\n            && self.right instanceof AST_UnaryPrefix\n            && self.right.operator == \"!\"\n            && self.right.expression instanceof AST_UnaryPrefix\n            && self.right.expression.operator == \"--\") {\n            // space is mandatory to avoid outputting <!--\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        self.right.print(output);\n    });\n    DEFPRINT(AST_Conditional, function(self, output){\n        self.condition.print(output);\n        output.space();\n        output.print(\"?\");\n        output.space();\n        self.consequent.print(output);\n        output.space();\n        output.colon();\n        self.alternative.print(output);\n    });\n\n    /* -----[ literals ]----- */\n    DEFPRINT(AST_Array, function(self, output){\n        output.with_square(function(){\n            var a = self.elements, len = a.length;\n            if (len > 0) output.space();\n            a.forEach(function(exp, i){\n                if (i) output.comma();\n                exp.print(output);\n                // If the final element is a hole, we need to make sure it\n                // doesn't look like a trailing comma, by inserting an actual\n                // trailing comma.\n                if (i === len - 1 && exp instanceof AST_Hole)\n                  output.comma();\n            });\n            if (len > 0) output.space();\n        });\n    });\n    DEFPRINT(AST_Object, function(self, output){\n        if (self.properties.length > 0) output.with_block(function(){\n            self.properties.forEach(function(prop, i){\n                if (i) {\n                    output.print(\",\");\n                    output.newline();\n                }\n                output.indent();\n                prop.print(output);\n            });\n            output.newline();\n        });\n        else output.print(\"{}\");\n    });\n\n    function print_property_name(key, quote, output) {\n        if (output.option(\"quote_keys\")) {\n            output.print_string(key + \"\");\n        } else if ((typeof key == \"number\"\n                    || !output.option(\"beautify\")\n                    && +key + \"\" == key)\n                   && parseFloat(key) >= 0) {\n            output.print(make_num(key));\n        } else if (RESERVED_WORDS(key) ? !output.option(\"ie8\") : is_identifier_string(key)) {\n            if (quote && output.option(\"keep_quoted_props\")) {\n                output.print_string(key, quote);\n            } else {\n                output.print_name(key);\n            }\n        } else {\n            output.print_string(key, quote);\n        }\n    }\n\n    DEFPRINT(AST_ObjectKeyVal, function(self, output){\n        print_property_name(self.key, self.quote, output);\n        output.colon();\n        self.value.print(output);\n    });\n    AST_ObjectProperty.DEFMETHOD(\"_print_getter_setter\", function(type, output) {\n        output.print(type);\n        output.space();\n        print_property_name(this.key.name, this.quote, output);\n        this.value._do_print(output, true);\n    });\n    DEFPRINT(AST_ObjectSetter, function(self, output){\n        self._print_getter_setter(\"set\", output);\n    });\n    DEFPRINT(AST_ObjectGetter, function(self, output){\n        self._print_getter_setter(\"get\", output);\n    });\n    DEFPRINT(AST_Symbol, function(self, output){\n        var def = self.definition();\n        output.print_name(def ? def.mangled_name || def.name : self.name);\n    });\n    DEFPRINT(AST_Hole, noop);\n    DEFPRINT(AST_This, function(self, output){\n        output.print(\"this\");\n    });\n    DEFPRINT(AST_Constant, function(self, output){\n        output.print(self.getValue());\n    });\n    DEFPRINT(AST_String, function(self, output){\n        output.print_string(self.getValue(), self.quote, in_directive);\n    });\n    DEFPRINT(AST_Number, function(self, output){\n        if (use_asm && self.start && self.start.raw != null) {\n            output.print(self.start.raw);\n        } else {\n            output.print(make_num(self.getValue()));\n        }\n    });\n\n    DEFPRINT(AST_RegExp, function(self, output){\n        var regexp = self.getValue();\n        var str = regexp.toString();\n        if (regexp.raw_source) {\n            str = \"/\" + regexp.raw_source + str.slice(str.lastIndexOf(\"/\"));\n        }\n        if (output.option(\"ascii_only\")) {\n            str = output.to_ascii(str);\n        }\n        output.print(str);\n        var p = output.parent();\n        if (p instanceof AST_Binary && /^in/.test(p.operator) && p.left === self)\n            output.print(\" \");\n    });\n\n    function force_statement(stat, output) {\n        if (output.option(\"bracketize\")) {\n            make_block(stat, output);\n        } else {\n            if (!stat || stat instanceof AST_EmptyStatement)\n                output.force_semicolon();\n            else\n                stat.print(output);\n        }\n    };\n\n    // self should be AST_New.  decide if we want to show parens or not.\n    function need_constructor_parens(self, output) {\n        // Always print parentheses with arguments\n        if (self.args.length > 0) return true;\n\n        return output.option(\"beautify\");\n    };\n\n    function best_of(a) {\n        var best = a[0], len = best.length;\n        for (var i = 1; i < a.length; ++i) {\n            if (a[i].length < len) {\n                best = a[i];\n                len = best.length;\n            }\n        }\n        return best;\n    };\n\n    function make_num(num) {\n        var str = num.toString(10), a = [ str.replace(/^0\\./, \".\").replace('e+', 'e') ], m;\n        if (Math.floor(num) === num) {\n            if (num >= 0) {\n                a.push(\"0x\" + num.toString(16).toLowerCase(), // probably pointless\n                       \"0\" + num.toString(8)); // same.\n            } else {\n                a.push(\"-0x\" + (-num).toString(16).toLowerCase(), // probably pointless\n                       \"-0\" + (-num).toString(8)); // same.\n            }\n            if ((m = /^(.*?)(0+)$/.exec(num))) {\n                a.push(m[1] + \"e\" + m[2].length);\n            }\n        } else if ((m = /^0?\\.(0+)(.*)$/.exec(num))) {\n            a.push(m[2] + \"e-\" + (m[1].length + m[2].length),\n                   str.substr(str.indexOf(\".\")));\n        }\n        return best_of(a);\n    };\n\n    function make_block(stmt, output) {\n        if (!stmt || stmt instanceof AST_EmptyStatement)\n            output.print(\"{}\");\n        else if (stmt instanceof AST_BlockStatement)\n            stmt.print(output);\n        else output.with_block(function(){\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    };\n\n    /* -----[ source map generators ]----- */\n\n    function DEFMAP(nodetype, generator) {\n        nodetype.DEFMETHOD(\"add_source_map\", function(stream){\n            generator(this, stream);\n        });\n    };\n\n    // We could easily add info for ALL nodes, but it seems to me that\n    // would be quite wasteful, hence this noop in the base class.\n    DEFMAP(AST_Node, noop);\n\n    function basic_sourcemap_gen(self, output) {\n        output.add_mapping(self.start);\n    };\n\n    // XXX: I'm not exactly sure if we need it for all of these nodes,\n    // or if we should add even more.\n\n    DEFMAP(AST_Directive, basic_sourcemap_gen);\n    DEFMAP(AST_Debugger, basic_sourcemap_gen);\n    DEFMAP(AST_Symbol, basic_sourcemap_gen);\n    DEFMAP(AST_Jump, basic_sourcemap_gen);\n    DEFMAP(AST_StatementWithBody, basic_sourcemap_gen);\n    DEFMAP(AST_LabeledStatement, noop); // since the label symbol will mark it\n    DEFMAP(AST_Lambda, basic_sourcemap_gen);\n    DEFMAP(AST_Switch, basic_sourcemap_gen);\n    DEFMAP(AST_SwitchBranch, basic_sourcemap_gen);\n    DEFMAP(AST_BlockStatement, basic_sourcemap_gen);\n    DEFMAP(AST_Toplevel, noop);\n    DEFMAP(AST_New, basic_sourcemap_gen);\n    DEFMAP(AST_Try, basic_sourcemap_gen);\n    DEFMAP(AST_Catch, basic_sourcemap_gen);\n    DEFMAP(AST_Finally, basic_sourcemap_gen);\n    DEFMAP(AST_Definitions, basic_sourcemap_gen);\n    DEFMAP(AST_Constant, basic_sourcemap_gen);\n    DEFMAP(AST_ObjectSetter, function(self, output){\n        output.add_mapping(self.start, self.key.name);\n    });\n    DEFMAP(AST_ObjectGetter, function(self, output){\n        output.add_mapping(self.start, self.key.name);\n    });\n    DEFMAP(AST_ObjectProperty, function(self, output){\n        output.add_mapping(self.start, self.key);\n    });\n\n})();\n"]}