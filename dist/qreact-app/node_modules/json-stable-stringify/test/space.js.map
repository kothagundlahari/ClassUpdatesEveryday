{"version":3,"sources":["../../../../../qreact-app/node_modules/json-stable-stringify/test/space.js"],"names":["test","require","stringify","t","plan","obj","one","two","equal","space","b","a","JSON"],"mappings":";;AAAA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,YAAYD,QAAQ,KAAR,CAAhB;;AAEAD,KAAK,iBAAL,EAAwB,UAAUG,CAAV,EAAa;AACjCA,MAAEC,IAAF,CAAO,CAAP;AACA,QAAIC,MAAM,EAAEC,KAAK,CAAP,EAAUC,KAAK,CAAf,EAAV;AACAJ,MAAEK,KAAF,CAAQN,UAAUG,GAAV,EAAe,EAACI,OAAO,IAAR,EAAf,CAAR,EAAuC,KACjC,KADiC,GAEjC,eAFiC,GAGjC,cAHiC,GAIjC,GAJN;AAMH,CATD;;AAWAT,KAAK,6BAAL,EAAoC,UAAUG,CAAV,EAAa;AAC7CA,MAAEC,IAAF,CAAO,CAAP;AACA,QAAIC,MAAM,EAAEC,KAAK,CAAP,EAAUC,KAAK,CAAf,EAAV;AACAJ,MAAEK,KAAF,CAAQN,UAAUG,GAAV,EAAe,EAACI,OAAO,IAAR,EAAf,CAAR,EAAuC,KACjC,KADiC,GAEjC,eAFiC,GAGjC,cAHiC,GAIjC,GAJN;AAMH,CATD;;AAWAT,KAAK,iCAAL,EAAwC,UAAUG,CAAV,EAAa;AACjDA,MAAEC,IAAF,CAAO,CAAP;AACA,QAAIC,MAAM,EAAEC,KAAK,CAAP,EAAUC,KAAK,CAAf,EAAV;AACAJ,MAAEK,KAAF,CAAQN,UAAUG,GAAV,EAAe,EAACI,OAAO,CAAR,EAAf,CAAR,EAAoC,KAC9B,KAD8B,GAE9B,gBAF8B,GAG9B,eAH8B,GAI9B,GAJN;AAMH,CATD;;AAWAT,KAAK,kCAAL,EAAyC,UAAUG,CAAV,EAAa;AAClDA,MAAEC,IAAF,CAAO,CAAP;AACA,QAAIC,MAAM,EAAEC,KAAK,CAAP,EAAUC,KAAK,EAAEG,GAAG,CAAL,EAAQC,GAAG,CAAC,CAAD,EAAG,CAAH,CAAX,EAAf,EAAV;AACAR,MAAEK,KAAF,CAAQN,UAAUG,GAAV,EAAe,EAACI,OAAO,IAAR,EAAf,CAAR,EAAuC,KACjC,KADiC,GAEjC,eAFiC,GAGjC,cAHiC,GAIjC,cAJiC,GAKjC,YALiC,GAMjC,WANiC,GAOjC,UAPiC,GAQjC,cARiC,GASjC,OATiC,GAUjC,GAVN;AAYH,CAfD;;AAiBAT,KAAK,kCAAL,EAAyC,UAAUG,CAAV,EAAa;AAClDA,MAAEC,IAAF,CAAO,CAAP;AACA;AACA,QAAIC,MAAM,EAAEC,KAAK,CAAP,EAAUC,KAAK,EAAEI,GAAG,CAAC,CAAD,EAAG,CAAH,CAAL,EAAYD,GAAG,CAAf,EAAf,EAAV;AACAP,MAAEK,KAAF,CAAQN,UAAUG,GAAV,EAAe,EAACI,OAAO,IAAR,EAAf,CAAR,EAAuCG,KAAKV,SAAL,CAAeG,GAAf,EAAoB,IAApB,EAA0B,IAA1B,CAAvC;AACH,CALD","file":"space.js","sourcesContent":["var test = require('tape');\nvar stringify = require('../');\n\ntest('space parameter', function (t) {\n    t.plan(1);\n    var obj = { one: 1, two: 2 };\n    t.equal(stringify(obj, {space: '  '}), ''\n        + '{\\n'\n        + '  \"one\": 1,\\n'\n        + '  \"two\": 2\\n'\n        + '}'\n    );\n});\n\ntest('space parameter (with tabs)', function (t) {\n    t.plan(1);\n    var obj = { one: 1, two: 2 };\n    t.equal(stringify(obj, {space: '\\t'}), ''\n        + '{\\n'\n        + '\\t\"one\": 1,\\n'\n        + '\\t\"two\": 2\\n'\n        + '}'\n    );\n});\n\ntest('space parameter (with a number)', function (t) {\n    t.plan(1);\n    var obj = { one: 1, two: 2 };\n    t.equal(stringify(obj, {space: 3}), ''\n        + '{\\n'\n        + '   \"one\": 1,\\n'\n        + '   \"two\": 2\\n'\n        + '}'\n    );\n});\n\ntest('space parameter (nested objects)', function (t) {\n    t.plan(1);\n    var obj = { one: 1, two: { b: 4, a: [2,3] } };\n    t.equal(stringify(obj, {space: '  '}), ''\n        + '{\\n'\n        + '  \"one\": 1,\\n'\n        + '  \"two\": {\\n'\n        + '    \"a\": [\\n'\n        + '      2,\\n'\n        + '      3\\n'\n        + '    ],\\n'\n        + '    \"b\": 4\\n'\n        + '  }\\n'\n        + '}'\n    );\n});\n\ntest('space parameter (same as native)', function (t) {\n    t.plan(1);\n    // for this test, properties need to be in alphabetical order\n    var obj = { one: 1, two: { a: [2,3], b: 4 } };\n    t.equal(stringify(obj, {space: '  '}), JSON.stringify(obj, null, '  '));\n});\n"]}